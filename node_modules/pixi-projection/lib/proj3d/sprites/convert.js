'use strict';

var Container3d = require('../Container3d.js');
var Projection3d = require('../Projection3d.js');
var Mesh3d2d = require('../mesh/Mesh3d2d.js');
var mesh = require('@pixi/mesh');
require('../../proj2d/index.js');
var core = require('@pixi/core');
var meshExtras = require('@pixi/mesh-extras');
var display = require('@pixi/display');
var sprite = require('@pixi/sprite');
var Sprite3d = require('./Sprite3d.js');
var Mesh2d = require('../../proj2d/mesh/Mesh2d.js');

const containerProps = {
  worldTransform: {
    get: Container3d.container3dWorldTransform,
    enumerable: true,
    configurable: true
  },
  position3d: {
    get() {
      return this.proj.position;
    },
    set(value) {
      this.proj.position.copy(value);
    }
  },
  scale3d: {
    get() {
      return this.proj.scale;
    },
    set(value) {
      this.proj.scale.copy(value);
    }
  },
  pivot3d: {
    get() {
      return this.proj.pivot;
    },
    set(value) {
      this.proj.pivot.copy(value);
    }
  },
  euler: {
    get() {
      return this.proj.euler;
    },
    set(value) {
      this.proj.euler.copy(value);
    }
  }
};
function convertTo3d() {
  if (this.proj)
    return;
  this.proj = new Projection3d.Projection3d(this.transform);
  this.toLocal = Container3d.Container3d.prototype.toLocal;
  this.isFrontFace = Container3d.Container3d.prototype.isFrontFace;
  this.getDepth = Container3d.Container3d.prototype.getDepth;
  Object.defineProperties(this, containerProps);
}
display.Container.prototype.convertTo3d = convertTo3d;
sprite.Sprite.prototype.convertTo3d = function spriteConvertTo3d() {
  if (this.proj)
    return;
  this.calculateVertices = Sprite3d.Sprite3d.prototype.calculateVertices;
  this.calculateTrimmedVertices = Sprite3d.Sprite3d.prototype.calculateTrimmedVertices;
  this._calculateBounds = Sprite3d.Sprite3d.prototype._calculateBounds;
  this.containsPoint = Sprite3d.Sprite3d.prototype.containsPoint;
  this.pluginName = "batch2d";
  convertTo3d.call(this);
};
display.Container.prototype.convertSubtreeTo3d = function convertSubtreeTo3d() {
  this.convertTo3d();
  for (let i = 0; i < this.children.length; i++) {
    this.children[i].convertSubtreeTo3d();
  }
};
meshExtras.SimpleMesh.prototype.convertTo3d = meshExtras.SimpleRope.prototype.convertTo3d = function meshConvert3d() {
  if (this.proj)
    return;
  this.calculateVertices = Mesh3d2d.Mesh3d2d.prototype.calculateVertices;
  this._renderDefault = Mesh3d2d.Mesh3d2d.prototype._renderDefault;
  if (this.material.pluginName !== "batch2d") {
    this.material = new mesh.MeshMaterial(this.material.texture, {
      program: core.Program.from(Mesh2d.Mesh2d.defaultVertexShader, Mesh2d.Mesh2d.defaultFragmentShader),
      pluginName: "batch2d"
    });
  }
  convertTo3d.call(this);
};
//# sourceMappingURL=convert.js.map
