import { Mesh, MeshMaterial } from '@pixi/mesh';
import { Geometry, Renderer, State, Texture } from '@pixi/core';
import { Projection3d } from '../Projection3d';
import { IPointData, Matrix } from '@pixi/math';
import { DisplayObject } from '@pixi/display';
import { TRANSFORM_STEP } from '../../base';
import { Euler } from '../Euler';
export declare class Mesh3d2d extends Mesh {
    constructor(geometry: Geometry, shader: MeshMaterial, state: State, drawMode?: number);
    vertexData2d: Float32Array;
    proj: Projection3d;
    calculateVertices(): void;
    get worldTransform(): Matrix;
    toLocal<T extends IPointData>(position: IPointData, from?: DisplayObject, point?: T, skipUpdate?: boolean, step?: TRANSFORM_STEP): T;
    isFrontFace(forceUpdate?: boolean): boolean;
    getDepth(forceUpdate?: boolean): boolean;
    get position3d(): IPointData;
    set position3d(value: IPointData);
    get scale3d(): IPointData;
    set scale3d(value: IPointData);
    get euler(): Euler;
    set euler(value: Euler);
    get pivot3d(): IPointData;
    set pivot3d(value: IPointData);
}
export declare class SimpleMesh3d2d extends Mesh3d2d {
    constructor(texture: Texture, vertices?: Float32Array, uvs?: Float32Array, indices?: Uint16Array, drawMode?: number);
    autoUpdate: boolean;
    get vertices(): Float32Array;
    set vertices(value: Float32Array);
    protected _render(renderer?: Renderer): void;
}
