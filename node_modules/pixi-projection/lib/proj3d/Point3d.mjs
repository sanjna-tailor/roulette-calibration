import { Point, ObservablePoint } from '@pixi/math';

class Point3d extends Point {
  constructor(x, y, z) {
    super(x, y);
    this.z = z;
  }
  set(x, y, z) {
    this.x = x || 0;
    this.y = y === void 0 ? this.x : y || 0;
    this.z = y === void 0 ? this.x : z || 0;
    return this;
  }
  copyFrom(p) {
    this.set(p.x, p.y, p.z || 0);
    return this;
  }
  copyTo(p) {
    p.set(this.x, this.y, this.z);
    return p;
  }
}
class ObservablePoint3d extends ObservablePoint {
  constructor() {
    super(...arguments);
    this._z = 0;
  }
  get z() {
    return this._z;
  }
  set z(value) {
    if (this._z !== value) {
      this._z = value;
      this.cb.call(this.scope);
    }
  }
  set(x, y, z) {
    const _x = x || 0;
    const _y = y === void 0 ? _x : y || 0;
    const _z = y === void 0 ? _x : z || 0;
    if (this._x !== _x || this._y !== _y || this._z !== _z) {
      this._x = _x;
      this._y = _y;
      this._z = _z;
      this.cb.call(this.scope);
    }
    return this;
  }
  copyFrom(p) {
    this.set(p.x, p.y, p.z || 0);
    return this;
  }
  copyTo(p) {
    p.set(this._x, this._y, this._z);
    return p;
  }
}

export { ObservablePoint3d, Point3d };
//# sourceMappingURL=Point3d.mjs.map
