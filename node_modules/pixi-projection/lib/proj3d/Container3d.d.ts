import { Projection3d } from './Projection3d';
import { Container, DisplayObject } from '@pixi/display';
import { IPointData, Matrix, Point } from '@pixi/math';
import { TRANSFORM_STEP } from '../base';
import { IEuler } from './ObservableEuler';
export declare function container3dWorldTransform(): Matrix;
export interface IDisplayObject3d {
    isFrontFace(forceUpdate?: boolean): boolean;
    getDepth(forceUpdate?: boolean): number;
    toLocal<P extends IPointData = Point>(position: IPointData, from?: DisplayObject, point?: P, skipUpdate?: boolean, step?: TRANSFORM_STEP): P;
    position3d: IPointData;
    scale3d: IPointData;
    euler: IEuler;
    pivot3d: IPointData;
}
export declare class Container3d extends Container implements IDisplayObject3d {
    constructor();
    proj: Projection3d;
    isFrontFace(forceUpdate?: boolean): boolean;
    getDepth(forceUpdate?: boolean): number;
    toLocal<P extends IPointData = Point>(position: IPointData, from?: DisplayObject, point?: P, skipUpdate?: boolean, step?: TRANSFORM_STEP): P;
    get worldTransform(): Matrix;
    get position3d(): IPointData;
    set position3d(value: IPointData);
    get scale3d(): IPointData;
    set scale3d(value: IPointData);
    get euler(): IEuler;
    set euler(value: IEuler);
    get pivot3d(): IPointData;
    set pivot3d(value: IPointData);
}
export declare const container3dToLocal: <P extends IPointData = Point>(position: IPointData, from?: DisplayObject, point?: P, skipUpdate?: boolean, step?: TRANSFORM_STEP) => P;
export declare const container3dGetDepth: (forceUpdate?: boolean) => number;
export declare const container3dIsFrontFace: (forceUpdate?: boolean) => boolean;
