'use strict';

var Projection2d = require('./Projection2d.js');
var display = require('@pixi/display');
require('../base/index.js');
var AbstractProjection = require('../base/AbstractProjection.js');

function container2dWorldTransform() {
  return this.proj.affine ? this.transform.worldTransform : this.proj.world;
}
class Container2d extends display.Container {
  constructor() {
    super();
    this.proj = new Projection2d.Projection2d(this.transform);
  }
  toLocal(position, from, point, skipUpdate, step = AbstractProjection.TRANSFORM_STEP.ALL) {
    if (from) {
      position = from.toGlobal(position, point, skipUpdate);
    }
    if (!skipUpdate) {
      this._recursivePostUpdateTransform();
    }
    if (step >= AbstractProjection.TRANSFORM_STEP.PROJ) {
      if (!skipUpdate) {
        this.displayObjectUpdateTransform();
      }
      if (this.proj.affine) {
        return this.transform.worldTransform.applyInverse(position, point);
      }
      return this.proj.world.applyInverse(position, point);
    }
    if (this.parent) {
      point = this.parent.worldTransform.applyInverse(position, point);
    } else {
      point.x = position.x;
      point.y = position.y;
    }
    if (step === AbstractProjection.TRANSFORM_STEP.NONE) {
      return point;
    }
    return this.transform.localTransform.applyInverse(point, point);
  }
  get worldTransform() {
    return this.proj.affine ? this.transform.worldTransform : this.proj.world;
  }
}
const container2dToLocal = Container2d.prototype.toLocal;

exports.Container2d = Container2d;
exports.container2dToLocal = container2dToLocal;
exports.container2dWorldTransform = container2dWorldTransform;
//# sourceMappingURL=Container2d.js.map
