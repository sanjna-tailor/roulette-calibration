import { Transform } from '@pixi/math';
import { Projection2d } from '../Projection2d.mjs';
import '../../base/index.mjs';
import { container2dToLocal } from '../Container2d.mjs';
import { TilingSprite } from '@pixi/sprite-tiling';
import { TRANSFORM_STEP } from '../../base/AbstractProjection.mjs';

const tempTransform = new Transform();
class TilingSprite2d extends TilingSprite {
  constructor(texture, width, height) {
    super(texture, width, height);
    this.tileProj = new Projection2d(this.tileTransform);
    this.tileProj.reverseLocalOrder = true;
    this.proj = new Projection2d(this.transform);
    this.pluginName = "tilingSprite2d";
    this.uvRespectAnchor = true;
  }
  get worldTransform() {
    return this.proj.affine ? this.transform.worldTransform : this.proj.world;
  }
  toLocal(position, from, point, skipUpdate, step = TRANSFORM_STEP.ALL) {
    return container2dToLocal.call(this, position, from, point, skipUpdate, step);
  }
  _render(renderer) {
    const texture = this._texture;
    if (!texture || !texture.valid) {
      return;
    }
    this.tileTransform.updateTransform(tempTransform);
    this.uvMatrix.update();
    renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);
    renderer.plugins[this.pluginName].render(this);
  }
}

export { TilingSprite2d };
//# sourceMappingURL=TilingSprite2d.mjs.map
