'use strict';

var Projection2d = require('../Projection2d.js');
var Container2d = require('../Container2d.js');
var spriteTiling = require('@pixi/sprite-tiling');
var core = require('@pixi/core');
var mesh = require('@pixi/mesh');
var Mesh2d = require('../mesh/Mesh2d.js');
var meshExtras = require('@pixi/mesh-extras');
var display = require('@pixi/display');
var sprite = require('@pixi/sprite');
var Sprite2d = require('./Sprite2d.js');
var TilingSprite2d = require('../tiling/TilingSprite2d.js');

function convertTo2d() {
  if (this.proj)
    return;
  this.proj = new Projection2d.Projection2d(this.transform);
  this.toLocal = Container2d.Container2d.prototype.toLocal;
  Object.defineProperty(this, "worldTransform", {
    get: Container2d.container2dWorldTransform,
    enumerable: true,
    configurable: true
  });
}
display.Container.prototype.convertTo2d = convertTo2d;
sprite.Sprite.prototype.convertTo2d = function spriteConvertTo2d() {
  if (this.proj)
    return;
  this.calculateVertices = Sprite2d.Sprite2d.prototype.calculateVertices;
  this.calculateTrimmedVertices = Sprite2d.Sprite2d.prototype.calculateTrimmedVertices;
  this._calculateBounds = Sprite2d.Sprite2d.prototype._calculateBounds;
  this.pluginName = "batch2d";
  convertTo2d.call(this);
};
display.Container.prototype.convertSubtreeTo2d = function convertSubtreeTo2d() {
  this.convertTo2d();
  for (let i = 0; i < this.children.length; i++) {
    this.children[i].convertSubtreeTo2d();
  }
};
meshExtras.SimpleMesh.prototype.convertTo2d = meshExtras.SimpleRope.prototype.convertTo2d = function meshConvertTo2d() {
  if (this.proj)
    return;
  this.calculateVertices = Mesh2d.Mesh2d.prototype.calculateVertices;
  this._renderDefault = Mesh2d.Mesh2d.prototype._renderDefault;
  if (this.material.pluginName !== "batch2d") {
    this.material = new mesh.MeshMaterial(this.material.texture, {
      program: core.Program.from(Mesh2d.Mesh2d.defaultVertexShader, Mesh2d.Mesh2d.defaultFragmentShader),
      pluginName: "batch2d"
    });
  }
  convertTo2d.call(this);
};
spriteTiling.TilingSprite.prototype.convertTo2d = function tilingConvertTo2d() {
  if (this.proj)
    return;
  this.tileProj = new Projection2d.Projection2d(this.tileTransform);
  this.tileProj.reverseLocalOrder = true;
  this.uvRespectAnchor = true;
  this.calculateTrimmedVertices = Sprite2d.Sprite2d.prototype.calculateTrimmedVertices;
  this._calculateBounds = Sprite2d.Sprite2d.prototype._calculateBounds;
  this._render = TilingSprite2d.TilingSprite2d.prototype._render;
  this.pluginName = "tilingSprite2d";
  convertTo2d.call(this);
};
//# sourceMappingURL=convert.js.map
