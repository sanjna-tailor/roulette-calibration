import { IPointData } from '@pixi/math';
import { AbstractProjection } from '../base';
import { Surface } from './BaseSurface';
import { Sprite } from '@pixi/sprite';
export interface IWorldTransform {
    apply(pos: IPointData, newPos: IPointData): IPointData;
    applyInverse(pos: IPointData, newPos: IPointData): IPointData;
}
export declare class ProjectionSurface extends AbstractProjection {
    _surface: Surface;
    _activeProjection: ProjectionSurface;
    set enabled(value: boolean);
    get surface(): Surface;
    set surface(value: Surface);
    applyPartial(pos: IPointData, newPos?: IPointData): IPointData;
    apply(pos: IPointData, newPos?: IPointData): IPointData;
    applyInverse(pos: IPointData, newPos: IPointData): IPointData;
    mapBilinearSprite(sprite: Sprite, quad: Array<IPointData>): void;
    _currentSurfaceID: number;
    _currentLegacyID: number;
    _lastUniforms: any;
    clear(): void;
    get uniforms(): any;
}
