'use strict';

var math = require('@pixi/math');
require('../base/index.js');
var BilinearSurface = require('./BilinearSurface.js');
var AbstractProjection = require('../base/AbstractProjection.js');

const fun = math.Transform.prototype.updateTransform;
function transformHack(parentTransform) {
  const proj = this.proj;
  const pp = parentTransform.proj;
  const ta = this;
  if (!pp) {
    fun.call(this, parentTransform);
    proj._activeProjection = null;
    return;
  }
  if (pp._surface) {
    proj._activeProjection = pp;
    this.updateLocalTransform();
    this.localTransform.copyTo(this.worldTransform);
    if (ta._parentID < 0) {
      ++ta._worldID;
    }
    return;
  }
  fun.call(this, parentTransform);
  proj._activeProjection = pp._activeProjection;
}
class ProjectionSurface extends AbstractProjection.AbstractProjection {
  constructor() {
    super(...arguments);
    this._surface = null;
    this._activeProjection = null;
    this._currentSurfaceID = -1;
    this._currentLegacyID = -1;
    this._lastUniforms = null;
  }
  // eslint-disable-next-line accessor-pairs
  set enabled(value) {
    if (value === this._enabled) {
      return;
    }
    this._enabled = value;
    if (value) {
      this.legacy.updateTransform = transformHack;
      this.legacy._parentID = -1;
    } else {
      this.legacy.updateTransform = math.Transform.prototype.updateTransform;
      this.legacy._parentID = -1;
    }
  }
  get surface() {
    return this._surface;
  }
  set surface(value) {
    if (this._surface === value) {
      return;
    }
    this._surface = value || null;
    this.legacy._parentID = -1;
  }
  applyPartial(pos, newPos) {
    if (this._activeProjection !== null) {
      newPos = this.legacy.worldTransform.apply(pos, newPos);
      return this._activeProjection.surface.apply(newPos, newPos);
    }
    if (this._surface !== null) {
      return this.surface.apply(pos, newPos);
    }
    return this.legacy.worldTransform.apply(pos, newPos);
  }
  apply(pos, newPos) {
    if (this._activeProjection !== null) {
      newPos = this.legacy.worldTransform.apply(pos, newPos);
      this._activeProjection.surface.apply(newPos, newPos);
      return this._activeProjection.legacy.worldTransform.apply(newPos, newPos);
    }
    if (this._surface !== null) {
      newPos = this.surface.apply(pos, newPos);
      return this.legacy.worldTransform.apply(newPos, newPos);
    }
    return this.legacy.worldTransform.apply(pos, newPos);
  }
  applyInverse(pos, newPos) {
    if (this._activeProjection !== null) {
      newPos = this._activeProjection.legacy.worldTransform.applyInverse(pos, newPos);
      this._activeProjection._surface.applyInverse(newPos, newPos);
      return this.legacy.worldTransform.applyInverse(newPos, newPos);
    }
    if (this._surface !== null) {
      newPos = this.legacy.worldTransform.applyInverse(pos, newPos);
      return this._surface.applyInverse(newPos, newPos);
    }
    return this.legacy.worldTransform.applyInverse(pos, newPos);
  }
  mapBilinearSprite(sprite, quad) {
    if (!(this._surface instanceof BilinearSurface.BilinearSurface)) {
      this.surface = new BilinearSurface.BilinearSurface();
    }
    this.surface.mapSprite(sprite, quad, this.legacy);
  }
  clear() {
    if (this.surface) {
      this.surface.clear();
    }
  }
  get uniforms() {
    if (this._currentLegacyID === this.legacy._worldID && this._currentSurfaceID === this.surface._updateID) {
      return this._lastUniforms;
    }
    this._lastUniforms = this._lastUniforms || {};
    this._lastUniforms.translationMatrix = this.legacy.worldTransform;
    this._surface.fillUniforms(this._lastUniforms);
    return this._lastUniforms;
  }
}

exports.ProjectionSurface = ProjectionSurface;
//# sourceMappingURL=ProjectionSurface.js.map
