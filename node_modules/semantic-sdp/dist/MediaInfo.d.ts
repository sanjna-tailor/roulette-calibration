export = MediaInfo;
/** @typedef {import(".").MediaType} MediaType */
/** @typedef {import(".").SupportedMedia} SupportedMedia */
/** @typedef {import(".").MediaInfoPlain} MediaInfoPlain */
/** @typedef {import(".").MediaInfoLike} MediaInfoLike */
/**
 * Media information (relates to a m-line in SDP)
 * @namespace
 */
declare class MediaInfo {
    /**
     * @constructor
     * @alias MediaInfo
     * @param {String} id	- Media id
     * @param {MediaType} type	- Media type "audio"|"video"|"application"
     */
    constructor(id: string, type: MediaType);
    id: string;
    type: import(".").MediaType;
    direction: any;
    extensions: Map<number, string>;
    codecs: Map<number, CodecInfo>;
    rids: Map<string, RIDInfo>;
    simulcast: SimulcastInfo;
    bitrate: number;
    control: string;
    dataChannel: DataChannelInfo;
    /**
     * Clone MediaInfo object
     * @returns {MediaInfo} cloned object
     */
    clone(): MediaInfo;
    /**
     * Return a plain javascript object which can be converted to JSON
     * @returns {MediaInfoPlain} Plain javascript object
     */
    plain(): MediaInfoPlain;
    /**
     * Get media type "audio"|"video"|"application"
     * @returns {MediaType}
     */
    getType(): MediaType;
    /**
     * Get id (msid) for the media info
     * @returns {String}
     */
    getId(): string;
    /**
     * Set id (msid) for the media info
     * @param {String} id
     */
    setId(id: string): void;
    /**
     * Add rtp header extension support
     * @param {Number} id
     * @param {String} name
     */
    addExtension(id: number, name: string): void;
    /**
     * Add rid information
     * @param {RIDInfo} ridInfo
     */
    addRID(ridInfo: RIDInfo): void;
    /**
     * Add Codec support information
     * @param {CodecInfo} codecInfo - Codec info object
     */
    addCodec(codecInfo: CodecInfo): void;
    /**
     * Set codec map
     * @param {Map<Number,CodecInfo>} codecs - Map of codec info objecs
     */
    setCodecs(codecs: Map<number, CodecInfo>): void;
    /**
     * Get codec for payload type number
     * @param {Number} type - Payload type number
     * @returns {CodecInfo} codec info object
     */
    getCodecForType(type: number): CodecInfo;
    /**
     * Get codec by codec name
     * @param {String} codec - Codec name (eg: "vp8")
     * @returns {CodecInfo}
     */
    getCodec(codec: string): CodecInfo;
    /**
     * Check if this media has information for this codec
     * @param {String} codec - Codec name
     * @returns {Boolean}
     */
    hasCodec(codec: string): boolean;
    /**
     * Get all codecs in this media
     * @returns {Map<Number,CodecInfo>}
     */
    getCodecs(): Map<number, CodecInfo>;
    /**
     * Check if any of the codecs on the media description supports rtx
     * @returns {Boolean}
     */
    hasRTX(): boolean;
    /**
     * Get all extensions registered in  this media info
     * @returns {Map<Number,String>}
     */
    getExtensions(): Map<number, string>;
    /**
     * Get all rids registered in  this media info
     * @returns {Map<String,RIDInfo>}
     */
    getRIDs(): Map<string, RIDInfo>;
    /**
     * Get rid info for id
     * @param {String} id - rid value to get info for
     * @returns {RIDInfo}
     */
    getRID(id: string): RIDInfo;
    /**
     * Returns maximum bitrate for this media
     * @returns {Number}
     */
    getBitrate(): number;
    /**
     * Set maximum bitrate for this media
     * @param {Number} bitrate
     */
    setBitrate(bitrate: number): void;
    /**
     * Get media direction
     * @returns {Direction}
     */
    getDirection(): Direction;
    /**
     * Set media direction
     * @param {Direction} direction
     */
    setDirection(direction: Direction): void;
    /**
     * Check if media has control attribute
     * @returns {Boolean}
     */
    hasControl(): boolean;
    /**
     * Get control attribute
     * @returns {String}
     */
    getControl(): string;
    /**
     * Set control attribute
     * @param {String} control
     */
    setControl(control: string): void;
    /**
     * Check if media has a dataChannel
     * @returns {Boolean}
     */
    hasDataChannel(): boolean;
    /**
     * Get dataChannel info
     * @returns {DataChannelInfo}
     */
    getDataChannel(): DataChannelInfo;
    /**
     * Set dataChannel info
     * @param {DataChannelInfo} dataChannel info
     */
    setDataChannel(dataChannel: DataChannelInfo): void;
    /**
     * Helper usefull for creating media info answers.
     * - Will reverse the direction
     * - For each supported codec, it will change the payload type to match the offer and append it to the answer
     * - For each supported extension, it will append the ones present on the offer with the id offered
     * @param {SupportedMedia} [supported] - Supported codecs and extensions to be included on answer
     * @returns {MediaInfo}
     */
    answer(supported?: SupportedMedia): MediaInfo;
    /**
     * Get Simulcast info
     * @returns {SimulcastInfo}
     */
    getSimulcast(): SimulcastInfo;
    /**
     * Set stream simulcast info
     * @param {SimulcastInfo} simulcast - Simulcast stream info
     */
    setSimulcast(simulcast: SimulcastInfo): void;
}
declare namespace MediaInfo {
    export { create, expand, clone, MediaType, SupportedMedia, MediaInfoPlain, MediaInfoLike };
}
import CodecInfo = require("./CodecInfo");
import RIDInfo = require("./RIDInfo");
import SimulcastInfo = require("./SimulcastInfo");
import DataChannelInfo = require("./DataChannelInfo");
type MediaInfoPlain = import(".").MediaInfoPlain;
type MediaType = import(".").MediaType;
import Direction = require("./Direction");
type SupportedMedia = import(".").SupportedMedia;
/**
* Helper factory for creating media info objects.
* @param {MediaType} type - Media type
* @param {SupportedMedia} [supported] - Supported media capabilities to be included on media info
* @returns {MediaInfo}
*/
declare function create(type: MediaType, supported?: SupportedMedia): MediaInfo;
/**
 * Expands a plain JSON object containing an MediaInfo
 * @param {MediaInfoLike} plain JSON object
 * @returns {MediaInfo} Parsed Media info
 */
declare function expand(plain: MediaInfoLike): MediaInfo;
/**
 * Expands a plain JSON object containing an MediaInfo or a MediaInfo and clone it
 * @param {MediaInfoLike} plain JSON object or MediaInfo
 * @returns {MediaInfo} Cloned MediaInfo
 */
declare function clone(plain: MediaInfoLike): MediaInfo;
type MediaInfoLike = import(".").MediaInfoLike;
//# sourceMappingURL=MediaInfo.d.ts.map