export = CandidateInfo;
/** @typedef {import(".").CandidateInfoPlain} CandidateInfoPlain */
/** @typedef {import(".").CandidateInfoLike} CandidateInfoLike */
/**
 * ICE candidate information
 * @namespace
 */
declare class CandidateInfo {
    /**
     * CanditateInfo constructor
     * @constructor
     * @alias CandidateInfo
     * @param {String} foundation
     * @param {Number} componentId
     * @param {String} transport
     * @param {Number} priority
     * @param {String} address
     * @param {Number} port
     * @param {String} type
     * @param {String} [relAddr]
     * @param {Number} [relPort]
     */
    constructor(foundation: string, componentId: number, transport: string, priority: number, address: string, port: number, type: string, relAddr?: string, relPort?: number);
    foundation: string;
    componentId: number;
    transport: string;
    priority: number;
    address: string;
    port: number;
    type: string;
    relAddr: string;
    relPort: number;
    /**
     * Check if the ice candadate has same info as us
     * @param {CandidateInfo} candidate - ICE candadate to check against
     * @returns {Boolean}
     */
    equals(candidate: CandidateInfo): boolean;
    /**
     * Create a clone of this Candidate info object
     * @returns {CandidateInfo}
     */
    clone(): CandidateInfo;
    /**
     * Return a plain javascript object which can be converted to JSON
     * @returns {CandidateInfoPlain} Plain javascript object
     */
    plain(): CandidateInfoPlain;
    /**
     * Get the candidate foundation
     * @returns {String}
     */
    getFoundation(): string;
    /**
     * Get the candidate component id
     * @returns {Number}
     */
    getComponentId(): number;
    /**
     * Get the candidate transport type
     * @returns {String}
     */
    getTransport(): string;
    /**
     * Get the candidate priority
     * @returns {Number}
     */
    getPriority(): number;
    /**
     * Get the candidate IP address
     * @returns {String}
     */
    getAddress(): string;
    /**
     * Get the candidate IP port
     * @returns {Number}
     */
    getPort(): number;
    /**
     * Get the candidate type
     * @returns {String}
     */
    getType(): string;
    /**
     * Get the candidate related IP address for relfexive candidates
     * @returns {String | undefined}
     */
    getRelAddr(): string | undefined;
    /**
     * Get the candidate related IP port for relfexive candidates
     * @returns {Number | undefined}
     */
    getRelPort(): number | undefined;
}
declare namespace CandidateInfo {
    export { expand, clone, CandidateInfoPlain, CandidateInfoLike };
}
type CandidateInfoPlain = import(".").CandidateInfoPlain;
/**
 * Expands a plain JSON object containing an CandidateInfo
 * @param {CandidateInfoLike} plain JSON object
 * @returns {CandidateInfo} Parsed Candidate info
 */
declare function expand(plain: CandidateInfoLike): CandidateInfo;
/**
 * Expands a plain JSON object containing an CandidateInfo or a CandidateInfo and clone it
 * @param {CandidateInfoLike} plain JSON object or CandidateInfo
 * @returns {CandidateInfo} Cloned Candidate info
 */
declare function clone(plain: CandidateInfoLike): CandidateInfo;
type CandidateInfoLike = import(".").CandidateInfoLike;
//# sourceMappingURL=CandidateInfo.d.ts.map