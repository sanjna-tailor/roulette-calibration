export = RIDInfo;
/** @typedef {import(".").RIDInfoPlain} RIDInfoPlain */
/** @typedef {import(".").RIDInfoLike} RIDInfoLike */
/**
 * RID info
 * @namespace
 */
declare class RIDInfo {
    /**
     * @constructor
     * @alias DTLSInfo
     * @param {String} id		- rid value
     * @param {DirectionWay} direction	- direction
     */
    constructor(id: string, direction: DirectionWay);
    id: string;
    direction: number;
    formats: number[];
    params: Map<any, any>;
    /**
     * Create a clone of this RID info object
     * @returns {RIDInfo}
     */
    clone(): RIDInfo;
    /**
     * Return a plain javascript object which can be converted to JSON
     * @returns {RIDInfoPlain} Plain javascript object
     */
    plain(): RIDInfoPlain;
    /**
     * Get the rid id value
     * @returns {String}
     */
    getId(): string;
    /**
     * Get rid direction
     * @returns {DirectionWay}
     */
    getDirection(): DirectionWay;
    /**
     * Set direction setup
     * @param {DirectionWay} direction
     */
    setDirection(direction: DirectionWay): void;
    /**
     * Get pt formats for rid
     * @returns {Array<Number>}
     */
    getFormats(): Array<number>;
    /**
     * Set pt formats for rid
     * @param {Array<Number>} formats
     */
    setFormats(formats: Array<number>): void;
    /**
     * Get the rid params
     * @returns {Map<String,String>} The params map
     */
    getParams(): Map<string, string>;
    /**
     * Set the rid params
     * @param {Map<String,String>} params - rid params map
     */
    setParams(params: Map<string, string>): void;
    /**
     * Add an rid param
     * @param {String} id
     * @param {String} param
     */
    addParam(id: string, param: string): void;
}
declare namespace RIDInfo {
    export { expand, clone, RIDInfoPlain, RIDInfoLike };
}
type RIDInfoPlain = import(".").RIDInfoPlain;
import DirectionWay = require("./DirectionWay");
/**
 * Expands a plain JSON object containing an RIDInfo
 * @param {RIDInfoLike} plain JSON object
 * @returns {RIDInfo} Parsed RID info
 */
declare function expand(plain: RIDInfoLike): RIDInfo;
/**
 * Expands a plain JSON object containing an RIDInfo or a RIDInfo and clone it
 * @param {RIDInfoLike} plain JSON object or RIDInfo
 * @returns {RIDInfo} Cloned RIDInfo
 */
declare function clone(plain: RIDInfoLike): RIDInfo;
type RIDInfoLike = import(".").RIDInfoLike;
//# sourceMappingURL=RIDInfo.d.ts.map