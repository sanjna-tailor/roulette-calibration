export = TrackEncodingInfo;
/** @typedef {import(".").TrackEncodingInfoPlain} TrackEncodingInfoPlain */
/** @typedef {import(".").TrackEncodingInfoLike} TrackEncodingInfoLike */
/**
 * Simulcast encoding layer information for track
 * @namespace
 */
declare class TrackEncodingInfo {
    /**
     * @constructor
     * @alias DTLSInfo
     * @param {String} id		- rid value
     * @param {Boolean} [paused]
     */
    constructor(id: string, paused?: boolean);
    id: string;
    paused: boolean;
    codecs: Map<any, any>;
    params: Map<any, any>;
    /**
     * Create a clone of this RID info object
     * @returns {TrackEncodingInfo}
     */
    clone(): TrackEncodingInfo;
    /**
     * Return a plain javascript object which can be converted to JSON
     * @returns {TrackEncodingInfoPlain} Plain javascript object
     */
    plain(): TrackEncodingInfoPlain;
    /**
     * Get the rid id value
     * @returns {String}
     */
    getId(): string;
    /**
     * Get codec information for this encoding (if any)
     * @returns {Map<Number,CodecInfo>}
     */
    getCodecs(): Map<number, CodecInfo>;
    /**
     * Add codec info
     * @param {CodecInfo} codec - Codec Info
     */
    addCodec(codec: CodecInfo): void;
    /**
     * Get the rid params
     * @returns {Map<String,String>} The params map
     */
    getParams(): Map<string, string>;
    /**
     * Set the rid params
     * @param {Map<String,String>} params - rid params map
     */
    setParams(params: Map<string, string>): void;
    /**
     * Add an rid param
     * @param {String} id
     * @param {String} param
     */
    addParam(id: string, param: string): void;
    /**
     * Is the stream paused
     * @returns {Boolean}
     */
    isPaused(): boolean;
}
declare namespace TrackEncodingInfo {
    export { expand, clone, TrackEncodingInfoPlain, TrackEncodingInfoLike };
}
type TrackEncodingInfoPlain = import(".").TrackEncodingInfoPlain;
import CodecInfo = require("./CodecInfo");
/**
 * Expands a plain JSON object containing an TrackEncodingInfo
 * @param {TrackEncodingInfoLike} plain JSON object
 * @returns {TrackEncodingInfo} Parsed TrackEncoding info
 */
declare function expand(plain: TrackEncodingInfoLike): TrackEncodingInfo;
/**
 * Expands a plain JSON object containing an TrackEncodingInfo or a TrackEncodingInfo and clone it
 * @param {TrackEncodingInfoLike} plain JSON object or TrackEncodingInfo
 * @returns {TrackEncodingInfo} Cloned TrackEncodingInfo
 */
declare function clone(plain: TrackEncodingInfoLike): TrackEncodingInfo;
type TrackEncodingInfoLike = import(".").TrackEncodingInfoLike;
//# sourceMappingURL=TrackEncodingInfo.d.ts.map