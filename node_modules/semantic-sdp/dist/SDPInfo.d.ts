export = SDPInfo;
/** @typedef {import(".").MediaType} MediaType */
/** @typedef {import(".").SDPInfoParams} SDPInfoParams */
/** @typedef {import(".").SDPInfoPlain} SDPInfoPlain */
/** @typedef {import(".").SDPInfoLike} SDPInfoLike */
/**
 * SDP semantic info object
 *	This object represent the minimal information of an WebRTC SDP in a semantic hierarchy
 * @namespace
 */
declare class SDPInfo {
    /**
     * @constructor
     * @alias SDPInfo
     * @param {Number} [version] SDP version attribute
     */
    constructor(version?: number);
    version: number;
    streams: Map<string, StreamInfo>;
    medias: MediaInfo[];
    candidates: CandidateInfo[];
    ice: ICEInfo;
    dtls: DTLSInfo;
    crypto: CryptoInfo;
    extmapAllowMixed: boolean;
    /**
     * Clone SDPinfo object
     * @returns {SDPInfo} cloned object
     */
    clone(): SDPInfo;
    /**
     * Return a plain javascript object which can be converted to JSON
     * @returns {SDPInfoPlain} Plain javascript object
     */
    plain(): SDPInfoPlain;
    /**
     * Returns an unified plan version of the SDP info
     * @returns {SDPInfo} Unified version
     */
    unify(): SDPInfo;
    /**
     * Set SDP version
     * @param {Number} version
     */
    setVersion(version: number): void;
    /**
     * Add a new media description information to this sdp info
     * @param {MediaInfo} media
     */
    addMedia(media: MediaInfo): void;
    /**
     * Get first media description info associated to the media type
     * @param {MediaType} type - Media type ('audio'|'video')
     * @returns {MediaInfo} or null if not found
     */
    getMedia(type: MediaType): MediaInfo;
    /**
     * Get all media description info associated to the media type
     * @param {MediaType} type - Media type ('audio'|'video')
     * @returns {Array<MediaInfo>} or null if not found
     */
    getMediasByType(type: MediaType): Array<MediaInfo>;
    /**
     * Get media description info associated by media Ide
     * @param {string} msid - Media ID
     * @returns {MediaInfo} or null if not found
     */
    getMediaById(msid: string): MediaInfo;
    /**
     * Replace media with same id with the new one
     * @param {MediaInfo} media - The new media
     * @returns {boolean} true if the media was replaced, false if not found
     */
    replaceMedia(media: MediaInfo): boolean;
    /**
     * Return all media description information
     * @returns {Array<MediaInfo>}
     */
    getMedias(): Array<MediaInfo>;
    /**
     * Return SDP version attribute
     * @returns {Number}
     */
    getVersion(): number;
    /**
     * Get DTLS info for the transport bundle
     * @returns {DTLSInfo} DTLS info object
     */
    getDTLS(): DTLSInfo;
    /**
     * Set DTLS info object for the transport bundle
     * @param {DTLSInfo}  dtlsInfo - DTLS info object
     */
    setDTLS(dtlsInfo: DTLSInfo): void;
    /**
     * Check if sdp is using crypto
     * @returns {boolean}
     */
    hasCrypto(): boolean;
    /**
     * Get SDES info for the transport bundle
     * @returns {CryptoInfo} DTLS info object
     */
    getCrypto(): CryptoInfo;
    /**
     * Set SDES info object for the transport bundle
     * @param {CryptoInfo}  cryptoInfo - DTLS info object
     */
    setCrypto(cryptoInfo: CryptoInfo): void;
    /**
     * Check if sdp is using ice
     * @returns {boolean}
     */
    hasICE(): boolean;
    /**
     * Get the ICE info object for the transport bundle
     * @returns {ICEInfo} ICE info object
     */
    getICE(): ICEInfo;
    /**
     * Set ICE info object for the transport bundle
     * @param {ICEInfo} iceInfo - ICE info object
     */
    setICE(iceInfo: ICEInfo): void;
    /**
     * Add ICE candidate for transport
     * @param {CandidateInfo} candidate - ICE candidate
     */
    addCandidate(candidate: CandidateInfo): void;
    /**
     * Add ICE candidates for transport
     * @param {Array<CandidateInfo>} candidates - ICE candidates
     */
    addCandidates(candidates: Array<CandidateInfo>): void;
    /**
     * Get all ICE candidates for this transport
     * @returns {Array<CandidateInfo>}
     */
    getCandidates(): Array<CandidateInfo>;
    /**
     * Get announced stream
     * @param {String} id
     * @returns {StreamInfo}
     */
    getStream(id: string): StreamInfo;
    /**
     * Get all announced stream
     * @returns {Map<String, StreamInfo>}
     */
    getStreams(): Map<string, StreamInfo>;
    /**
     * Get first announced stream
     * @returns {StreamInfo}
     */
    getFirstStream(): StreamInfo;
    /**
     * Announce a new stream in SDP
     * @param {StreamInfo} stream
     */
    addStream(stream: StreamInfo): void;
    /**
     * Remove an announced stream from SDP
     * @param {StreamInfo} stream
     * @returns {boolean}
     */
    removeStream(stream: StreamInfo): boolean;
    /**
     * Remove all streams
     */
    removeAllStreams(): void;
    /**
     *
     * @param {String} mid Media Id
     * @returns {TrackInfo} Track info
     */
    getTrackByMediaId(mid: string): TrackInfo;
    /**
     *
     * @param {String} mid Media Id
     * @returns {StreamInfo | null} Streaminfo
     */
    getStreamByMediaId(mid: string): StreamInfo | null;
    /**
     * Set if mixed extmaps are allowed
     * @returns {boolean}
     */
    getExtmapAllowMixed(): boolean;
    /**
     * Check if mixed extmaps are allowed
     * @param {boolean} extmapAllowMixed
     */
    setExtmapAllowMixed(extmapAllowMixed: boolean): void;
    /**
     * Create answer to this SDP
     * @param {SDPInfoParams} params		- Parameters to create answer
     * @returns {SDPInfo} answer
     */
    answer(params: SDPInfoParams): SDPInfo;
    /**
     * Convert to an SDP string
     * @returns {String}
     */
    toString(): string;
    /**
     * Convert to an SDP string for trickle-ice-sdpfrag
     * @returns {String}
     */
    toIceFragmentString(): string;
}
declare namespace SDPInfo {
    export { create, expand, clone, process, parse, MediaType, SDPInfoParams, SDPInfoPlain, SDPInfoLike };
}
import StreamInfo = require("./StreamInfo");
import MediaInfo = require("./MediaInfo");
import CandidateInfo = require("./CandidateInfo");
import ICEInfo = require("./ICEInfo");
import DTLSInfo = require("./DTLSInfo");
import CryptoInfo = require("./CryptoInfo");
type SDPInfoPlain = import(".").SDPInfoPlain;
type MediaType = import(".").MediaType;
import TrackInfo = require("./TrackInfo");
type SDPInfoParams = import(".").SDPInfoParams;
/**
* Create sdp based on the following info
* @param {SDPInfoParams} params		- Parameters to create answer
* @returns {SDPInfo} answer
*/
declare function create(params: SDPInfoParams): SDPInfo;
/**
 * Expands a plain JSON object containing an SDP INFO
 * @param {SDPInfoLike} plain JSON object
 * @returns {SDPInfo} Parsed SDP info
 */
declare function expand(plain: SDPInfoLike): SDPInfo;
/**
 * Expands a plain JSON object containing an SDPInfo or a SDPInfo and clone it
 * @param {SDPInfoLike} plain JSON object or SDPInfo
 * @returns {SDPInfo} Cloned SDPInfo
 */
declare function clone(plain: SDPInfoLike): SDPInfo;
/**
 * Process an SDP string and convert it to a semantic SDP info
 * @deprecated Use SDPInfo.parse instead
 * @param {String} string SDP
 * @returns {SDPInfo} Parsed SDP info
 */
declare function process(string: string): SDPInfo;
/**
 * Parses an SDP string and convert it to a semantic SDP info
 * @param {String} string SDP
 * @returns {SDPInfo} Parsed SDP info
 */
declare function parse(string: string): SDPInfo;
type SDPInfoLike = import(".").SDPInfoLike;
//# sourceMappingURL=SDPInfo.d.ts.map