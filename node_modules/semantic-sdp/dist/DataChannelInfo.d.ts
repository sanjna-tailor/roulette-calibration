export = DataChannelInfo;
/** @typedef {import(".").DataChannelInfoPlain} DataChannelInfoPlain */
/** @typedef {import(".").DataChannelInfoLike} DataChannelInfoLike */
/**
 * DataChannel info
 * @namespace
 */
declare class DataChannelInfo {
    /**
     * @constructor
     * @alias DataChannelInfo
     * @param {Number} port
     * @param {Number} [maxMessageSize]
     */
    constructor(port: number, maxMessageSize?: number);
    port: number;
    maxMessageSize: number;
    /**
     * Create a clone of this D info object
     * @returns {DataChannelInfo}
     */
    clone(): DataChannelInfo;
    /**
     * Return a plain javascript object which can be converted to JSON
     * @returns {DataChannelInfoPlain} Plain javascript object
     */
    plain(): DataChannelInfoPlain;
    /**
     * Returns the sctp port number
     * @returns {Number}
     */
    getPort(): number;
    /**
     * Get max message size
     * @returns {Number | undefined}
     */
    getMaxMessageSize(): number | undefined;
}
declare namespace DataChannelInfo {
    export { expand, clone, DataChannelInfoPlain, DataChannelInfoLike };
}
type DataChannelInfoPlain = import(".").DataChannelInfoPlain;
/**
 * Expands a plain JSON object containing an DataChannelInfo
 * @param {DataChannelInfoLike} plain JSON object
 * @returns {DataChannelInfo} Parsed SDES info
 */
declare function expand(plain: DataChannelInfoLike): DataChannelInfo;
/**
 * Expands a plain JSON object containing an DataChannelInfo or a DataChannelInfo and clone it
 * @param {DataChannelInfoLike} plain JSON object or DataChannelInfo
 * @returns {DataChannelInfo} Cloned DataChannelInfo
 */
declare function clone(plain: DataChannelInfoLike): DataChannelInfo;
type DataChannelInfoLike = import(".").DataChannelInfoLike;
//# sourceMappingURL=DataChannelInfo.d.ts.map