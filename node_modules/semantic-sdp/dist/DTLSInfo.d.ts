export = DTLSInfo;
/** @typedef {import(".").DTLSInfoPlain} DTLSInfoPlain */
/** @typedef {import(".").DTLSInfoLike} DTLSInfoLike */
/**
 * DTLS peer info
 * @namespace
 */
declare class DTLSInfo {
    /**
     * @constructor
     * @alias DTLSInfo
     * @param {Setup} setup		- Setup type
     * @param {String} hash		- Hash function
     * @param {String} fingerprint	- Peer fingerprint
     */
    constructor(setup: Setup, hash: string, fingerprint: string);
    setup: number;
    hash: string;
    fingerprint: string;
    /**
     * Create a clone of this DTLS info object
     * @returns {DTLSInfo}
     */
    clone(): DTLSInfo;
    /**
     * Return a plain javascript object which can be converted to JSON
     * @returns {DTLSInfoPlain} Plain javascript object
     */
    plain(): DTLSInfoPlain;
    /**
     * Get peer fingerprint
     * @returns {String}
     */
    getFingerprint(): string;
    /**
     * Get hash function name
     * @returns {String}
     */
    getHash(): string;
    /**
     * Get connection setup
     * @returns {Setup}
     */
    getSetup(): Setup;
    /**
     * Set connection setup
     * @param {Setup} setup
     */
    setSetup(setup: Setup): void;
}
declare namespace DTLSInfo {
    export { expand, clone, DTLSInfoPlain, DTLSInfoLike };
}
type DTLSInfoPlain = import(".").DTLSInfoPlain;
import Setup = require("./Setup");
/**
 * Expands a plain JSON object containing an DTLSInfo
 * @param {DTLSInfoLike} plain JSON object
 * @returns {DTLSInfo} Parsed DTLS info
 */
declare function expand(plain: DTLSInfoLike): DTLSInfo;
/**
 * Expands a plain JSON object containing an DTLSInfo or a DTLSInfo and clone it
 * @param {DTLSInfoLike} plain JSON object or DTLSInfo
 * @returns {DTLSInfo} Cloned DTLSInfo
 */
declare function clone(plain: DTLSInfoLike): DTLSInfo;
type DTLSInfoLike = import(".").DTLSInfoLike;
//# sourceMappingURL=DTLSInfo.d.ts.map