export = SourceGroupInfo;
/** @typedef {import(".").SourceGroupInfoPlain} SourceGroupInfoPlain */
/** @typedef {import(".").SourceGroupInfoLike} SourceGroupInfoLike */
/**
 * Group of SSRCS info
 * @namespace
 */
declare class SourceGroupInfo {
    /**
     * @constructor
     * @alias SourceGroupInfo
     * @alias SourceGroupInfo
     * @param {String} semantics	- Group semantics
     * @param {Array<Number>} ssrcs	- SSRC list
     */
    constructor(semantics: string, ssrcs: Array<number>);
    semantics: string;
    ssrcs: number[];
    /**
     * Create a clone of this source group info object
     * @returns {SourceGroupInfo}
     */
    clone(): SourceGroupInfo;
    /**
     * Return a plain javascript object which can be converted to JSON
     * @returns {SourceGroupInfoPlain} Plain javascript object
     */
    plain(): SourceGroupInfoPlain;
    /**
     * Get group semantics
     * @returns {String}
     */
    getSemantics(): string;
    /**
     * Get list of ssrcs from this group
     * @returns {Array<Number>}
     */
    getSSRCs(): Array<number>;
}
declare namespace SourceGroupInfo {
    export { expand, clone, SourceGroupInfoPlain, SourceGroupInfoLike };
}
type SourceGroupInfoPlain = import(".").SourceGroupInfoPlain;
/**
 * Expands a plain JSON object containing an SourceGroupInfo
 * @param {SourceGroupInfoLike} plain JSON object
 * @returns {SourceGroupInfo} Parsed SourceGroup info
 */
declare function expand(plain: SourceGroupInfoLike): SourceGroupInfo;
/**
 * Expands a plain JSON object containing an SourceGroupInfo or a SourceGroupInfo and clone it
 * @param {SourceGroupInfoLike} plain JSON object or SourceGroupInfo
 * @returns {SourceGroupInfo} Cloned SourceGroupInfo
 */
declare function clone(plain: SourceGroupInfoLike): SourceGroupInfo;
type SourceGroupInfoLike = import(".").SourceGroupInfoLike;
//# sourceMappingURL=SourceGroupInfo.d.ts.map