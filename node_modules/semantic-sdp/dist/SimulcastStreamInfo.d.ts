export = SimulcastStreamInfo;
/** @typedef {import(".").SimulcastStreamInfoPlain} SimulcastStreamInfoPlain */
/** @typedef {import(".").SimulcastStreamInfoLike} SimulcastStreamInfoLike */
/**
 * Simulcast streams info
 * @namespace
 */
declare class SimulcastStreamInfo {
    /**
     * @constructor
     * @alias SimulcastStreamInfo
     * @param {String} id		- rid for this simulcast stream
     * @param {Boolean} paused	- If this stream is initially paused
     */
    constructor(id: string, paused: boolean);
    paused: boolean;
    id: string;
    /**
     * Create a clone of this simulcast stream info object
     * @returns {SimulcastStreamInfo}
     */
    clone(): SimulcastStreamInfo;
    /**
     * Return a plain javascript object which can be converted to JSON
     * @returns {SimulcastStreamInfoPlain} Plain javascript object
     */
    plain(): SimulcastStreamInfoPlain;
    /**
     * Is the stream paused
     * @returns {Boolean}
     */
    isPaused(): boolean;
    /**
     * Get rid in this stream
     * @returns {String}
     */
    getId(): string;
}
declare namespace SimulcastStreamInfo {
    export { expand, clone, SimulcastStreamInfoPlain, SimulcastStreamInfoLike };
}
type SimulcastStreamInfoPlain = import(".").SimulcastStreamInfoPlain;
/**
 * Expands a plain JSON object containing an SimulcastStreamInfo
 * @param {SimulcastStreamInfoLike} plain JSON object
 * @returns {SimulcastStreamInfo} Parsed SimulcastStream info
 */
declare function expand(plain: SimulcastStreamInfoLike): SimulcastStreamInfo;
/**
 * Expands a plain JSON object containing an SimulcastStreamInfo or a SimulcastStreamInfo and clone it
 * @param {SimulcastStreamInfoLike} plain JSON object or SimulcastStreamInfo
 * @returns {SimulcastStreamInfo} Cloned SimulcastStreamInfo
 */
declare function clone(plain: SimulcastStreamInfoLike): SimulcastStreamInfo;
type SimulcastStreamInfoLike = import(".").SimulcastStreamInfoLike;
//# sourceMappingURL=SimulcastStreamInfo.d.ts.map