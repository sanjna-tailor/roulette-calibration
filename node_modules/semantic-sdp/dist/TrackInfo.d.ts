export = TrackInfo;
/** @typedef {import(".").TrackType} TrackType */
/** @typedef {import(".").TrackInfoPlain} TrackInfoPlain */
/** @typedef {import(".").TrackInfoLike} TrackInfoLike */
/** @typedef {import(".").TrackEncodingInfoPlain} TrackEncodingInfoPlain */
/**
 * Media Track information
 * @namespace
 */
declare class TrackInfo {
    /**
     * @constructor
     * @alias TrackInfo
     * @param {TrackType} media	- Media type "audio"|"video"
     * @param {String} id		- Track id
     */
    constructor(media: TrackType, id: string);
    media: import(".").TrackType;
    id: string;
    ssrcs: number[];
    groups: SourceGroupInfo[];
    encodings: TrackEncodingInfo[][];
    /**
     * Create a clone of this track info object
     * @returns {TrackInfo}
     */
    clone(): TrackInfo;
    /**
     * Return a plain javascript object which can be converted to JSON
     * @returns {TrackInfoPlain} Plain javascript object
     */
    plain(): TrackInfoPlain;
    /**
     * Get media type
     * @returns {TrackType} - "audio"|"video"
     */
    getMedia(): TrackType;
    /**
     * Set the media line id this track belongs to. Set to null for first media line of the media type
     * @param {String} mediaId		- MediaInfo id
     */
    setMediaId(mediaId: string): void;
    mediaId: string;
    /**
     * Returns the MediaInfo id this track belongs two (unified) or undefined if indiferent (plan B)
     * @returns {String}
     */
    getMediaId(): string;
    /**
     * Get track id
     * @returns {String}
     */
    getId(): string;
    /**
     * Add ssrc for this track
     * @param {Number} ssrc
     */
    addSSRC(ssrc: number): void;
    /**
     * Get all
     * @returns {Array<Number>}
     */
    getSSRCs(): Array<number>;
    /**
     * Add source group to track
     * @param {SourceGroupInfo} group
     */
    addSourceGroup(group: SourceGroupInfo): void;
    /**
     * Get the source group fot the desired type
     * @param {String} schematics - Group type
     * @returns {SourceGroupInfo}
     */
    getSourceGroup(schematics: string): SourceGroupInfo;
    /**
     * Get all source groups for this track
     * @returns {Array<SourceGroupInfo>}
     */
    getSourceGroups(): Array<SourceGroupInfo>;
    /**
     * Check if track has a group for this type
     * @param {String} schematics
     * @returns {Boolean}
     */
    hasSourceGroup(schematics: string): boolean;
    /**
     * Get simulcast encoding information for this track (if any)
     * @returns {Array<Array<TrackEncodingInfo>>}
     */
    getEncodings(): Array<Array<TrackEncodingInfo>>;
    /**
     * Add simulcast encoding information for this track
     * @param {TrackEncodingInfo} encoding - Simulcast encoding info
     */
    addEncoding(encoding: TrackEncodingInfo): void;
    /**
     * Add simulcast encoding information for this track
     * @param {Array<TrackEncodingInfo>} alternatives - Simulcast encoding info
     */
    addAlternativeEncodings(alternatives: Array<TrackEncodingInfo>): void;
    /**
     * Add simulcast encoding information for this track
     * @param {Array<Array<TrackEncodingInfo>>} encodings - Simulcast encoding info
     */
    setEncodings(encodings: Array<Array<TrackEncodingInfo>>): void;
}
declare namespace TrackInfo {
    export { expand, clone, TrackType, TrackInfoPlain, TrackInfoLike, TrackEncodingInfoPlain };
}
import SourceGroupInfo = require("./SourceGroupInfo");
import TrackEncodingInfo = require("./TrackEncodingInfo");
type TrackInfoPlain = import(".").TrackInfoPlain;
type TrackType = import(".").TrackType;
/**
 * Expands a plain JSON object containing an TrackInfo
 * @param {TrackInfoLike} plain JSON object
 * @returns {TrackInfo} Parsed Track info
 */
declare function expand(plain: TrackInfoLike): TrackInfo;
/**
 * Expands a plain JSON object containing an TrackInfo or a TrackInfo and clone it
 * @param {TrackInfoLike} plain JSON object or TrackInfo
 * @returns {TrackInfo} Cloned TrackInfo
 */
declare function clone(plain: TrackInfoLike): TrackInfo;
type TrackInfoLike = import(".").TrackInfoLike;
type TrackEncodingInfoPlain = import(".").TrackEncodingInfoPlain;
//# sourceMappingURL=TrackInfo.d.ts.map