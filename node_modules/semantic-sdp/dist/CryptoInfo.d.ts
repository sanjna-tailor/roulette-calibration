export = CryptoInfo;
/** @typedef {import(".").CryptoInfoPlain} CryptoInfoPlain */
/** @typedef {import(".").CryptoInfoLike} CryptoInfoLike */
/**
 * SDES peer info
 * @namespace
 */
declare class CryptoInfo {
    /**
     * @constructor
     * @alias CryptoInfo
     * @param {Number} tag
     * @param {String} suite
     * @param {String} keyParams
     * @param {String} sessionParams
     */
    constructor(tag: number, suite: string, keyParams: string, sessionParams: string);
    tag: number;
    suite: string;
    keyParams: string;
    sessionParams: string;
    /**
     * Create a clone of this SDES info object
     * @returns {CryptoInfo}
     */
    clone(): CryptoInfo;
    /**
     * Return a plain javascript object which can be converted to JSON
     * @returns {CryptoInfoPlain} Plain javascript object
     */
    plain(): CryptoInfoPlain;
    /**
     * Return the SDES session params
     * @returns {String}
     */
    getSessionParams(): string;
    /**
     * Return the SDES key params
     * @returns {String}
     */
    getKeyParams(): string;
    /**
     * Returns the chypher suite
     * @returns {String}
     */
    getSuite(): string;
    /**
     * Get SDES tag
     * @returns {Number}
     */
    getTag(): number;
}
declare namespace CryptoInfo {
    export { expand, clone, CryptoInfoPlain, CryptoInfoLike };
}
type CryptoInfoPlain = import(".").CryptoInfoPlain;
/**
 * Expands a plain JSON object containing an CryptoInfo
 * @param {CryptoInfoLike} plain JSON object
 * @returns {CryptoInfo} Parsed SDES info
 */
declare function expand(plain: CryptoInfoLike): CryptoInfo;
/**
 * Expands a plain JSON object containing an CryptoInfo or a CryptoInfo and clone it
 * @param {CryptoInfoLike} plain JSON object or CryptoInfo
 * @returns {CryptoInfo} Cloned CryptoInfo
 */
declare function clone(plain: CryptoInfoLike): CryptoInfo;
type CryptoInfoLike = import(".").CryptoInfoLike;
//# sourceMappingURL=CryptoInfo.d.ts.map