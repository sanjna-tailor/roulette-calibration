export = StreamInfo;
/** @typedef {import(".").TrackType} TrackType */
/** @typedef {import(".").StreamInfoPlain} StreamInfoPlain */
/** @typedef {import(".").StreamInfoLike} StreamInfoLike */
/**
 * Media Stream information
 * @namespace
 */
declare class StreamInfo {
    /**
     * @constructor
     * @alias StreamInfo
     * @param {String} id
     */
    constructor(id: string);
    id: string;
    tracks: Map<string, TrackInfo>;
    /**
     * Create a clone of this stream info object
     * @returns {StreamInfo}
     */
    clone(): StreamInfo;
    /**
     * Return a plain javascript object which can be converted to JSON
     * @returns {StreamInfoPlain} Plain javascript object
     */
    plain(): StreamInfoPlain;
    /**
     * Get the media stream id
     * @returns {String}
     */
    getId(): string;
    /**
     * Add media track
     * @param {TrackInfo} track
     */
    addTrack(track: TrackInfo): void;
    /**
     * Remove a media track from stream
     * @param {TrackInfo} track - Info object from the track
     * @returns {Boolean} if the track was present on track map or not
     */
    removeTrack(track: TrackInfo): boolean;
    /**
     * Remove a media track from stream
     * @param {String} trackId - Id of the track to remote
     * @returns {Boolean} if the track was present on track map or not
     */
    removeTrackById(trackId: string): boolean;
    /**
     * Get first track for the media type
     * @param {TrackType} media - Media type "audio"|"video"
     * @returns {TrackInfo}
     */
    getFirstTrack(media: TrackType): TrackInfo;
    /**
     * Get all tracks from the media stream
     * @returns {Map<String, TrackInfo>}
     */
    getTracks(): Map<string, TrackInfo>;
    /**
     * Remove all tracks from media sream
     */
    removeAllTracks(): void;
    /**
     * Get track by id
     * @param {String} trackId
     * @returns {TrackInfo}
     */
    getTrack(trackId: string): TrackInfo;
}
declare namespace StreamInfo {
    export { expand, clone, TrackType, StreamInfoPlain, StreamInfoLike };
}
import TrackInfo = require("./TrackInfo");
type StreamInfoPlain = import(".").StreamInfoPlain;
type TrackType = import(".").TrackType;
/**
 * Expands a plain JSON object containing an StreamInfo
 * @param {StreamInfoLike} plain JSON object
 * @returns {StreamInfo} Parsed Stream info
 */
declare function expand(plain: StreamInfoLike): StreamInfo;
/**
 * Expands a plain JSON object containing an StreamInfo or a StreamInfo and clone it
 * @param {StreamInfoLike} plain JSON object or StreamInfo
 * @returns {StreamInfo} Cloned StreamInfo
 */
declare function clone(plain: StreamInfoLike): StreamInfo;
type StreamInfoLike = import(".").StreamInfoLike;
//# sourceMappingURL=StreamInfo.d.ts.map