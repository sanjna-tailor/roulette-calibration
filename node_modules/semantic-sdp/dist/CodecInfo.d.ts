export = CodecInfo;
/** @typedef {import(".").CodecInfoPlain} CodecInfoPlain */
/** @typedef {import(".").CodecInfoLike} CodecInfoLike */
/** @typedef {import(".").RTCPFeedbackInfoPlain} RTCPFeedbackInfoPlain */
/**
 * Codec information extracted for RTP payloads
 * @namespace
 */
declare class CodecInfo {
    /**
     * @constructor
     * @alias CodecInfo
     * @param {String} codec	- Codec name
     * @param {Number} type		- the payload type number
     * @param {{[k: string]: string}} [params]	- Format params for codec
     */
    constructor(codec: string, type: number, params?: {
        [k: string]: string;
    });
    codec: string;
    type: number;
    params: {
        [k: string]: string;
    };
    rtcpfbs: Set<RTCPFeedbackInfo>;
    /**
     * Create a clone of this Codec info object
     * @returns {CodecInfo}
     */
    clone(): CodecInfo;
    /**
     * Return a plain javascript object which can be converted to JSON
     * @returns {CodecInfoPlain} Plain javascript object
     */
    plain(): CodecInfoPlain;
    /**
     * Set the RTX payload type number for this codec
     * @param {Number} rtx
     */
    setRTX(rtx: number): void;
    rtx: number;
    /**
     * Get payload type for codec
     * @returns {Number}
     */
    getType(): number;
    /**
     * Set the payload type for codec
     * @param {Number} type
     */
    setType(type: number): void;
    /**
     * Get codec name
     * @returns {String}
     */
    getCodec(): string;
    /**
     * Get codec format parameters
     */
    getParams(): {
        [k: string]: string;
    };
    /**
     * Add codec info params
     * @param {{[k: string]: string}} params
     */
    addParams(params: {
        [k: string]: string;
    }): void;
    /**
     * Add codec info param
     * @param {String} key
     * @param {String} value
     */
    addParam(key: string, value: string): void;
    /**
     * Check if codec has requested param
     * @param {String} key
     * @returns {Boolean}
     */
    hasParam(key: string): boolean;
    /**
     * Get param
     * @param {String} key
     * @param {String} defaultValue default value if param is not found
     * @returns {String}
     */
    getParam(key: string, defaultValue?: string): string;
    /**
     * Check if this codec has an associated RTX payload type
     * @returns {Number}
     */
    hasRTX(): number;
    /**
     * Get the associated RTX payload type for this codec
     * @returns {Number}
     */
    getRTX(): number;
    /**
     * Check if this codec has number of channels
     * @returns {Number}
     */
    hasChannels(): number;
    /**
     * Get the number of channels
     * @returns {Number}
     */
    getChannels(): number;
    /**
     * Set the number of channels
     * @param {Number} channels
     */
    setChannels(channels: number): void;
    channels: number;
    /**
     * Add an RTCP feedback parameter to this codec type
     * @param {RTCPFeedbackInfo} rtcpfb - RTCP feedback info object
     */
    addRTCPFeedback(rtcpfb: RTCPFeedbackInfo): void;
    /**
     * Get all extensions rtcp feedback parameters in this codec info
     * @returns {Set<RTCPFeedbackInfo>}
     */
    getRTCPFeedbacks(): Set<RTCPFeedbackInfo>;
}
declare namespace CodecInfo {
    export { expand, clone, MapFromNames, CodecInfoPlain, CodecInfoLike, RTCPFeedbackInfoPlain };
}
import RTCPFeedbackInfo = require("./RTCPFeedbackInfo");
type CodecInfoPlain = import(".").CodecInfoPlain;
/**
 * Expands a plain JSON object containing an CodecInfo
 * @param {CodecInfoLike} plain JSON object
 * @returns {CodecInfo} Parsed Codec info
 */
declare function expand(plain: CodecInfoLike): CodecInfo;
/**
 * Expands a plain JSON object containing an CodecInfo or a CodecInfo and clone it
 * @param {CodecInfoLike} plain JSON object or CodecInfo
 * @returns {CodecInfo} Cloned CodecInfo
 */
declare function clone(plain: CodecInfoLike): CodecInfo;
/**
 * Create a map of CodecInfo from codec names.
 * Payload type is assigned dinamically
 * @param {Array<String>} names
 * @param {Boolean} [rtx] - Should we add rtx?
 * @param {Array<RTCPFeedbackInfoPlain>} [rtcpfbs] - RTCP feedback params
 * @returns {Map<number, CodecInfo>}
 */
declare function MapFromNames(names: Array<string>, rtx?: boolean, rtcpfbs?: Array<RTCPFeedbackInfoPlain>): Map<number, CodecInfo>;
type CodecInfoLike = import(".").CodecInfoLike;
type RTCPFeedbackInfoPlain = import(".").RTCPFeedbackInfoPlain;
//# sourceMappingURL=CodecInfo.d.ts.map