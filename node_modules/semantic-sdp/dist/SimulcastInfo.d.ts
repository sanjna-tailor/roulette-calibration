export = SimulcastInfo;
/** @typedef {import(".").SimulcastInfoPlain} SimulcastInfoPlain */
/** @typedef {import(".").SimulcastInfoLike} SimulcastInfoLike */
/** @typedef {import(".").SimulcastStreamInfoPlain} SimulcastStreamInfoPlain */
/**
 * Simulcast information
 * @namespace
 */
declare class SimulcastInfo {
    send: SimulcastStreamInfo[][];
    recv: SimulcastStreamInfo[][];
    /**
     * Create a clone of this track info object
     * @returns {SimulcastInfo}
     */
    clone(): SimulcastInfo;
    /**
     * Return a plain javascript object which can be converted to JSON
     * @returns {SimulcastInfoPlain} Plain javascript object
     */
    plain(): SimulcastInfoPlain;
    /**
     * Add a simulcast alternative streams for the specific direction
     * @param {DirectionWay} direction - Which direction you want the streams for
     * @param {Array<SimulcastStreamInfo>} streams - Stream info of all the alternatives
     */
    addSimulcastAlternativeStreams(direction: DirectionWay, streams: Array<SimulcastStreamInfo>): number;
    /**
     * Add a single simulcast stream for the specific direction
     * @param {DirectionWay} direction - Which direction you want the streams for
     * @param {SimulcastStreamInfo} stream - Stream info of the single alternative
     */
    addSimulcastStream(direction: DirectionWay, stream: SimulcastStreamInfo): number;
    /**
     * Get all simulcast streams by direction
     * @param {DirectionWay} direction - Which direction you want the streams for
     * @returns {Array<Array<SimulcastStreamInfo>>}
     */
    getSimulcastStreams(direction: DirectionWay): Array<Array<SimulcastStreamInfo>>;
}
declare namespace SimulcastInfo {
    export { expand, clone, SimulcastInfoPlain, SimulcastInfoLike, SimulcastStreamInfoPlain };
}
import SimulcastStreamInfo = require("./SimulcastStreamInfo");
type SimulcastInfoPlain = import(".").SimulcastInfoPlain;
import DirectionWay = require("./DirectionWay");
/**
 * Expands a plain JSON object containing an SimulcastInfo
 * @param {SimulcastInfoLike} plain JSON object
 * @returns {SimulcastInfo} Parsed Simulcast info
 */
declare function expand(plain: SimulcastInfoLike): SimulcastInfo;
/**
 * Expands a plain JSON object containing an SimulcastInfo or a SimulcastInfo and clone it
 * @param {SimulcastInfoLike} plain JSON object or SimulcastInfo
 * @returns {SimulcastInfo} Cloned SimulcastInfo
 */
declare function clone(plain: SimulcastInfoLike): SimulcastInfo;
type SimulcastInfoLike = import(".").SimulcastInfoLike;
type SimulcastStreamInfoPlain = import(".").SimulcastStreamInfoPlain;
//# sourceMappingURL=SimulcastInfo.d.ts.map