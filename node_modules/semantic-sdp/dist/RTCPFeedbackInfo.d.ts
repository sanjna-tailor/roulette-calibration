export = RTCPFeedbackInfo;
/** @typedef {import(".").RTCPFeedbackInfoPlain} RTCPFeedbackInfoPlain */
/** @typedef {import(".").RTCPFeedbackInfoLike} RTCPFeedbackInfoLike */
/**
 * RTCP Feedback parameter
 * @namespace
 */
declare class RTCPFeedbackInfo {
    /**
     * @constructor
     * @alias RTCPFeedbackInfo
     * @param {String} id		- RTCP feedback id
     * @param {Array<String>} params - RTCP feedback params
     */
    constructor(id: string, params: Array<string>);
    id: string;
    params: string[];
    /**
     * Create a clone of this RTCPFeedbackParameter info object
     * @returns {RTCPFeedbackInfo}
     */
    clone(): RTCPFeedbackInfo;
    /**
     * Return a plain javascript object which can be converted to JSON
     * @returns {RTCPFeedbackInfoPlain} Plain javascript object
     */
    plain(): RTCPFeedbackInfoPlain;
    /**
     * Get id fo the rtcp feedback parameter
     * @returns {String}
     */
    getId(): string;
    /**
     * Get codec  rtcp feedback parameters
     * @returns {Array<String>} parameters
     */
    getParams(): Array<string>;
}
declare namespace RTCPFeedbackInfo {
    export { expand, clone, RTCPFeedbackInfoPlain, RTCPFeedbackInfoLike };
}
type RTCPFeedbackInfoPlain = import(".").RTCPFeedbackInfoPlain;
/**
 * Expands a plain JSON object containing an CodecInfo
 * @param {RTCPFeedbackInfoLike} plain JSON object
 * @returns {RTCPFeedbackInfo} Parsed Codec info
 */
declare function expand(plain: RTCPFeedbackInfoLike): RTCPFeedbackInfo;
/**
 * Expands a plain JSON object containing an RTCPFeedbackInfo or a RTCPFeedbackInfo and clone it
 * @param {RTCPFeedbackInfoLike} plain JSON object or RTCPFeedbackInfo
 * @returns {RTCPFeedbackInfo} Cloned RTCPFeedbackInfo
 */
declare function clone(plain: RTCPFeedbackInfoLike): RTCPFeedbackInfo;
type RTCPFeedbackInfoLike = import(".").RTCPFeedbackInfoLike;
//# sourceMappingURL=RTCPFeedbackInfo.d.ts.map