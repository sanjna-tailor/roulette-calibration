(function(Fe,Ge){typeof exports=="object"&&typeof module<"u"?Ge(exports):typeof define=="function"&&define.amd?define(["exports"],Ge):(Fe=typeof globalThis<"u"?globalThis:Fe||self,Ge(Fe["millicast-debug"]={}))})(this,function(Fe){"use strict";var Br;var Ge=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function _e(l){return l&&l.__esModule&&Object.prototype.hasOwnProperty.call(l,"default")?l.default:l}var Qn={exports:{}};/*!
 * js-logger - http://github.com/jonnyreeves/js-logger
 * Jonny Reeves, http://jonnyreeves.co.uk/
 * js-logger may be freely distributed under the MIT license.
 */(function(l){(function(e){var V={};V.VERSION="1.6.1";var b,S={},W=function(h,r){return function(){return r.apply(h,arguments)}},m=function(){var h=arguments,r=h[0],i,a;for(a=1;a<h.length;a++)for(i in h[a])!(i in r)&&h[a].hasOwnProperty(i)&&(r[i]=h[a][i]);return r},t=function(h,r){return{value:h,name:r}};V.TRACE=t(1,"TRACE"),V.DEBUG=t(2,"DEBUG"),V.INFO=t(3,"INFO"),V.TIME=t(4,"TIME"),V.WARN=t(5,"WARN"),V.ERROR=t(8,"ERROR"),V.OFF=t(99,"OFF");var U=function(h){this.context=h,this.setLevel(h.filterLevel),this.log=this.info};U.prototype={setLevel:function(h){h&&"value"in h&&(this.context.filterLevel=h)},getLevel:function(){return this.context.filterLevel},enabledFor:function(h){var r=this.context.filterLevel;return h.value>=r.value},trace:function(){this.invoke(V.TRACE,arguments)},debug:function(){this.invoke(V.DEBUG,arguments)},info:function(){this.invoke(V.INFO,arguments)},warn:function(){this.invoke(V.WARN,arguments)},error:function(){this.invoke(V.ERROR,arguments)},time:function(h){typeof h=="string"&&h.length>0&&this.invoke(V.TIME,[h,"start"])},timeEnd:function(h){typeof h=="string"&&h.length>0&&this.invoke(V.TIME,[h,"end"])},invoke:function(h,r){b&&this.enabledFor(h)&&b(r,m({level:h},this.context))}};var f=new U({filterLevel:V.OFF});(function(){var h=V;h.enabledFor=W(f,f.enabledFor),h.trace=W(f,f.trace),h.debug=W(f,f.debug),h.time=W(f,f.time),h.timeEnd=W(f,f.timeEnd),h.info=W(f,f.info),h.warn=W(f,f.warn),h.error=W(f,f.error),h.log=h.info})(),V.setHandler=function(h){b=h},V.setLevel=function(h){f.setLevel(h);for(var r in S)S.hasOwnProperty(r)&&S[r].setLevel(h)},V.getLevel=function(){return f.getLevel()},V.get=function(h){return S[h]||(S[h]=new U(m({name:h},f.context)))},V.createDefaultHandler=function(h){h=h||{},h.formatter=h.formatter||function(s,n){n.name&&s.unshift("["+n.name+"]")};var r={},i=function(a,s){Function.prototype.apply.call(a,console,s)};return typeof console>"u"?function(){}:function(a,s){a=Array.prototype.slice.call(a);var n=console.log,c;s.level===V.TIME?(c=(s.name?"["+s.name+"] ":"")+a[0],a[1]==="start"?console.time?console.time(c):r[c]=new Date().getTime():console.timeEnd?console.timeEnd(c):i(n,[c+": "+(new Date().getTime()-r[c])+"ms"])):(s.level===V.WARN&&console.warn?n=console.warn:s.level===V.ERROR&&console.error?n=console.error:s.level===V.INFO&&console.info?n=console.info:s.level===V.DEBUG&&console.debug?n=console.debug:s.level===V.TRACE&&console.trace&&(n=console.trace),h.formatter(a,s),i(n,a))}},V.useDefaults=function(h){V.setLevel(h&&h.defaultLevel||V.DEBUG),V.setHandler(V.createDefaultHandler(h))},V.setDefaults=V.useDefaults,l.exports?l.exports=V:(V._prevLogger=e.Logger,V.noConflict=function(){return e.Logger=V._prevLogger,V},e.Logger=V)})(Ge)})(Qn);var is=Qn.exports;const Ce=_e(is),Yn="0.2.1",kt=60,as=((Br=window==null?void 0:window.navigator)==null?void 0:Br.userAgent)||"No user agent available";let Nt="",Jt="",Tt="",st="",it="",Cn="",wt="",Mt=0;const xt=[];function os(l){function e(V,b){return{ts:Math.round(b.timestamp)||"",ot:V==="audio"?"a":"v",bl:b.jitterBufferDelay||0,br:Math.round(b.bitrateBitsPerSecond||0),pld:b.packetsLostDeltaPerSecond||0,j:b.jitter||0,mtp:b.packetRate||0,mid:b.mid||"",mimeType:b.mimeType||""}}return l.stats=l.stats.reduce((V,b)=>{const S=b.audio.inbounds.length!==0?b.audio.inbounds.map(m=>e("audio",m)):b.audio.outbounds.map(m=>e("audio",m)),W=b.video.inbounds.length!==0?b.video.inbounds.map(m=>e("video",m)):b.video.outbounds.map(m=>e("video",m));return V.concat([...S,...W])},[]),l}const fe={initAccountId:l=>{Nt=Nt===""?l:Nt},initStreamName:l=>{Jt=Jt===""?l:Jt},initSubscriberId:l=>{Tt=Tt===""?l:Tt},initStreamViewId:l=>{st=st===""?l:st},initFeedId:l=>{it=it===""?l:it},setConnectionTime:l=>{Mt=Mt===0?l:Mt},setConnectionState:l=>{Cn=l},setClusterId:l=>{wt=wt===""?l:wt},addStats:l=>{xt.length===kt&&xt.shift(),xt.push(l)},get:(l=kt,e="JSON")=>{let V;!Number.isInteger(l)||l>kt||l<=0?V=kt:V=l;const b={client:"@millicast/millicast-sdk",version:Yn,timestamp:new Date().toISOString(),userAgent:as,clusterId:wt,accountId:Nt,streamName:Jt,subscriberId:Tt,connection:Cn,stats:xt.slice(-V),connectionDurationMs:new Date().getTime()-Mt};return it!==""?b.feedId=it:st!==""&&(b.streamViewId=st),e==="CMCD"?os(b):b}};Ce.useDefaults({defaultLevel:Ce.TRACE});const vt=["TRACE","DEBUG","INFO","WARN","ERROR"],jn=(l,e)=>{l.unshift(`[${e.name||"Global"}] ${new Date().toISOString()} - ${e.level.name} -`)},In=(l,e)=>e?l.value>=je[e].value:l.value>=Gt.value,ls=(l,e)=>{l=Array.prototype.slice.call(l),l=l.map(V=>typeof V=="object"?JSON.stringify(V):V),jn(l,e),at!==0?(Le.push(l.join(" ")),Le.length>=at&&(Le=Le.slice(-at))):Le=[]},cs=Ce.createDefaultHandler({formatter:jn});Ce.setHandler((l,e)=>{ls(l,e),In(e.level,e.name)&&cs(l,e);for(const{handler:V,level:b}of Xn)e.level.value>=b.value&&V(l,e)});let at=1e4,Le=[],Gt=Ce.OFF;const je={},Xn=[],Te={...Ce,enabledFor:In,getHistory:()=>Le,getHistoryMaxSize:()=>at,setHistoryMaxSize:l=>{at=l},setLevel:l=>{Gt=l;for(const e in je)je[e]=l},getLevel:()=>Gt,get:l=>{je[l]||(je[l]=Gt);const e=Ce.get(l);return e.setLevel=V=>{je[l]=V},e.getLevel=()=>je[l],e},setHandler:(l,e)=>{Xn.push({handler:l,level:e})},diagnose:(l={})=>{let e;const V={statsCount:60,historySize:1e3,minLogLevel:"TRACE",statsFormat:"JSON"};typeof l=="number"?(V.statsCount=l,e=V):e={...V,...l};const{statsCount:b,historySize:S,minLogLevel:W,statsFormat:m}=e,t=fe.get(b,m),U=Te.getHistory();if(!Number.isInteger(S)||S<=0)throw new Error("Invalid Argument Exception : historySize must be a positive integer.");if(!vt.includes(W.toUpperCase()))throw new Error('Invalid Argument Exception : the minLogLevel parameter only excepts "trace", "debug", "info", "warn", and "error" as arguments.');if(vt.includes(W.toUpperCase())){const f=vt.slice(vt.indexOf(W.toUpperCase())),h=U.filter(r=>f.some(i=>r.includes(i)));t.history=h.slice(-S)}return t},JSON:"JSON",CMCD:"CMCD",VERSION:Yn};var Kt={exports:{}},Ae=typeof Reflect=="object"?Reflect:null,Bn=Ae&&typeof Ae.apply=="function"?Ae.apply:function(e,V,b){return Function.prototype.apply.call(e,V,b)},Qt;Ae&&typeof Ae.ownKeys=="function"?Qt=Ae.ownKeys:Object.getOwnPropertySymbols?Qt=function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Qt=function(e){return Object.getOwnPropertyNames(e)};function ds(l){console&&console.warn&&console.warn(l)}var zn=Number.isNaN||function(e){return e!==e};function re(){re.init.call(this)}Kt.exports=re,Kt.exports.once=ms,re.EventEmitter=re,re.prototype._events=void 0,re.prototype._eventsCount=0,re.prototype._maxListeners=void 0;var Dn=10;function Yt(l){if(typeof l!="function")throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof l)}Object.defineProperty(re,"defaultMaxListeners",{enumerable:!0,get:function(){return Dn},set:function(l){if(typeof l!="number"||l<0||zn(l))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+l+".");Dn=l}}),re.init=function(){(this._events===void 0||this._events===Object.getPrototypeOf(this)._events)&&(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},re.prototype.setMaxListeners=function(e){if(typeof e!="number"||e<0||zn(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this};function On(l){return l._maxListeners===void 0?re.defaultMaxListeners:l._maxListeners}re.prototype.getMaxListeners=function(){return On(this)},re.prototype.emit=function(e){for(var V=[],b=1;b<arguments.length;b++)V.push(arguments[b]);var S=e==="error",W=this._events;if(W!==void 0)S=S&&W.error===void 0;else if(!S)return!1;if(S){var m;if(V.length>0&&(m=V[0]),m instanceof Error)throw m;var t=new Error("Unhandled error."+(m?" ("+m.message+")":""));throw t.context=m,t}var U=W[e];if(U===void 0)return!1;if(typeof U=="function")Bn(U,this,V);else for(var f=U.length,h=Pn(U,f),b=0;b<f;++b)Bn(h[b],this,V);return!0};function Hn(l,e,V,b){var S,W,m;if(Yt(V),W=l._events,W===void 0?(W=l._events=Object.create(null),l._eventsCount=0):(W.newListener!==void 0&&(l.emit("newListener",e,V.listener?V.listener:V),W=l._events),m=W[e]),m===void 0)m=W[e]=V,++l._eventsCount;else if(typeof m=="function"?m=W[e]=b?[V,m]:[m,V]:b?m.unshift(V):m.push(V),S=On(l),S>0&&m.length>S&&!m.warned){m.warned=!0;var t=new Error("Possible EventEmitter memory leak detected. "+m.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");t.name="MaxListenersExceededWarning",t.emitter=l,t.type=e,t.count=m.length,ds(t)}return l}re.prototype.addListener=function(e,V){return Hn(this,e,V,!1)},re.prototype.on=re.prototype.addListener,re.prototype.prependListener=function(e,V){return Hn(this,e,V,!0)};function Vs(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,arguments.length===0?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function _n(l,e,V){var b={fired:!1,wrapFn:void 0,target:l,type:e,listener:V},S=Vs.bind(b);return S.listener=V,b.wrapFn=S,S}re.prototype.once=function(e,V){return Yt(V),this.on(e,_n(this,e,V)),this},re.prototype.prependOnceListener=function(e,V){return Yt(V),this.prependListener(e,_n(this,e,V)),this},re.prototype.removeListener=function(e,V){var b,S,W,m,t;if(Yt(V),S=this._events,S===void 0)return this;if(b=S[e],b===void 0)return this;if(b===V||b.listener===V)--this._eventsCount===0?this._events=Object.create(null):(delete S[e],S.removeListener&&this.emit("removeListener",e,b.listener||V));else if(typeof b!="function"){for(W=-1,m=b.length-1;m>=0;m--)if(b[m]===V||b[m].listener===V){t=b[m].listener,W=m;break}if(W<0)return this;W===0?b.shift():us(b,W),b.length===1&&(S[e]=b[0]),S.removeListener!==void 0&&this.emit("removeListener",e,t||V)}return this},re.prototype.off=re.prototype.removeListener,re.prototype.removeAllListeners=function(e){var V,b,S;if(b=this._events,b===void 0)return this;if(b.removeListener===void 0)return arguments.length===0?(this._events=Object.create(null),this._eventsCount=0):b[e]!==void 0&&(--this._eventsCount===0?this._events=Object.create(null):delete b[e]),this;if(arguments.length===0){var W=Object.keys(b),m;for(S=0;S<W.length;++S)m=W[S],m!=="removeListener"&&this.removeAllListeners(m);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if(V=b[e],typeof V=="function")this.removeListener(e,V);else if(V!==void 0)for(S=V.length-1;S>=0;S--)this.removeListener(e,V[S]);return this};function Ln(l,e,V){var b=l._events;if(b===void 0)return[];var S=b[e];return S===void 0?[]:typeof S=="function"?V?[S.listener||S]:[S]:V?hs(S):Pn(S,S.length)}re.prototype.listeners=function(e){return Ln(this,e,!0)},re.prototype.rawListeners=function(e){return Ln(this,e,!1)},re.listenerCount=function(l,e){return typeof l.listenerCount=="function"?l.listenerCount(e):An.call(l,e)},re.prototype.listenerCount=An;function An(l){var e=this._events;if(e!==void 0){var V=e[l];if(typeof V=="function")return 1;if(V!==void 0)return V.length}return 0}re.prototype.eventNames=function(){return this._eventsCount>0?Qt(this._events):[]};function Pn(l,e){for(var V=new Array(e),b=0;b<e;++b)V[b]=l[b];return V}function us(l,e){for(;e+1<l.length;e++)l[e]=l[e+1];l.pop()}function hs(l){for(var e=new Array(l.length),V=0;V<e.length;++V)e[V]=l[V].listener||l[V];return e}function ms(l,e){return new Promise(function(V,b){function S(m){l.removeListener(e,W),b(m)}function W(){typeof l.removeListener=="function"&&l.removeListener("error",S),V([].slice.call(arguments))}Kn(l,e,W,{once:!0}),e!=="error"&&ps(l,S,{once:!0})})}function ps(l,e,V){typeof l.on=="function"&&Kn(l,"error",e,V)}function Kn(l,e,V,b){if(typeof l.on=="function")b.once?l.once(e,V):l.on(e,V);else if(typeof l.addEventListener=="function")l.addEventListener(e,function S(W){b.once&&l.removeEventListener(e,S),V(W)});else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof l)}var $t=Kt.exports;const Ct=_e($t);var qt={exports:{}};qt.exports=$n,qt.exports.filter=fs;var Rs=$t.EventEmitter;function $n(l,e,V){Array.isArray(V)||(V=[V]);var b=[];return V.forEach(function(S){var W=function(){var m=[].slice.call(arguments);m.unshift(S),e.emit.apply(e,m)};b.push(W),l.on(S,W)}),function(){V.forEach(function(W,m){l.removeListener(W,b[m])})}}function fs(l,e){var V=new Rs;return $n(l,V,e),V}var Us=qt.exports;const ot=_e(Us);var qn={exports:{}};/*! For license information please see webrtc-stats.js.LICENSE.txt */(function(l,e){(function(V,b){l.exports=b()})(self,()=>{return V={7:S=>{var W,m=typeof Reflect=="object"?Reflect:null,t=m&&typeof m.apply=="function"?m.apply:function(p,g,k){return Function.prototype.apply.call(p,g,k)};W=m&&typeof m.ownKeys=="function"?m.ownKeys:Object.getOwnPropertySymbols?function(p){return Object.getOwnPropertyNames(p).concat(Object.getOwnPropertySymbols(p))}:function(p){return Object.getOwnPropertyNames(p)};var U=Number.isNaN||function(p){return p!=p};function f(){f.init.call(this)}S.exports=f,S.exports.once=function(p,g){return new Promise(function(k,N){function R(y){p.removeListener(g,E),N(y)}function E(){typeof p.removeListener=="function"&&p.removeListener("error",R),k([].slice.call(arguments))}u(p,g,E,{once:!0}),g!=="error"&&function(y,w,v){typeof y.on=="function"&&u(y,"error",w,{once:!0})}(p,R)})},f.EventEmitter=f,f.prototype._events=void 0,f.prototype._eventsCount=0,f.prototype._maxListeners=void 0;var h=10;function r(p){if(typeof p!="function")throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof p)}function i(p){return p._maxListeners===void 0?f.defaultMaxListeners:p._maxListeners}function a(p,g,k,N){var R,E,y,w;if(r(k),(E=p._events)===void 0?(E=p._events=Object.create(null),p._eventsCount=0):(E.newListener!==void 0&&(p.emit("newListener",g,k.listener?k.listener:k),E=p._events),y=E[g]),y===void 0)y=E[g]=k,++p._eventsCount;else if(typeof y=="function"?y=E[g]=N?[k,y]:[y,k]:N?y.unshift(k):y.push(k),(R=i(p))>0&&y.length>R&&!y.warned){y.warned=!0;var v=new Error("Possible EventEmitter memory leak detected. "+y.length+" "+String(g)+" listeners added. Use emitter.setMaxListeners() to increase limit");v.name="MaxListenersExceededWarning",v.emitter=p,v.type=g,v.count=y.length,w=v,console&&console.warn&&console.warn(w)}return p}function s(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,arguments.length===0?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function n(p,g,k){var N={fired:!1,wrapFn:void 0,target:p,type:g,listener:k},R=s.bind(N);return R.listener=k,N.wrapFn=R,R}function c(p,g,k){var N=p._events;if(N===void 0)return[];var R=N[g];return R===void 0?[]:typeof R=="function"?k?[R.listener||R]:[R]:k?function(E){for(var y=new Array(E.length),w=0;w<y.length;++w)y[w]=E[w].listener||E[w];return y}(R):d(R,R.length)}function o(p){var g=this._events;if(g!==void 0){var k=g[p];if(typeof k=="function")return 1;if(k!==void 0)return k.length}return 0}function d(p,g){for(var k=new Array(g),N=0;N<g;++N)k[N]=p[N];return k}function u(p,g,k,N){if(typeof p.on=="function")N.once?p.once(g,k):p.on(g,k);else{if(typeof p.addEventListener!="function")throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof p);p.addEventListener(g,function R(E){N.once&&p.removeEventListener(g,R),k(E)})}}Object.defineProperty(f,"defaultMaxListeners",{enumerable:!0,get:function(){return h},set:function(p){if(typeof p!="number"||p<0||U(p))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+p+".");h=p}}),f.init=function(){this._events!==void 0&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},f.prototype.setMaxListeners=function(p){if(typeof p!="number"||p<0||U(p))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+p+".");return this._maxListeners=p,this},f.prototype.getMaxListeners=function(){return i(this)},f.prototype.emit=function(p){for(var g=[],k=1;k<arguments.length;k++)g.push(arguments[k]);var N=p==="error",R=this._events;if(R!==void 0)N=N&&R.error===void 0;else if(!N)return!1;if(N){var E;if(g.length>0&&(E=g[0]),E instanceof Error)throw E;var y=new Error("Unhandled error."+(E?" ("+E.message+")":""));throw y.context=E,y}var w=R[p];if(w===void 0)return!1;if(typeof w=="function")t(w,this,g);else{var v=w.length,G=d(w,v);for(k=0;k<v;++k)t(G[k],this,g)}return!0},f.prototype.addListener=function(p,g){return a(this,p,g,!1)},f.prototype.on=f.prototype.addListener,f.prototype.prependListener=function(p,g){return a(this,p,g,!0)},f.prototype.once=function(p,g){return r(g),this.on(p,n(this,p,g)),this},f.prototype.prependOnceListener=function(p,g){return r(g),this.prependListener(p,n(this,p,g)),this},f.prototype.removeListener=function(p,g){var k,N,R,E,y;if(r(g),(N=this._events)===void 0)return this;if((k=N[p])===void 0)return this;if(k===g||k.listener===g)--this._eventsCount==0?this._events=Object.create(null):(delete N[p],N.removeListener&&this.emit("removeListener",p,k.listener||g));else if(typeof k!="function"){for(R=-1,E=k.length-1;E>=0;E--)if(k[E]===g||k[E].listener===g){y=k[E].listener,R=E;break}if(R<0)return this;R===0?k.shift():function(w,v){for(;v+1<w.length;v++)w[v]=w[v+1];w.pop()}(k,R),k.length===1&&(N[p]=k[0]),N.removeListener!==void 0&&this.emit("removeListener",p,y||g)}return this},f.prototype.off=f.prototype.removeListener,f.prototype.removeAllListeners=function(p){var g,k,N;if((k=this._events)===void 0)return this;if(k.removeListener===void 0)return arguments.length===0?(this._events=Object.create(null),this._eventsCount=0):k[p]!==void 0&&(--this._eventsCount==0?this._events=Object.create(null):delete k[p]),this;if(arguments.length===0){var R,E=Object.keys(k);for(N=0;N<E.length;++N)(R=E[N])!=="removeListener"&&this.removeAllListeners(R);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if(typeof(g=k[p])=="function")this.removeListener(p,g);else if(g!==void 0)for(N=g.length-1;N>=0;N--)this.removeListener(p,g[N]);return this},f.prototype.listeners=function(p){return c(this,p,!0)},f.prototype.rawListeners=function(p){return c(this,p,!1)},f.listenerCount=function(p,g){return typeof p.listenerCount=="function"?p.listenerCount(g):o.call(p,g)},f.prototype.listenerCount=o,f.prototype.eventNames=function(){return this._eventsCount>0?W(this._events):[]}},586:function(S,W,m){var t,U;(function(f){var h,r={VERSION:"1.6.1"},i={},a=function(u,p){return function(){return p.apply(u,arguments)}},s=function(){var u,p,g=arguments,k=g[0];for(p=1;p<g.length;p++)for(u in g[p])!(u in k)&&g[p].hasOwnProperty(u)&&(k[u]=g[p][u]);return k},n=function(u,p){return{value:u,name:p}};r.TRACE=n(1,"TRACE"),r.DEBUG=n(2,"DEBUG"),r.INFO=n(3,"INFO"),r.TIME=n(4,"TIME"),r.WARN=n(5,"WARN"),r.ERROR=n(8,"ERROR"),r.OFF=n(99,"OFF");var c=function(u){this.context=u,this.setLevel(u.filterLevel),this.log=this.info};c.prototype={setLevel:function(u){u&&"value"in u&&(this.context.filterLevel=u)},getLevel:function(){return this.context.filterLevel},enabledFor:function(u){var p=this.context.filterLevel;return u.value>=p.value},trace:function(){this.invoke(r.TRACE,arguments)},debug:function(){this.invoke(r.DEBUG,arguments)},info:function(){this.invoke(r.INFO,arguments)},warn:function(){this.invoke(r.WARN,arguments)},error:function(){this.invoke(r.ERROR,arguments)},time:function(u){typeof u=="string"&&u.length>0&&this.invoke(r.TIME,[u,"start"])},timeEnd:function(u){typeof u=="string"&&u.length>0&&this.invoke(r.TIME,[u,"end"])},invoke:function(u,p){h&&this.enabledFor(u)&&h(p,s({level:u},this.context))}};var o,d=new c({filterLevel:r.OFF});(o=r).enabledFor=a(d,d.enabledFor),o.trace=a(d,d.trace),o.debug=a(d,d.debug),o.time=a(d,d.time),o.timeEnd=a(d,d.timeEnd),o.info=a(d,d.info),o.warn=a(d,d.warn),o.error=a(d,d.error),o.log=o.info,r.setHandler=function(u){h=u},r.setLevel=function(u){for(var p in d.setLevel(u),i)i.hasOwnProperty(p)&&i[p].setLevel(u)},r.getLevel=function(){return d.getLevel()},r.get=function(u){return i[u]||(i[u]=new c(s({name:u},d.context)))},r.createDefaultHandler=function(u){(u=u||{}).formatter=u.formatter||function(k,N){N.name&&k.unshift("["+N.name+"]")};var p={},g=function(k,N){Function.prototype.apply.call(k,console,N)};return typeof console>"u"?function(){}:function(k,N){k=Array.prototype.slice.call(k);var R,E=console.log;N.level===r.TIME?(R=(N.name?"["+N.name+"] ":"")+k[0],k[1]==="start"?console.time?console.time(R):p[R]=new Date().getTime():console.timeEnd?console.timeEnd(R):g(E,[R+": "+(new Date().getTime()-p[R])+"ms"])):(N.level===r.WARN&&console.warn?E=console.warn:N.level===r.ERROR&&console.error?E=console.error:N.level===r.INFO&&console.info?E=console.info:N.level===r.DEBUG&&console.debug?E=console.debug:N.level===r.TRACE&&console.trace&&(E=console.trace),u.formatter(k,N),g(E,k))}},r.useDefaults=function(u){r.setLevel(u&&u.defaultLevel||r.DEBUG),r.setHandler(r.createDefaultHandler(u))},r.setDefaults=r.useDefaults,(U=typeof(t=r)=="function"?t.call(W,m,W,S):t)===void 0||(S.exports=U)})()},156:function(S,W,m){var t=this&&this.__createBinding||(Object.create?function(r,i,a,s){s===void 0&&(s=a);var n=Object.getOwnPropertyDescriptor(i,a);n&&!("get"in n?!i.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return i[a]}}),Object.defineProperty(r,s,n)}:function(r,i,a,s){s===void 0&&(s=a),r[s]=i[a]}),U=this&&this.__exportStar||function(r,i){for(var a in r)a==="default"||Object.prototype.hasOwnProperty.call(i,a)||t(i,r,a)},f=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(W,"__esModule",{value:!0}),W.Logger=void 0;var h=m(586);Object.defineProperty(W,"Logger",{enumerable:!0,get:function(){return f(h).default}}),U(m(284),W),U(m(280),W),U(m(738),W),U(m(767),W)},738:(S,W)=>{var m;Object.defineProperty(W,"__esModule",{value:!0}),W.QualityLimitationReason=void 0,function(t){t[t.none=0]="none",t[t.cpu=1]="cpu",t[t.bandwidth=2]="bandwidth",t[t.other=3]="other"}(m||(W.QualityLimitationReason=m={}))},280:(S,W)=>{Object.defineProperty(W,"__esModule",{value:!0})},767:(S,W)=>{Object.defineProperty(W,"__esModule",{value:!0})},185:(S,W)=>{Object.defineProperty(W,"__esModule",{value:!0}),W.calculatePacketsLostRatio=W.calculateRate=W.getMediaKind=void 0,W.getMediaKind=m=>{let t=m.kind||m.mediaType;return["audio","video"].includes(t)||m.type!=="inbound-rtp"||(t=m.id.toLocaleLowerCase().includes("video")?"video":"audio"),t},W.calculateRate=(m,t,U,f)=>U&&f?(t-f)/((m-U)/1e3):0,W.calculatePacketsLostRatio=(m,t,U,f)=>t==0?0:(m-(U??0))/(t-(f??0))},284:function(S,W,m){var t,U,f,h,r,i,a,s,n,c,o,d,u,p,g,k,N=this&&this.__awaiter||function(I,x,C,O){return new(C||(C=Promise))(function(B,X){function _(ie){try{se(O.next(ie))}catch(de){X(de)}}function q(ie){try{se(O.throw(ie))}catch(de){X(de)}}function se(ie){var de;ie.done?B(ie.value):(de=ie.value,de instanceof C?de:new C(function(Re){Re(de)})).then(_,q)}se((O=O.apply(I,x||[])).next())})},R=this&&this.__classPrivateFieldSet||function(I,x,C,O,B){if(O==="m")throw new TypeError("Private method is not writable");if(O==="a"&&!B)throw new TypeError("Private accessor was defined without a setter");if(typeof x=="function"?I!==x||!B:!x.has(I))throw new TypeError("Cannot write private member to an object whose class did not declare it");return O==="a"?B.call(I,C):B?B.value=C:x.set(I,C),C},E=this&&this.__classPrivateFieldGet||function(I,x,C,O){if(C==="a"&&!O)throw new TypeError("Private accessor was defined without a getter");if(typeof x=="function"?I!==x||!O:!x.has(I))throw new TypeError("Cannot read private member from an object whose class did not declare it");return C==="m"?O:C==="a"?O.call(I):O?O.value:x.get(I)},y=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(W,"__esModule",{value:!0}),W.WebRTCStats=void 0;const w=m(7),v=y(m(586)),G=m(738),j=m(185);class D extends w.EventEmitter{constructor(x){super(),t.add(this),U.set(this,void 0),f.set(this,void 0),h.set(this,void 0),r.set(this,null),i.set(this,void 0),a.set(this,null),this.start=()=>{E(this,i,"f").info("WebRTC statistics collection is starting..."),R(this,a,null,"f"),R(this,r,setInterval(E(this,s,"f"),E(this,f,"f")),"f")},this.stop=()=>{E(this,r,"f")&&(clearInterval(E(this,r,"f")),R(this,r,null,"f"),E(this,i,"f").info("WebRTC statistics collection has stopped."))},s.set(this,()=>N(this,void 0,void 0,function*(){let C,O;try{E(this,i,"f").trace("Requesting WebRTC statistics..."),C=yield E(this,U,"f").call(this),O=new Date().toISOString()}catch(_){return E(this,i,"f").error("Problem collecting the WebRTC statistics.",_),void this.emit("error",`Problem collecting the WebRTC statistics - ${_}`)}const B=Array.from(C.values()),X={timestamp:O,input:{audio:[],video:[]},output:{audio:[],video:[]}};E(this,h,"f")&&(X.rawStats=C);for(let _=0;_<Object.keys(B).length;_++){const q=B[_];switch(q.type){case"outbound-rtp":const se=q,ie=(0,j.getMediaKind)(se);ie==="audio"?yield E(this,t,"m",o).call(this,C,se,X):ie==="video"&&(yield E(this,t,"m",d).call(this,C,se,X));break;case"inbound-rtp":const de=q;let Re=(0,j.getMediaKind)(de);Re==="audio"?yield E(this,t,"m",p).call(this,C,de,X):Re==="video"&&(yield E(this,t,"m",g).call(this,C,de,X));break;case"candidate-pair":const Me=q;Me.nominated&&E(this,t,"m",k).call(this,Me,X)}}R(this,a,X,"f"),this.emit("stats",X)})),R(this,i,v.default.get("WebRTCStats"),"f"),R(this,U,x.getStats,"f"),R(this,f,x.getStatsInterval||1e3,"f"),R(this,h,!!x.includeRawStats,"f")}}W.WebRTCStats=D,U=new WeakMap,f=new WeakMap,h=new WeakMap,r=new WeakMap,i=new WeakMap,a=new WeakMap,s=new WeakMap,t=new WeakSet,n=function(I,x){if(x){const C=I.get(x);if(C)return{mimeType:C.mimeType}}return{}},c=function(I,x,C){return N(this,void 0,void 0,function*(){var O,B,X,_;const q=(0,j.calculateRate)(x.timestamp,x.bytesSent,C==null?void 0:C.timestamp,C==null?void 0:C.totalBytesSent),se=(0,j.calculateRate)(x.timestamp,x.packetsSent,C==null?void 0:C.timestamp,C==null?void 0:C.totalPacketsSent),ie=E(this,t,"m",n).call(this,I,x.codecId);return Object.assign({id:x.id,timestamp:x.timestamp,mid:x.mid,totalBytesSent:x.bytesSent,bytesSentDelta:x.bytesSent-((O=C==null?void 0:C.totalBytesSent)!==null&&O!==void 0?O:0),totalPacketsSent:x.packetsSent,packetsSentDelta:x.packetsSent-((B=C==null?void 0:C.totalPacketsSent)!==null&&B!==void 0?B:0),bitrate:q,packetRate:se,targetBitrate:x.targetBitrate,retransmittedPacketsSent:x.retransmittedPacketsSent,retransmittedPacketsSentDelta:x.retransmittedPacketsSent-((X=C==null?void 0:C.retransmittedPacketsSent)!==null&&X!==void 0?X:0),retransmittedBytesSent:x.retransmittedBytesSent,retransmittedBytesSentDelta:x.retransmittedBytesSent-((_=C==null?void 0:C.retransmittedBytesSent)!==null&&_!==void 0?_:0)},ie)})},o=function(I,x,C){return N(this,void 0,void 0,function*(){var O;const B=(O=E(this,a,"f"))===null||O===void 0?void 0:O.output.audio.find(q=>q.id===x.id);if(B&&x.timestamp-B.timestamp<=0)return;const X=yield E(this,t,"m",c).call(this,I,x,B),_=Object.assign({},X);C.output.audio.push(_)})},d=function(I,x,C){return N(this,void 0,void 0,function*(){var O;const B=(O=E(this,a,"f"))===null||O===void 0?void 0:O.output.video.find(se=>se.id===x.id);if(B&&x.timestamp-B.timestamp<=0)return;const X=yield E(this,t,"m",c).call(this,I,x,B);let _=G.QualityLimitationReason.none;x.qualityLimitationReason&&(_=x.qualityLimitationReason);const q=Object.assign(Object.assign({},X),{frameWidth:x.frameWidth,frameHeight:x.frameHeight,framesPerSecond:x.framesPerSecond,framesSent:x.framesSent,qualityLimitationReason:_,qualityLimitationDurations:x.qualityLimitationDurations});C.output.video.push(q)})},u=function(I,x,C){return N(this,void 0,void 0,function*(){var O,B;const X=(0,j.calculateRate)(x.timestamp,x.bytesReceived,C==null?void 0:C.timestamp,C==null?void 0:C.totalBytesReceived),_=(0,j.calculateRate)(x.timestamp,x.packetsReceived,C==null?void 0:C.timestamp,C==null?void 0:C.totalPacketsReceived),q=(0,j.calculatePacketsLostRatio)(x.packetsReceived,x.packetsLost,C==null?void 0:C.totalPacketsReceived,C==null?void 0:C.totalPacketsLost),se=((O=x.packetsLost)!==null&&O!==void 0?O:0)-((B=C==null?void 0:C.totalPacketsLost)!==null&&B!==void 0?B:0),ie=E(this,t,"m",n).call(this,I,x.codecId);return Object.assign({id:x.id,timestamp:x.timestamp,mid:x.mid,trackIdentifier:x.trackIdentifier,jitter:x.jitter,jitterBufferDelay:x.jitterBufferDelay,jitterBufferEmittedCount:x.jitterBufferEmittedCount,totalBytesReceived:x.bytesReceived,totalPacketsReceived:x.packetsReceived,totalPacketsLost:x.packetsLost,bitrate:X,packetRate:_,packetLossRatio:q,packetLossDelta:se},ie)})},p=function(I,x,C){return N(this,void 0,void 0,function*(){var O;const B=(O=E(this,a,"f"))===null||O===void 0?void 0:O.input.audio.find(_=>_.id===x.id);if(B&&x.timestamp-B.timestamp<=0)return;const X=yield E(this,t,"m",u).call(this,I,x,B);C.input.audio.push(X)})},g=function(I,x,C){return N(this,void 0,void 0,function*(){var O;const B=(O=E(this,a,"f"))===null||O===void 0?void 0:O.input.video.find(q=>q.id===x.id);if(B&&x.timestamp-B.timestamp<=0)return;const X=yield E(this,t,"m",u).call(this,I,x,B),_=Object.assign(Object.assign({},X),{keyFramesDecoded:x.keyFramesDecoded,frameHeight:x.frameHeight,frameWidth:x.frameWidth,framesDecoded:x.framesDecoded,framesDropped:x.framesDropped,framesPerSecond:x.framesPerSecond,framesReceived:x.framesReceived});C.input.video.push(_)})},k=function(I,x){x.totalRoundTripTime=I.totalRoundTripTime,x.currentRoundTripTime=I.currentRoundTripTime,x.responsesReceived=I.responsesReceived,x.availableOutgoingBitrate=I.availableOutgoingBitrate,x.availableIncomingBitrate=I.availableIncomingBitrate}}},b={},function S(W){var m=b[W];if(m!==void 0)return m.exports;var t=b[W]={exports:{}};return V[W].call(t.exports,t,t.exports,S),t.exports}(156);var V,b})})(qn);var Ws=qn.exports;const lt=Te.get("PeerConnectionStats"),er={stats:"stats"},Zs=l=>{const{input:e,output:V,rawStats:b,...S}=l;return{...S,audio:{inbounds:l.input.audio.map(({packetLossRatio:m,packetLossDelta:t,bitrate:U,...f})=>({packetsLostRatioPerSecond:m,packetsLostDeltaPerSecond:t,bitrateBitsPerSecond:U*8,bitrate:U,...f})),outbounds:l.output.audio.map(({packetLossRatio:m,packetLossDelta:t,bitrate:U,...f})=>({packetsLostRatioPerSecond:m,packetsLostDeltaPerSecond:t,bitrateBitsPerSecond:U*8,bitrate:U,...f}))},video:{inbounds:l.input.video.map(({packetLossRatio:m,packetLossDelta:t,bitrate:U,...f})=>({packetsLostRatioPerSecond:m,packetsLostDeltaPerSecond:t,bitrateBitsPerSecond:U*8,bitrate:U,...f})),outbounds:l.output.video.map(({packetLossRatio:m,packetLossDelta:t,bitrate:U,...f})=>({packetsLostRatioPerSecond:m,packetsLostDeltaPerSecond:t,bitrateBitsPerSecond:U*8,bitrate:U,...f}))},raw:l.rawStats}};class bs extends Ct{constructor(e,V={statsIntervalMs:1e3,autoInitStats:!0}){super(),this.peer=e,this.collection=null,this.initialized=!1,V.autoInitStats&&this.init(V.statsIntervalMs)}init(e){if(this.initialized){lt.warn("PeerConnectionStats.init() has already been called. Automatic initialization occurs when the PeerConnectionStats object is constructed.");return}lt.info("Initializing peer connection stats");const V=this.peer;try{this.collection=new Ws.WebRTCStats({getStatsInterval:e,getStats:()=>V.getStats(),includeRawStats:!0}),this.collection.on("stats",b=>{const S=Zs(b);fe.addStats(S),this.emit(er.stats,S)}),this.collection.start(),this.initialized=!0}catch(b){lt.error(b)}}parseStats(e){return lt.warn("The parseStats method is deprecated and will be removed in future releases."),null}stop(){lt.info("Stopping peer connection stats"),this.collection.stop()}}var Ve={},we={},tr={},nr={exports:{}},rr=nr.exports={v:[{name:"version",reg:/^(\d*)$/}],o:[{name:"origin",reg:/^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/,names:["username","sessionId","sessionVersion","netType","ipVer","address"],format:"%s %s %d %s IP%d %s"}],s:[{name:"name"}],i:[{name:"description"}],u:[{name:"uri"}],e:[{name:"email"}],p:[{name:"phone"}],z:[{name:"timezones"}],r:[{name:"repeats"}],t:[{name:"timing",reg:/^(\d*) (\d*)/,names:["start","stop"],format:"%d %d"}],c:[{name:"connection",reg:/^IN IP(\d) (\S*)/,names:["version","ip"],format:"IN IP%d %s"}],b:[{push:"bandwidth",reg:/^(TIAS|AS|CT|RR|RS):(\d*)/,names:["type","limit"],format:"%s:%s"}],m:[{reg:/^(\w*) (\d*) ([\w/]*)(?: (.*))?/,names:["type","port","protocol","payloads"],format:"%s %d %s %s"}],a:[{push:"rtp",reg:/^rtpmap:(\d*) ([\w\-.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/,names:["payload","codec","rate","encoding"],format:function(l){return l.encoding?"rtpmap:%d %s/%s/%s":l.rate?"rtpmap:%d %s/%s":"rtpmap:%d %s"}},{push:"fmtp",reg:/^fmtp:(\d*) ([\S| ]*)/,names:["payload","config"],format:"fmtp:%d %s"},{name:"control",reg:/^control:(.*)/,format:"control:%s"},{name:"rtcp",reg:/^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/,names:["port","netType","ipVer","address"],format:function(l){return l.address!=null?"rtcp:%d %s IP%d %s":"rtcp:%d"}},{push:"rtcpFbTrrInt",reg:/^rtcp-fb:(\*|\d*) trr-int (\d*)/,names:["payload","value"],format:"rtcp-fb:%s trr-int %d"},{push:"rtcpFb",reg:/^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/,names:["payload","type","subtype"],format:function(l){return l.subtype!=null?"rtcp-fb:%s %s %s":"rtcp-fb:%s %s"}},{push:"ext",reg:/^extmap:(\d+)(?:\/(\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\S*)(?: (\S*))?/,names:["value","direction","encrypt-uri","uri","config"],format:function(l){return"extmap:%d"+(l.direction?"/%s":"%v")+(l["encrypt-uri"]?" %s":"%v")+" %s"+(l.config?" %s":"")}},{name:"extmapAllowMixed",reg:/^(extmap-allow-mixed)/},{push:"crypto",reg:/^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/,names:["id","suite","config","sessionConfig"],format:function(l){return l.sessionConfig!=null?"crypto:%d %s %s %s":"crypto:%d %s %s"}},{name:"setup",reg:/^setup:(\w*)/,format:"setup:%s"},{name:"connectionType",reg:/^connection:(new|existing)/,format:"connection:%s"},{name:"mid",reg:/^mid:([^\s]*)/,format:"mid:%s"},{name:"msid",reg:/^msid:(.*)/,format:"msid:%s"},{name:"ptime",reg:/^ptime:(\d*(?:\.\d*)*)/,format:"ptime:%d"},{name:"maxptime",reg:/^maxptime:(\d*(?:\.\d*)*)/,format:"maxptime:%d"},{name:"direction",reg:/^(sendrecv|recvonly|sendonly|inactive)/},{name:"icelite",reg:/^(ice-lite)/},{name:"iceUfrag",reg:/^ice-ufrag:(\S*)/,format:"ice-ufrag:%s"},{name:"icePwd",reg:/^ice-pwd:(\S*)/,format:"ice-pwd:%s"},{name:"fingerprint",reg:/^fingerprint:(\S*) (\S*)/,names:["type","hash"],format:"fingerprint:%s %s"},{push:"candidates",reg:/^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/,names:["foundation","component","transport","priority","ip","port","type","raddr","rport","tcptype","generation","network-id","network-cost"],format:function(l){var e="candidate:%s %d %s %d %s %d typ %s";return e+=l.raddr!=null?" raddr %s rport %d":"%v%v",e+=l.tcptype!=null?" tcptype %s":"%v",l.generation!=null&&(e+=" generation %d"),e+=l["network-id"]!=null?" network-id %d":"%v",e+=l["network-cost"]!=null?" network-cost %d":"%v",e}},{name:"endOfCandidates",reg:/^(end-of-candidates)/},{name:"remoteCandidates",reg:/^remote-candidates:(.*)/,format:"remote-candidates:%s"},{name:"iceOptions",reg:/^ice-options:(\S*)/,format:"ice-options:%s"},{push:"ssrcs",reg:/^ssrc:(\d*) ([\w_-]*)(?::(.*))?/,names:["id","attribute","value"],format:function(l){var e="ssrc:%d";return l.attribute!=null&&(e+=" %s",l.value!=null&&(e+=":%s")),e}},{push:"ssrcGroups",reg:/^ssrc-group:([\x21\x23\x24\x25\x26\x27\x2A\x2B\x2D\x2E\w]*) (.*)/,names:["semantics","ssrcs"],format:"ssrc-group:%s %s"},{name:"msidSemantic",reg:/^msid-semantic:\s?(\w*) (\S*)/,names:["semantic","token"],format:"msid-semantic: %s %s"},{push:"groups",reg:/^group:(\w*) (.*)/,names:["type","mids"],format:"group:%s %s"},{name:"rtcpMux",reg:/^(rtcp-mux)/},{name:"rtcpRsize",reg:/^(rtcp-rsize)/},{name:"sctpmap",reg:/^sctpmap:([\w_/]*) (\S*)(?: (\S*))?/,names:["sctpmapNumber","app","maxMessageSize"],format:function(l){return l.maxMessageSize!=null?"sctpmap:%s %s %s":"sctpmap:%s %s"}},{name:"xGoogleFlag",reg:/^x-google-flag:([^\s]*)/,format:"x-google-flag:%s"},{push:"rids",reg:/^rid:([\d\w]+) (\w+)(?: ([\S| ]*))?/,names:["id","direction","params"],format:function(l){return l.params?"rid:%s %s %s":"rid:%s %s"}},{push:"imageattrs",reg:new RegExp("^imageattr:(\\d+|\\*)[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?"),names:["pt","dir1","attrs1","dir2","attrs2"],format:function(l){return"imageattr:%s %s %s"+(l.dir2?" %s %s":"")}},{name:"simulcast",reg:new RegExp("^simulcast:(send|recv) ([a-zA-Z0-9\\-_~;,]+)(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?$"),names:["dir1","list1","dir2","list2"],format:function(l){return"simulcast:%s %s"+(l.dir2?" %s %s":"")}},{name:"simulcast_03",reg:/^simulcast:[\s\t]+([\S+\s\t]+)$/,names:["value"],format:"simulcast: %s"},{name:"framerate",reg:/^framerate:(\d+(?:$|\.\d+))/,format:"framerate:%s"},{name:"sourceFilter",reg:/^source-filter: *(excl|incl) (\S*) (IP4|IP6|\*) (\S*) (.*)/,names:["filterMode","netType","addressTypes","destAddress","srcList"],format:"source-filter: %s %s %s %s %s"},{name:"bundleOnly",reg:/^(bundle-only)/},{name:"label",reg:/^label:(.+)/,format:"label:%s"},{name:"sctpPort",reg:/^sctp-port:(\d+)$/,format:"sctp-port:%s"},{name:"maxMessageSize",reg:/^max-message-size:(\d+)$/,format:"max-message-size:%s"},{push:"tsRefClocks",reg:/^ts-refclk:([^\s=]*)(?:=(\S*))?/,names:["clksrc","clksrcExt"],format:function(l){return"ts-refclk:%s"+(l.clksrcExt!=null?"=%s":"")}},{name:"mediaClk",reg:/^mediaclk:(?:id=(\S*))? *([^\s=]*)(?:=(\S*))?(?: *rate=(\d+)\/(\d+))?/,names:["id","mediaClockName","mediaClockValue","rateNumerator","rateDenominator"],format:function(l){var e="mediaclk:";return e+=l.id!=null?"id=%s %s":"%v%s",e+=l.mediaClockValue!=null?"=%s":"",e+=l.rateNumerator!=null?" rate=%s":"",e+=l.rateDenominator!=null?"/%s":"",e}},{name:"keywords",reg:/^keywds:(.+)$/,format:"keywds:%s"},{name:"content",reg:/^content:(.+)/,format:"content:%s"},{name:"bfcpFloorCtrl",reg:/^floorctrl:(c-only|s-only|c-s)/,format:"floorctrl:%s"},{name:"bfcpConfId",reg:/^confid:(\d+)/,format:"confid:%s"},{name:"bfcpUserId",reg:/^userid:(\d+)/,format:"userid:%s"},{name:"bfcpFloorId",reg:/^floorid:(.+) (?:m-stream|mstrm):(.+)/,names:["id","mStream"],format:"floorid:%s mstrm:%s"},{push:"invalid",names:["value"]}]};Object.keys(rr).forEach(function(l){var e=rr[l];e.forEach(function(V){V.reg||(V.reg=/(.*)/),V.format||(V.format="%s")})});var sr=nr.exports;(function(l){var e=function(t){return String(Number(t))===t?Number(t):t},V=function(t,U,f,h){if(h&&!f)U[h]=e(t[1]);else for(var r=0;r<f.length;r+=1)t[r+1]!=null&&(U[f[r]]=e(t[r+1]))},b=function(t,U,f){var h=t.name&&t.names;t.push&&!U[t.push]?U[t.push]=[]:h&&!U[t.name]&&(U[t.name]={});var r=t.push?{}:h?U[t.name]:U;V(f.match(t.reg),r,t.names,t.name),t.push&&U[t.push].push(r)},S=sr,W=RegExp.prototype.test.bind(/^([a-z])=(.*)/);l.parse=function(t){var U={},f=[],h=U;return t.split(/(\r\n|\r|\n)/).filter(W).forEach(function(r){var i=r[0],a=r.slice(2);i==="m"&&(f.push({rtp:[],fmtp:[]}),h=f[f.length-1]);for(var s=0;s<(S[i]||[]).length;s+=1){var n=S[i][s];if(n.reg.test(a))return b(n,h,a)}}),U.media=f,U};var m=function(t,U){var f=U.split(/=(.+)/,2);return f.length===2?t[f[0]]=e(f[1]):f.length===1&&U.length>1&&(t[f[0]]=void 0),t};l.parseParams=function(t){return t.split(/;\s?/).reduce(m,{})},l.parseFmtpConfig=l.parseParams,l.parsePayloads=function(t){return t.toString().split(" ").map(Number)},l.parseRemoteCandidates=function(t){for(var U=[],f=t.split(" ").map(e),h=0;h<f.length;h+=3)U.push({component:f[h],ip:f[h+1],port:f[h+2]});return U},l.parseImageAttributes=function(t){return t.split(" ").map(function(U){return U.substring(1,U.length-1).split(",").reduce(m,{})})},l.parseSimulcastStreamList=function(t){return t.split(";").map(function(U){return U.split(",").map(function(f){var h,r=!1;return f[0]!=="~"?h=e(f):(h=e(f.substring(1,f.length)),r=!0),{scid:h,paused:r}})})}})(tr);var en=sr,Fs=/%[sdv%]/g,gs=function(l){var e=1,V=arguments,b=V.length;return l.replace(Fs,function(S){if(e>=b)return S;var W=V[e];switch(e+=1,S){case"%%":return"%";case"%s":return String(W);case"%d":return Number(W);case"%v":return""}})},ct=function(l,e,V){var b=e.format instanceof Function?e.format(e.push?V:V[e.name]):e.format,S=[l+"="+b];if(e.names)for(var W=0;W<e.names.length;W+=1){var m=e.names[W];e.name?S.push(V[e.name][m]):S.push(V[e.names[W]])}else S.push(V[e.name]);return gs.apply(null,S)},Ss=["v","o","s","i","u","e","p","c","b","t","r","z","a"],Es=["i","c","b","a"],ys=function(l,e){e=e||{},l.version==null&&(l.version=0),l.name==null&&(l.name=" "),l.media.forEach(function(W){W.payloads==null&&(W.payloads="")});var V=e.outerOrder||Ss,b=e.innerOrder||Es,S=[];return V.forEach(function(W){en[W].forEach(function(m){m.name in l&&l[m.name]!=null?S.push(ct(W,m,l)):m.push in l&&l[m.push]!=null&&l[m.push].forEach(function(t){S.push(ct(W,m,t))})})}),l.media.forEach(function(W){S.push(ct("m",en.m[0],W)),b.forEach(function(m){en[m].forEach(function(t){t.name in W&&W[t.name]!=null?S.push(ct(m,t,W)):t.push in W&&W[t.push]!=null&&W[t.push].forEach(function(U){S.push(ct(m,t,U))})})})}),S.join(`\r
`)+`\r
`},Ie=tr,ks=ys;we.write=ks,we.parse=Ie.parse,we.parseParams=Ie.parseParams,we.parseFmtpConfig=Ie.parseFmtpConfig,we.parsePayloads=Ie.parsePayloads,we.parseRemoteCandidates=Ie.parseRemoteCandidates,we.parseImageAttributes=Ie.parseImageAttributes,we.parseSimulcastStreamList=Ie.parseSimulcastStreamList;var Ns=function(l){const e=new Intl.Collator(l,{sensitivity:"base"});return(V,b)=>e.compare(V,b)==0};let dt=class Dr{constructor(e,V,b,S,W,m,t,U,f){this.foundation=e,this.componentId=V,this.transport=b,this.priority=S,this.address=W,this.port=m,this.type=t,this.relAddr=U,this.relPort=f}equals(e){return e.foundation===this.foundation&&e.componentId===this.componentId&&e.transport===this.transport&&e.priority===this.priority&&e.address===this.address&&e.port===this.port&&e.type===this.type&&e.relAddr===this.relAddr&&e.relPort===this.relPort}clone(){return new Dr(this.foundation,this.componentId,this.transport,this.priority,this.address,this.port,this.type,this.relAddr,this.relPort)}plain(){const e={foundation:this.foundation,componentId:this.componentId,transport:this.transport,priority:this.priority,address:this.address,port:this.port,type:this.type};return this.relAddr&&(e.relAddr=this.relAddr),this.relPort&&(e.relPort=this.relPort),e}getFoundation(){return this.foundation}getComponentId(){return this.componentId}getTransport(){return this.transport}getPriority(){return this.priority}getAddress(){return this.address}getPort(){return this.port}getType(){return this.type}getRelAddr(){return this.relAddr}getRelPort(){return this.relPort}};dt.expand=function(l){return l.constructor.name==="CandidateInfo"?l:(l=l,new dt(l.foundation,l.componentId,l.transport,l.priority,l.address,l.port,l.type,l.relAddr,l.relPort))},dt.clone=function(l){return l.constructor.name==="CandidateInfo"?l.clone():dt.expand(l)};var ir=dt;let Vt=class Or{constructor(e,V){this.id=e,this.params=V||[]}clone(){return new Or(this.id,this.params)}plain(){return this.params.length?{id:this.id,params:this.params}:{id:this.id}}getId(){return this.id}getParams(){return this.params}};Vt.expand=function(l){return l.constructor.name==="RTCPFeedbackInfo"?l:(l=l,new Vt(l.id,l.params))},Vt.clone=function(l){return l.constructor.name==="RTCPFeedbackInfo"?l.clone():Vt.expand(l)};var tn=Vt;const ar=tn;let Xe=class Hr{constructor(e,V,b){this.codec=e,this.type=V,this.params={},this.rtcpfbs=new Set,b&&this.addParams(b)}clone(){const e=new Hr(this.codec,this.type,this.params);this.hasRTX()&&e.setRTX(this.getRTX());for(const V of this.rtcpfbs)e.addRTCPFeedback(V.clone());return this.hasChannels()&&e.setChannels(this.getChannels()),e}plain(){const e={codec:this.codec,type:this.type};this.rtx&&(e.rtx=this.rtx),this.channels&&(e.channels=this.channels),Object.keys(this.params).length&&(e.params=this.params);for(const V of this.rtcpfbs)e.rtcpfbs||(e.rtcpfbs=[]),e.rtcpfbs.push(V.plain());return e}setRTX(e){this.rtx=e}getType(){return this.type}setType(e){this.type=e}getCodec(){return this.codec}getParams(){return this.params}addParams(e){for(const V in e)this.params[V]=e[V]}addParam(e,V){this.params[e]=V}hasParam(e){return Object.hasOwnProperty.call(this.params,e)}getParam(e,V=void 0){if(this.hasParam(e))return this.params[e];if(V===void 0)throw new Error(`param ${e} not found and no default value provided`);return""+V}hasRTX(){return this.rtx}getRTX(){return this.rtx}hasChannels(){return this.channels}getChannels(){return this.channels}setChannels(e){this.channels=e}addRTCPFeedback(e){this.rtcpfbs.add(e)}getRTCPFeedbacks(){return this.rtcpfbs}};Xe.expand=function(l){if(l.constructor.name==="CodecInfo")return l;l=l;const e=new Xe(l.codec,l.type,l.params);l.rtx&&e.setRTX(l.rtx),l.channels&&e.setChannels(l.channels);for(const V of l.rtcpfbs||[]){const b=ar.expand(V);e.addRTCPFeedback(b)}return e},Xe.clone=function(l){return l.constructor.name==="CodecInfo"?l.clone():Xe.expand(l)},Xe.MapFromNames=function(l,e,V){var b;const S=new Map;let W=96;for(const m of l){let t;const U=m.split(";"),f=U.shift().toLowerCase().trim();f==="pcmu"?t=0:f==="pcma"?t=8:t=++W;const h=new Xe(f,t);f==="opus"?h.setChannels(2):f==="multiopus"&&h.setChannels(6),e&&f!=="ulpfec"&&f!=="flexfec-03"&&f!=="red"&&h.setRTX(++W);for(const r of V||[])h.addRTCPFeedback(new ar(r.id,r.params));for(const r of U){let i=r.split("=");h.addParam(i[0].trim(),(b=i[1])===null||b===void 0?void 0:b.trim())}S.set(t,h)}return S};var jt=Xe;function nn(){var l=this;if(!(this instanceof nn))return new(Function.prototype.bind.apply(nn,[null].concat(Array.prototype.slice.call(arguments))));Array.from(arguments).forEach(function(e){l[e]=Symbol.for("MEDOOZE_SEMANTIC_SDP_"+e)})}var rn=nn;const le=rn("ACTIVE","PASSIVE","ACTPASS","INACTIVE");le.byValue=function(l){switch(l){case le.ACTIVE:case le.PASSIVE:case le.ACTPASS:case le.INACTIVE:return l}return le[l.toUpperCase()]},le.toString=function(l){switch(l){case le.ACTIVE:return"active";case le.PASSIVE:return"passive";case le.ACTPASS:return"actpass";case le.INACTIVE:return"inactive"}},le.reverse=function(l,e){switch(l){case le.ACTIVE:return le.PASSIVE;case le.PASSIVE:return le.ACTIVE;case le.ACTPASS:return e?le.ACTIVE:le.PASSIVE;case le.INACTIVE:return le.INACTIVE}};var sn=le;const an=sn;let ut=class _r{constructor(e,V,b){this.setup=e,this.hash=V,this.fingerprint=b}clone(){return new _r(this.setup,this.hash,this.fingerprint)}plain(){return{setup:an.toString(this.setup),hash:this.hash,fingerprint:this.fingerprint}}getFingerprint(){return this.fingerprint}getHash(){return this.hash}getSetup(){return this.setup}setSetup(e){this.setup=e}};ut.expand=function(l){return l.constructor.name==="DTLSInfo"?l:(l=l,new ut(l.setup?an.byValue(l.setup):an.ACTPASS,l.hash,l.fingerprint))},ut.clone=function(l){return l.constructor.name==="DTLSInfo"?l.clone():ut.expand(l)};var or=ut;let ht=class Lr{constructor(e,V,b,S){this.tag=e,this.suite=V,this.keyParams=b,this.sessionParams=S}clone(){return new Lr(this.tag,this.suite,this.keyParams,this.sessionParams)}plain(){return{tag:this.tag,suite:this.suite,keyParams:this.keyParams,sessionParams:this.sessionParams}}getSessionParams(){return this.sessionParams}getKeyParams(){return this.keyParams}getSuite(){return this.suite}getTag(){return this.tag}};ht.expand=function(l){return l.constructor.name==="CryptoInfo"?l:(l=l,new ht(l.tag,l.suite,l.keyParams,l.sessionParams))},ht.clone=function(l){return l.constructor.name==="CryptoInfo"?l.clone():ht.expand(l)};var lr=ht,on={exports:{}},ln={exports:{}},cr={},It={};It.byteLength=ws,It.toByteArray=xs,It.fromByteArray=Qs;for(var ke=[],be=[],Js=typeof Uint8Array<"u"?Uint8Array:Array,cn="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",Pe=0,Ts=cn.length;Pe<Ts;++Pe)ke[Pe]=cn[Pe],be[cn.charCodeAt(Pe)]=Pe;be[45]=62,be[95]=63;function dr(l){var e=l.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var V=l.indexOf("=");V===-1&&(V=e);var b=V===e?0:4-V%4;return[V,b]}function ws(l){var e=dr(l),V=e[0],b=e[1];return(V+b)*3/4-b}function Ms(l,e,V){return(e+V)*3/4-V}function xs(l){var e,V=dr(l),b=V[0],S=V[1],W=new Js(Ms(l,b,S)),m=0,t=S>0?b-4:b,U;for(U=0;U<t;U+=4)e=be[l.charCodeAt(U)]<<18|be[l.charCodeAt(U+1)]<<12|be[l.charCodeAt(U+2)]<<6|be[l.charCodeAt(U+3)],W[m++]=e>>16&255,W[m++]=e>>8&255,W[m++]=e&255;return S===2&&(e=be[l.charCodeAt(U)]<<2|be[l.charCodeAt(U+1)]>>4,W[m++]=e&255),S===1&&(e=be[l.charCodeAt(U)]<<10|be[l.charCodeAt(U+1)]<<4|be[l.charCodeAt(U+2)]>>2,W[m++]=e>>8&255,W[m++]=e&255),W}function vs(l){return ke[l>>18&63]+ke[l>>12&63]+ke[l>>6&63]+ke[l&63]}function Gs(l,e,V){for(var b,S=[],W=e;W<V;W+=3)b=(l[W]<<16&16711680)+(l[W+1]<<8&65280)+(l[W+2]&255),S.push(vs(b));return S.join("")}function Qs(l){for(var e,V=l.length,b=V%3,S=[],W=16383,m=0,t=V-b;m<t;m+=W)S.push(Gs(l,m,m+W>t?t:m+W));return b===1?(e=l[V-1],S.push(ke[e>>2]+ke[e<<4&63]+"==")):b===2&&(e=(l[V-2]<<8)+l[V-1],S.push(ke[e>>10]+ke[e>>4&63]+ke[e<<2&63]+"=")),S.join("")}var dn={};/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */dn.read=function(l,e,V,b,S){var W,m,t=S*8-b-1,U=(1<<t)-1,f=U>>1,h=-7,r=V?S-1:0,i=V?-1:1,a=l[e+r];for(r+=i,W=a&(1<<-h)-1,a>>=-h,h+=t;h>0;W=W*256+l[e+r],r+=i,h-=8);for(m=W&(1<<-h)-1,W>>=-h,h+=b;h>0;m=m*256+l[e+r],r+=i,h-=8);if(W===0)W=1-f;else{if(W===U)return m?NaN:(a?-1:1)*(1/0);m=m+Math.pow(2,b),W=W-f}return(a?-1:1)*m*Math.pow(2,W-b)},dn.write=function(l,e,V,b,S,W){var m,t,U,f=W*8-S-1,h=(1<<f)-1,r=h>>1,i=S===23?Math.pow(2,-24)-Math.pow(2,-77):0,a=b?0:W-1,s=b?1:-1,n=e<0||e===0&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(t=isNaN(e)?1:0,m=h):(m=Math.floor(Math.log(e)/Math.LN2),e*(U=Math.pow(2,-m))<1&&(m--,U*=2),m+r>=1?e+=i/U:e+=i*Math.pow(2,1-r),e*U>=2&&(m++,U/=2),m+r>=h?(t=0,m=h):m+r>=1?(t=(e*U-1)*Math.pow(2,S),m=m+r):(t=e*Math.pow(2,r-1)*Math.pow(2,S),m=0));S>=8;l[V+a]=t&255,a+=s,t/=256,S-=8);for(m=m<<S|t,f+=S;f>0;l[V+a]=m&255,a+=s,m/=256,f-=8);l[V+a-s]|=n*128};/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */(function(l){var e=It,V=dn,b=typeof Symbol=="function"&&typeof Symbol.for=="function"?Symbol.for("nodejs.util.inspect.custom"):null;l.Buffer=t,l.SlowBuffer=d,l.INSPECT_MAX_BYTES=50;var S=2147483647;l.kMaxLength=S,t.TYPED_ARRAY_SUPPORT=W(),!t.TYPED_ARRAY_SUPPORT&&typeof console<"u"&&typeof console.error=="function"&&console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");function W(){try{var J=new Uint8Array(1),Z={foo:function(){return 42}};return Object.setPrototypeOf(Z,Uint8Array.prototype),Object.setPrototypeOf(J,Z),J.foo()===42}catch{return!1}}Object.defineProperty(t.prototype,"parent",{enumerable:!0,get:function(){if(t.isBuffer(this))return this.buffer}}),Object.defineProperty(t.prototype,"offset",{enumerable:!0,get:function(){if(t.isBuffer(this))return this.byteOffset}});function m(J){if(J>S)throw new RangeError('The value "'+J+'" is invalid for option "size"');var Z=new Uint8Array(J);return Object.setPrototypeOf(Z,t.prototype),Z}function t(J,Z,F){if(typeof J=="number"){if(typeof Z=="string")throw new TypeError('The "string" argument must be of type string. Received type number');return r(J)}return U(J,Z,F)}t.poolSize=8192;function U(J,Z,F){if(typeof J=="string")return i(J,Z);if(ArrayBuffer.isView(J))return s(J);if(J==null)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof J);if(We(J,ArrayBuffer)||J&&We(J.buffer,ArrayBuffer)||typeof SharedArrayBuffer<"u"&&(We(J,SharedArrayBuffer)||J&&We(J.buffer,SharedArrayBuffer)))return n(J,Z,F);if(typeof J=="number")throw new TypeError('The "value" argument must not be of type number. Received type number');var T=J.valueOf&&J.valueOf();if(T!=null&&T!==J)return t.from(T,Z,F);var M=c(J);if(M)return M;if(typeof Symbol<"u"&&Symbol.toPrimitive!=null&&typeof J[Symbol.toPrimitive]=="function")return t.from(J[Symbol.toPrimitive]("string"),Z,F);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof J)}t.from=function(J,Z,F){return U(J,Z,F)},Object.setPrototypeOf(t.prototype,Uint8Array.prototype),Object.setPrototypeOf(t,Uint8Array);function f(J){if(typeof J!="number")throw new TypeError('"size" argument must be of type number');if(J<0)throw new RangeError('The value "'+J+'" is invalid for option "size"')}function h(J,Z,F){return f(J),J<=0?m(J):Z!==void 0?typeof F=="string"?m(J).fill(Z,F):m(J).fill(Z):m(J)}t.alloc=function(J,Z,F){return h(J,Z,F)};function r(J){return f(J),m(J<0?0:o(J)|0)}t.allocUnsafe=function(J){return r(J)},t.allocUnsafeSlow=function(J){return r(J)};function i(J,Z){if((typeof Z!="string"||Z==="")&&(Z="utf8"),!t.isEncoding(Z))throw new TypeError("Unknown encoding: "+Z);var F=u(J,Z)|0,T=m(F),M=T.write(J,Z);return M!==F&&(T=T.slice(0,M)),T}function a(J){for(var Z=J.length<0?0:o(J.length)|0,F=m(Z),T=0;T<Z;T+=1)F[T]=J[T]&255;return F}function s(J){if(We(J,Uint8Array)){var Z=new Uint8Array(J);return n(Z.buffer,Z.byteOffset,Z.byteLength)}return a(J)}function n(J,Z,F){if(Z<0||J.byteLength<Z)throw new RangeError('"offset" is outside of buffer bounds');if(J.byteLength<Z+(F||0))throw new RangeError('"length" is outside of buffer bounds');var T;return Z===void 0&&F===void 0?T=new Uint8Array(J):F===void 0?T=new Uint8Array(J,Z):T=new Uint8Array(J,Z,F),Object.setPrototypeOf(T,t.prototype),T}function c(J){if(t.isBuffer(J)){var Z=o(J.length)|0,F=m(Z);return F.length===0||J.copy(F,0,0,Z),F}if(J.length!==void 0)return typeof J.length!="number"||ve(J.length)?m(0):a(J);if(J.type==="Buffer"&&Array.isArray(J.data))return a(J.data)}function o(J){if(J>=S)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+S.toString(16)+" bytes");return J|0}function d(J){return+J!=J&&(J=0),t.alloc(+J)}t.isBuffer=function(Z){return Z!=null&&Z._isBuffer===!0&&Z!==t.prototype},t.compare=function(Z,F){if(We(Z,Uint8Array)&&(Z=t.from(Z,Z.offset,Z.byteLength)),We(F,Uint8Array)&&(F=t.from(F,F.offset,F.byteLength)),!t.isBuffer(Z)||!t.isBuffer(F))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(Z===F)return 0;for(var T=Z.length,M=F.length,Q=0,Y=Math.min(T,M);Q<Y;++Q)if(Z[Q]!==F[Q]){T=Z[Q],M=F[Q];break}return T<M?-1:M<T?1:0},t.isEncoding=function(Z){switch(String(Z).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},t.concat=function(Z,F){if(!Array.isArray(Z))throw new TypeError('"list" argument must be an Array of Buffers');if(Z.length===0)return t.alloc(0);var T;if(F===void 0)for(F=0,T=0;T<Z.length;++T)F+=Z[T].length;var M=t.allocUnsafe(F),Q=0;for(T=0;T<Z.length;++T){var Y=Z[T];if(We(Y,Uint8Array))Q+Y.length>M.length?t.from(Y).copy(M,Q):Uint8Array.prototype.set.call(M,Y,Q);else if(t.isBuffer(Y))Y.copy(M,Q);else throw new TypeError('"list" argument must be an Array of Buffers');Q+=Y.length}return M};function u(J,Z){if(t.isBuffer(J))return J.length;if(ArrayBuffer.isView(J)||We(J,ArrayBuffer))return J.byteLength;if(typeof J!="string")throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof J);var F=J.length,T=arguments.length>2&&arguments[2]===!0;if(!T&&F===0)return 0;for(var M=!1;;)switch(Z){case"ascii":case"latin1":case"binary":return F;case"utf8":case"utf-8":return Me(J).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return F*2;case"hex":return F>>>1;case"base64":return At(J).length;default:if(M)return T?-1:Me(J).length;Z=(""+Z).toLowerCase(),M=!0}}t.byteLength=u;function p(J,Z,F){var T=!1;if((Z===void 0||Z<0)&&(Z=0),Z>this.length||((F===void 0||F>this.length)&&(F=this.length),F<=0)||(F>>>=0,Z>>>=0,F<=Z))return"";for(J||(J="utf8");;)switch(J){case"hex":return O(this,Z,F);case"utf8":case"utf-8":return j(this,Z,F);case"ascii":return x(this,Z,F);case"latin1":case"binary":return C(this,Z,F);case"base64":return G(this,Z,F);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return B(this,Z,F);default:if(T)throw new TypeError("Unknown encoding: "+J);J=(J+"").toLowerCase(),T=!0}}t.prototype._isBuffer=!0;function g(J,Z,F){var T=J[Z];J[Z]=J[F],J[F]=T}t.prototype.swap16=function(){var Z=this.length;if(Z%2!==0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var F=0;F<Z;F+=2)g(this,F,F+1);return this},t.prototype.swap32=function(){var Z=this.length;if(Z%4!==0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var F=0;F<Z;F+=4)g(this,F,F+3),g(this,F+1,F+2);return this},t.prototype.swap64=function(){var Z=this.length;if(Z%8!==0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var F=0;F<Z;F+=8)g(this,F,F+7),g(this,F+1,F+6),g(this,F+2,F+5),g(this,F+3,F+4);return this},t.prototype.toString=function(){var Z=this.length;return Z===0?"":arguments.length===0?j(this,0,Z):p.apply(this,arguments)},t.prototype.toLocaleString=t.prototype.toString,t.prototype.equals=function(Z){if(!t.isBuffer(Z))throw new TypeError("Argument must be a Buffer");return this===Z?!0:t.compare(this,Z)===0},t.prototype.inspect=function(){var Z="",F=l.INSPECT_MAX_BYTES;return Z=this.toString("hex",0,F).replace(/(.{2})/g,"$1 ").trim(),this.length>F&&(Z+=" ... "),"<Buffer "+Z+">"},b&&(t.prototype[b]=t.prototype.inspect),t.prototype.compare=function(Z,F,T,M,Q){if(We(Z,Uint8Array)&&(Z=t.from(Z,Z.offset,Z.byteLength)),!t.isBuffer(Z))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof Z);if(F===void 0&&(F=0),T===void 0&&(T=Z?Z.length:0),M===void 0&&(M=0),Q===void 0&&(Q=this.length),F<0||T>Z.length||M<0||Q>this.length)throw new RangeError("out of range index");if(M>=Q&&F>=T)return 0;if(M>=Q)return-1;if(F>=T)return 1;if(F>>>=0,T>>>=0,M>>>=0,Q>>>=0,this===Z)return 0;for(var Y=Q-M,K=T-F,ee=Math.min(Y,K),H=this.slice(M,Q),L=Z.slice(F,T),z=0;z<ee;++z)if(H[z]!==L[z]){Y=H[z],K=L[z];break}return Y<K?-1:K<Y?1:0};function k(J,Z,F,T,M){if(J.length===0)return-1;if(typeof F=="string"?(T=F,F=0):F>2147483647?F=2147483647:F<-2147483648&&(F=-2147483648),F=+F,ve(F)&&(F=M?0:J.length-1),F<0&&(F=J.length+F),F>=J.length){if(M)return-1;F=J.length-1}else if(F<0)if(M)F=0;else return-1;if(typeof Z=="string"&&(Z=t.from(Z,T)),t.isBuffer(Z))return Z.length===0?-1:N(J,Z,F,T,M);if(typeof Z=="number")return Z=Z&255,typeof Uint8Array.prototype.indexOf=="function"?M?Uint8Array.prototype.indexOf.call(J,Z,F):Uint8Array.prototype.lastIndexOf.call(J,Z,F):N(J,[Z],F,T,M);throw new TypeError("val must be string, number or Buffer")}function N(J,Z,F,T,M){var Q=1,Y=J.length,K=Z.length;if(T!==void 0&&(T=String(T).toLowerCase(),T==="ucs2"||T==="ucs-2"||T==="utf16le"||T==="utf-16le")){if(J.length<2||Z.length<2)return-1;Q=2,Y/=2,K/=2,F/=2}function ee(ye,Ze){return Q===1?ye[Ze]:ye.readUInt16BE(Ze*Q)}var H;if(M){var L=-1;for(H=F;H<Y;H++)if(ee(J,H)===ee(Z,L===-1?0:H-L)){if(L===-1&&(L=H),H-L+1===K)return L*Q}else L!==-1&&(H-=H-L),L=-1}else for(F+K>Y&&(F=Y-K),H=F;H>=0;H--){for(var z=!0,te=0;te<K;te++)if(ee(J,H+te)!==ee(Z,te)){z=!1;break}if(z)return H}return-1}t.prototype.includes=function(Z,F,T){return this.indexOf(Z,F,T)!==-1},t.prototype.indexOf=function(Z,F,T){return k(this,Z,F,T,!0)},t.prototype.lastIndexOf=function(Z,F,T){return k(this,Z,F,T,!1)};function R(J,Z,F,T){F=Number(F)||0;var M=J.length-F;T?(T=Number(T),T>M&&(T=M)):T=M;var Q=Z.length;T>Q/2&&(T=Q/2);for(var Y=0;Y<T;++Y){var K=parseInt(Z.substr(Y*2,2),16);if(ve(K))return Y;J[F+Y]=K}return Y}function E(J,Z,F,T){return xe(Me(Z,J.length-F),J,F,T)}function y(J,Z,F,T){return xe(_t(Z),J,F,T)}function w(J,Z,F,T){return xe(At(Z),J,F,T)}function v(J,Z,F,T){return xe(Lt(Z,J.length-F),J,F,T)}t.prototype.write=function(Z,F,T,M){if(F===void 0)M="utf8",T=this.length,F=0;else if(T===void 0&&typeof F=="string")M=F,T=this.length,F=0;else if(isFinite(F))F=F>>>0,isFinite(T)?(T=T>>>0,M===void 0&&(M="utf8")):(M=T,T=void 0);else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");var Q=this.length-F;if((T===void 0||T>Q)&&(T=Q),Z.length>0&&(T<0||F<0)||F>this.length)throw new RangeError("Attempt to write outside buffer bounds");M||(M="utf8");for(var Y=!1;;)switch(M){case"hex":return R(this,Z,F,T);case"utf8":case"utf-8":return E(this,Z,F,T);case"ascii":case"latin1":case"binary":return y(this,Z,F,T);case"base64":return w(this,Z,F,T);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return v(this,Z,F,T);default:if(Y)throw new TypeError("Unknown encoding: "+M);M=(""+M).toLowerCase(),Y=!0}},t.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function G(J,Z,F){return Z===0&&F===J.length?e.fromByteArray(J):e.fromByteArray(J.slice(Z,F))}function j(J,Z,F){F=Math.min(J.length,F);for(var T=[],M=Z;M<F;){var Q=J[M],Y=null,K=Q>239?4:Q>223?3:Q>191?2:1;if(M+K<=F){var ee,H,L,z;switch(K){case 1:Q<128&&(Y=Q);break;case 2:ee=J[M+1],(ee&192)===128&&(z=(Q&31)<<6|ee&63,z>127&&(Y=z));break;case 3:ee=J[M+1],H=J[M+2],(ee&192)===128&&(H&192)===128&&(z=(Q&15)<<12|(ee&63)<<6|H&63,z>2047&&(z<55296||z>57343)&&(Y=z));break;case 4:ee=J[M+1],H=J[M+2],L=J[M+3],(ee&192)===128&&(H&192)===128&&(L&192)===128&&(z=(Q&15)<<18|(ee&63)<<12|(H&63)<<6|L&63,z>65535&&z<1114112&&(Y=z))}}Y===null?(Y=65533,K=1):Y>65535&&(Y-=65536,T.push(Y>>>10&1023|55296),Y=56320|Y&1023),T.push(Y),M+=K}return I(T)}var D=4096;function I(J){var Z=J.length;if(Z<=D)return String.fromCharCode.apply(String,J);for(var F="",T=0;T<Z;)F+=String.fromCharCode.apply(String,J.slice(T,T+=D));return F}function x(J,Z,F){var T="";F=Math.min(J.length,F);for(var M=Z;M<F;++M)T+=String.fromCharCode(J[M]&127);return T}function C(J,Z,F){var T="";F=Math.min(J.length,F);for(var M=Z;M<F;++M)T+=String.fromCharCode(J[M]);return T}function O(J,Z,F){var T=J.length;(!Z||Z<0)&&(Z=0),(!F||F<0||F>T)&&(F=T);for(var M="",Q=Z;Q<F;++Q)M+=xn[J[Q]];return M}function B(J,Z,F){for(var T=J.slice(Z,F),M="",Q=0;Q<T.length-1;Q+=2)M+=String.fromCharCode(T[Q]+T[Q+1]*256);return M}t.prototype.slice=function(Z,F){var T=this.length;Z=~~Z,F=F===void 0?T:~~F,Z<0?(Z+=T,Z<0&&(Z=0)):Z>T&&(Z=T),F<0?(F+=T,F<0&&(F=0)):F>T&&(F=T),F<Z&&(F=Z);var M=this.subarray(Z,F);return Object.setPrototypeOf(M,t.prototype),M};function X(J,Z,F){if(J%1!==0||J<0)throw new RangeError("offset is not uint");if(J+Z>F)throw new RangeError("Trying to access beyond buffer length")}t.prototype.readUintLE=t.prototype.readUIntLE=function(Z,F,T){Z=Z>>>0,F=F>>>0,T||X(Z,F,this.length);for(var M=this[Z],Q=1,Y=0;++Y<F&&(Q*=256);)M+=this[Z+Y]*Q;return M},t.prototype.readUintBE=t.prototype.readUIntBE=function(Z,F,T){Z=Z>>>0,F=F>>>0,T||X(Z,F,this.length);for(var M=this[Z+--F],Q=1;F>0&&(Q*=256);)M+=this[Z+--F]*Q;return M},t.prototype.readUint8=t.prototype.readUInt8=function(Z,F){return Z=Z>>>0,F||X(Z,1,this.length),this[Z]},t.prototype.readUint16LE=t.prototype.readUInt16LE=function(Z,F){return Z=Z>>>0,F||X(Z,2,this.length),this[Z]|this[Z+1]<<8},t.prototype.readUint16BE=t.prototype.readUInt16BE=function(Z,F){return Z=Z>>>0,F||X(Z,2,this.length),this[Z]<<8|this[Z+1]},t.prototype.readUint32LE=t.prototype.readUInt32LE=function(Z,F){return Z=Z>>>0,F||X(Z,4,this.length),(this[Z]|this[Z+1]<<8|this[Z+2]<<16)+this[Z+3]*16777216},t.prototype.readUint32BE=t.prototype.readUInt32BE=function(Z,F){return Z=Z>>>0,F||X(Z,4,this.length),this[Z]*16777216+(this[Z+1]<<16|this[Z+2]<<8|this[Z+3])},t.prototype.readIntLE=function(Z,F,T){Z=Z>>>0,F=F>>>0,T||X(Z,F,this.length);for(var M=this[Z],Q=1,Y=0;++Y<F&&(Q*=256);)M+=this[Z+Y]*Q;return Q*=128,M>=Q&&(M-=Math.pow(2,8*F)),M},t.prototype.readIntBE=function(Z,F,T){Z=Z>>>0,F=F>>>0,T||X(Z,F,this.length);for(var M=F,Q=1,Y=this[Z+--M];M>0&&(Q*=256);)Y+=this[Z+--M]*Q;return Q*=128,Y>=Q&&(Y-=Math.pow(2,8*F)),Y},t.prototype.readInt8=function(Z,F){return Z=Z>>>0,F||X(Z,1,this.length),this[Z]&128?(255-this[Z]+1)*-1:this[Z]},t.prototype.readInt16LE=function(Z,F){Z=Z>>>0,F||X(Z,2,this.length);var T=this[Z]|this[Z+1]<<8;return T&32768?T|4294901760:T},t.prototype.readInt16BE=function(Z,F){Z=Z>>>0,F||X(Z,2,this.length);var T=this[Z+1]|this[Z]<<8;return T&32768?T|4294901760:T},t.prototype.readInt32LE=function(Z,F){return Z=Z>>>0,F||X(Z,4,this.length),this[Z]|this[Z+1]<<8|this[Z+2]<<16|this[Z+3]<<24},t.prototype.readInt32BE=function(Z,F){return Z=Z>>>0,F||X(Z,4,this.length),this[Z]<<24|this[Z+1]<<16|this[Z+2]<<8|this[Z+3]},t.prototype.readFloatLE=function(Z,F){return Z=Z>>>0,F||X(Z,4,this.length),V.read(this,Z,!0,23,4)},t.prototype.readFloatBE=function(Z,F){return Z=Z>>>0,F||X(Z,4,this.length),V.read(this,Z,!1,23,4)},t.prototype.readDoubleLE=function(Z,F){return Z=Z>>>0,F||X(Z,8,this.length),V.read(this,Z,!0,52,8)},t.prototype.readDoubleBE=function(Z,F){return Z=Z>>>0,F||X(Z,8,this.length),V.read(this,Z,!1,52,8)};function _(J,Z,F,T,M,Q){if(!t.isBuffer(J))throw new TypeError('"buffer" argument must be a Buffer instance');if(Z>M||Z<Q)throw new RangeError('"value" argument is out of bounds');if(F+T>J.length)throw new RangeError("Index out of range")}t.prototype.writeUintLE=t.prototype.writeUIntLE=function(Z,F,T,M){if(Z=+Z,F=F>>>0,T=T>>>0,!M){var Q=Math.pow(2,8*T)-1;_(this,Z,F,T,Q,0)}var Y=1,K=0;for(this[F]=Z&255;++K<T&&(Y*=256);)this[F+K]=Z/Y&255;return F+T},t.prototype.writeUintBE=t.prototype.writeUIntBE=function(Z,F,T,M){if(Z=+Z,F=F>>>0,T=T>>>0,!M){var Q=Math.pow(2,8*T)-1;_(this,Z,F,T,Q,0)}var Y=T-1,K=1;for(this[F+Y]=Z&255;--Y>=0&&(K*=256);)this[F+Y]=Z/K&255;return F+T},t.prototype.writeUint8=t.prototype.writeUInt8=function(Z,F,T){return Z=+Z,F=F>>>0,T||_(this,Z,F,1,255,0),this[F]=Z&255,F+1},t.prototype.writeUint16LE=t.prototype.writeUInt16LE=function(Z,F,T){return Z=+Z,F=F>>>0,T||_(this,Z,F,2,65535,0),this[F]=Z&255,this[F+1]=Z>>>8,F+2},t.prototype.writeUint16BE=t.prototype.writeUInt16BE=function(Z,F,T){return Z=+Z,F=F>>>0,T||_(this,Z,F,2,65535,0),this[F]=Z>>>8,this[F+1]=Z&255,F+2},t.prototype.writeUint32LE=t.prototype.writeUInt32LE=function(Z,F,T){return Z=+Z,F=F>>>0,T||_(this,Z,F,4,4294967295,0),this[F+3]=Z>>>24,this[F+2]=Z>>>16,this[F+1]=Z>>>8,this[F]=Z&255,F+4},t.prototype.writeUint32BE=t.prototype.writeUInt32BE=function(Z,F,T){return Z=+Z,F=F>>>0,T||_(this,Z,F,4,4294967295,0),this[F]=Z>>>24,this[F+1]=Z>>>16,this[F+2]=Z>>>8,this[F+3]=Z&255,F+4},t.prototype.writeIntLE=function(Z,F,T,M){if(Z=+Z,F=F>>>0,!M){var Q=Math.pow(2,8*T-1);_(this,Z,F,T,Q-1,-Q)}var Y=0,K=1,ee=0;for(this[F]=Z&255;++Y<T&&(K*=256);)Z<0&&ee===0&&this[F+Y-1]!==0&&(ee=1),this[F+Y]=(Z/K>>0)-ee&255;return F+T},t.prototype.writeIntBE=function(Z,F,T,M){if(Z=+Z,F=F>>>0,!M){var Q=Math.pow(2,8*T-1);_(this,Z,F,T,Q-1,-Q)}var Y=T-1,K=1,ee=0;for(this[F+Y]=Z&255;--Y>=0&&(K*=256);)Z<0&&ee===0&&this[F+Y+1]!==0&&(ee=1),this[F+Y]=(Z/K>>0)-ee&255;return F+T},t.prototype.writeInt8=function(Z,F,T){return Z=+Z,F=F>>>0,T||_(this,Z,F,1,127,-128),Z<0&&(Z=255+Z+1),this[F]=Z&255,F+1},t.prototype.writeInt16LE=function(Z,F,T){return Z=+Z,F=F>>>0,T||_(this,Z,F,2,32767,-32768),this[F]=Z&255,this[F+1]=Z>>>8,F+2},t.prototype.writeInt16BE=function(Z,F,T){return Z=+Z,F=F>>>0,T||_(this,Z,F,2,32767,-32768),this[F]=Z>>>8,this[F+1]=Z&255,F+2},t.prototype.writeInt32LE=function(Z,F,T){return Z=+Z,F=F>>>0,T||_(this,Z,F,4,2147483647,-2147483648),this[F]=Z&255,this[F+1]=Z>>>8,this[F+2]=Z>>>16,this[F+3]=Z>>>24,F+4},t.prototype.writeInt32BE=function(Z,F,T){return Z=+Z,F=F>>>0,T||_(this,Z,F,4,2147483647,-2147483648),Z<0&&(Z=4294967295+Z+1),this[F]=Z>>>24,this[F+1]=Z>>>16,this[F+2]=Z>>>8,this[F+3]=Z&255,F+4};function q(J,Z,F,T,M,Q){if(F+T>J.length)throw new RangeError("Index out of range");if(F<0)throw new RangeError("Index out of range")}function se(J,Z,F,T,M){return Z=+Z,F=F>>>0,M||q(J,Z,F,4),V.write(J,Z,F,T,23,4),F+4}t.prototype.writeFloatLE=function(Z,F,T){return se(this,Z,F,!0,T)},t.prototype.writeFloatBE=function(Z,F,T){return se(this,Z,F,!1,T)};function ie(J,Z,F,T,M){return Z=+Z,F=F>>>0,M||q(J,Z,F,8),V.write(J,Z,F,T,52,8),F+8}t.prototype.writeDoubleLE=function(Z,F,T){return ie(this,Z,F,!0,T)},t.prototype.writeDoubleBE=function(Z,F,T){return ie(this,Z,F,!1,T)},t.prototype.copy=function(Z,F,T,M){if(!t.isBuffer(Z))throw new TypeError("argument should be a Buffer");if(T||(T=0),!M&&M!==0&&(M=this.length),F>=Z.length&&(F=Z.length),F||(F=0),M>0&&M<T&&(M=T),M===T||Z.length===0||this.length===0)return 0;if(F<0)throw new RangeError("targetStart out of bounds");if(T<0||T>=this.length)throw new RangeError("Index out of range");if(M<0)throw new RangeError("sourceEnd out of bounds");M>this.length&&(M=this.length),Z.length-F<M-T&&(M=Z.length-F+T);var Q=M-T;return this===Z&&typeof Uint8Array.prototype.copyWithin=="function"?this.copyWithin(F,T,M):Uint8Array.prototype.set.call(Z,this.subarray(T,M),F),Q},t.prototype.fill=function(Z,F,T,M){if(typeof Z=="string"){if(typeof F=="string"?(M=F,F=0,T=this.length):typeof T=="string"&&(M=T,T=this.length),M!==void 0&&typeof M!="string")throw new TypeError("encoding must be a string");if(typeof M=="string"&&!t.isEncoding(M))throw new TypeError("Unknown encoding: "+M);if(Z.length===1){var Q=Z.charCodeAt(0);(M==="utf8"&&Q<128||M==="latin1")&&(Z=Q)}}else typeof Z=="number"?Z=Z&255:typeof Z=="boolean"&&(Z=Number(Z));if(F<0||this.length<F||this.length<T)throw new RangeError("Out of range index");if(T<=F)return this;F=F>>>0,T=T===void 0?this.length:T>>>0,Z||(Z=0);var Y;if(typeof Z=="number")for(Y=F;Y<T;++Y)this[Y]=Z;else{var K=t.isBuffer(Z)?Z:t.from(Z,M),ee=K.length;if(ee===0)throw new TypeError('The value "'+Z+'" is invalid for argument "value"');for(Y=0;Y<T-F;++Y)this[Y+F]=K[Y%ee]}return this};var de=/[^+/0-9A-Za-z-_]/g;function Re(J){if(J=J.split("=")[0],J=J.trim().replace(de,""),J.length<2)return"";for(;J.length%4!==0;)J=J+"=";return J}function Me(J,Z){Z=Z||1/0;for(var F,T=J.length,M=null,Q=[],Y=0;Y<T;++Y){if(F=J.charCodeAt(Y),F>55295&&F<57344){if(!M){if(F>56319){(Z-=3)>-1&&Q.push(239,191,189);continue}else if(Y+1===T){(Z-=3)>-1&&Q.push(239,191,189);continue}M=F;continue}if(F<56320){(Z-=3)>-1&&Q.push(239,191,189),M=F;continue}F=(M-55296<<10|F-56320)+65536}else M&&(Z-=3)>-1&&Q.push(239,191,189);if(M=null,F<128){if((Z-=1)<0)break;Q.push(F)}else if(F<2048){if((Z-=2)<0)break;Q.push(F>>6|192,F&63|128)}else if(F<65536){if((Z-=3)<0)break;Q.push(F>>12|224,F>>6&63|128,F&63|128)}else if(F<1114112){if((Z-=4)<0)break;Q.push(F>>18|240,F>>12&63|128,F>>6&63|128,F&63|128)}else throw new Error("Invalid code point")}return Q}function _t(J){for(var Z=[],F=0;F<J.length;++F)Z.push(J.charCodeAt(F)&255);return Z}function Lt(J,Z){for(var F,T,M,Q=[],Y=0;Y<J.length&&!((Z-=2)<0);++Y)F=J.charCodeAt(Y),T=F>>8,M=F%256,Q.push(M),Q.push(T);return Q}function At(J){return e.toByteArray(Re(J))}function xe(J,Z,F,T){for(var M=0;M<T&&!(M+F>=Z.length||M>=J.length);++M)Z[M+F]=J[M];return M}function We(J,Z){return J instanceof Z||J!=null&&J.constructor!=null&&J.constructor.name!=null&&J.constructor.name===Z.name}function ve(J){return J!==J}var xn=function(){for(var J="0123456789abcdef",Z=new Array(256),F=0;F<16;++F)for(var T=F*16,M=0;M<16;++M)Z[T+M]=J[F]+J[M];return Z}()})(cr);/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */(function(l,e){var V=cr,b=V.Buffer;function S(m,t){for(var U in m)t[U]=m[U]}b.from&&b.alloc&&b.allocUnsafe&&b.allocUnsafeSlow?l.exports=V:(S(V,e),e.Buffer=W);function W(m,t,U){return b(m,t,U)}W.prototype=Object.create(b.prototype),S(b,W),W.from=function(m,t,U){if(typeof m=="number")throw new TypeError("Argument must not be a number");return b(m,t,U)},W.alloc=function(m,t,U){if(typeof m!="number")throw new TypeError("Argument must be a number");var f=b(m);return t!==void 0?typeof U=="string"?f.fill(t,U):f.fill(t):f.fill(0),f},W.allocUnsafe=function(m){if(typeof m!="number")throw new TypeError("Argument must be a number");return b(m)},W.allocUnsafeSlow=function(m){if(typeof m!="number")throw new TypeError("Argument must be a number");return V.SlowBuffer(m)}})(ln,ln.exports);var Ys=ln.exports,Vn=65536,Cs=4294967295;function js(){throw new Error(`Secure random number generation is not supported by this browser.
Use Chrome, Firefox or Internet Explorer 11`)}var Is=Ys.Buffer,Xt=Ge.crypto||Ge.msCrypto;Xt&&Xt.getRandomValues?on.exports=Xs:on.exports=js;function Xs(l,e){if(l>Cs)throw new RangeError("requested too many random bytes");var V=Is.allocUnsafe(l);if(l>0)if(l>Vn)for(var b=0;b<l;b+=Vn)Xt.getRandomValues(V.slice(b,b+Vn));else Xt.getRandomValues(V);return typeof e=="function"?process.nextTick(function(){e(null,V)}):V}var Bs=on.exports;const Vr=Bs;let Be=class Ar{constructor(e,V){this.ufrag=e,this.pwd=V,this.lite=!1,this.endOfCandidates=!1}clone(){const e=new Ar(this.ufrag,this.pwd);return e.setLite(this.lite),e.setEndOfCandidates(this.endOfCandidates),e}plain(){const e={ufrag:this.ufrag,pwd:this.pwd};return this.lite&&(e.lite=this.lite),this.endOfCandidates&&(e.endOfCandidates=this.endOfCandidates),e}getUfrag(){return this.ufrag}getPwd(){return this.pwd}isLite(){return this.lite}setLite(e){this.lite=e}isEndOfCandidates(){return this.endOfCandidates}setEndOfCandidates(e){this.endOfCandidates=e}};Be.generate=function(l){const e=new Be,V=Vr(8),b=Vr(24);return e.ufrag=V.toString("hex"),e.pwd=b.toString("hex"),e.lite=l,e},Be.expand=function(l){if(l.constructor.name==="ICEInfo")return l;l=l;const e=new Be(l.ufrag,l.pwd);return e.setLite(l.lite),e.setEndOfCandidates(l.endOfCandidates),e},Be.clone=function(l){return l.constructor.name==="ICEInfo"?l.clone():Be.expand(l)};var ur=Be;const ge=rn("SEND","RECV");ge.byValue=function(l){return ge[l.toUpperCase()]},ge.toString=function(l){switch(l){case ge.SEND:return"send";case ge.RECV:return"recv"}},ge.reverse=function(l){switch(l){case ge.SEND:return ge.RECV;case ge.RECV:return ge.SEND}};var Bt=ge;const hr=Bt;let mt=class Pr{constructor(e,V){this.id=e,this.direction=V,this.formats=[],this.params=new Map}clone(){var e=new Pr(this.id,this.direction);return e.setFormats(this.formats),e.setParams(this.params),e}plain(){var e={id:this.id,direction:hr.toString(this.direction)};this.formats&&(e.formats=this.formats);for(var[V,b]of this.params.entries())e.params||(e.params={}),e.params[V]=b;return e}getId(){return this.id}getDirection(){return this.direction}setDirection(e){this.direction=e}getFormats(){return this.formats}setFormats(e){this.formats=[];for(let V=0;V<e.length;++V)this.formats.push(parseInt(e[V]))}getParams(){return this.params}setParams(e){this.params=new Map(e)}addParam(e,V){this.params.set(e,V)}};mt.expand=function(l){if(l.constructor.name==="RIDInfo")return l;l=l;const e=new mt(l.id,hr.byValue(l.direction));for(const[V,b]of Object.entries(l.params||{}))e.addParam(V,b);return l.formats&&e.setFormats(l.formats),e},mt.clone=function(l){return l.constructor.name==="RIDInfo"?l.clone():mt.expand(l)};var un=mt;let pt=class Kr{constructor(e,V){this.paused=V,this.id=e}clone(){return new Kr(this.id,this.paused)}plain(){return{id:this.id,paused:this.paused}}isPaused(){return this.paused}getId(){return this.id}};pt.expand=function(l){return l.constructor.name==="SimulcastStreamInfo"?l:(l=l,new pt(l.id,l.paused))},pt.clone=function(l){return l.constructor.name==="SimulcastStreamInfo"?l.clone():pt.expand(l)};var hn=pt;const mr=hn,ze=Bt;let Rt=class $r{constructor(){this.send=[],this.recv=[]}clone(){const e=new $r;for(const V of this.send)e.addSimulcastAlternativeStreams(ze.SEND,V.map(b=>b.clone()));for(const V of this.recv)e.addSimulcastAlternativeStreams(ze.RECV,V.map(b=>b.clone()));return e}plain(){const e={send:[],recv:[]};for(const V of this.send)e.send.push(V.map(b=>b.plain()));for(const V of this.recv)e.recv.push(V.map(b=>b.plain()));return e}addSimulcastAlternativeStreams(e,V){return e===ze.SEND?this.send.push(V):this.recv.push(V)}addSimulcastStream(e,V){return e===ze.SEND?this.send.push([V]):this.recv.push([V])}getSimulcastStreams(e){return e===ze.SEND?this.send:this.recv}};Rt.expand=function(l){if(l.constructor.name==="SimulcastInfo")return l;l=l;const e=new Rt;for(const V of l.send||[])e.addSimulcastAlternativeStreams(ze.SEND,V.map(mr.expand));for(const V of l.recv||[])e.addSimulcastAlternativeStreams(ze.RECV,V.map(mr.expand));return e},Rt.clone=function(l){return l.constructor.name==="SimulcastInfo"?l.clone():Rt.expand(l)};var mn=Rt;const he=rn("SENDRECV","SENDONLY","RECVONLY","INACTIVE");he.byValue=function(l){return he[l.toUpperCase()]},he.toString=function(l){switch(l){case he.SENDRECV:return"sendrecv";case he.SENDONLY:return"sendonly";case he.RECVONLY:return"recvonly";case he.INACTIVE:return"inactive"}},he.reverse=function(l){switch(l){case he.SENDRECV:return he.SENDRECV;case he.SENDONLY:return he.RECVONLY;case he.RECVONLY:return he.SENDONLY;case he.INACTIVE:return he.INACTIVE}};var pn=he;let ft=class qr{constructor(e,V){this.port=e,this.maxMessageSize=V}clone(){return new qr(this.port,this.maxMessageSize)}plain(){return{port:this.port,maxMessageSize:this.maxMessageSize}}getPort(){return this.port}getMaxMessageSize(){return this.maxMessageSize}};ft.expand=function(l){return l.constructor.name==="DataChannelInfo"?l:(l=l,new ft(l.port,l.maxMessageSize))},ft.clone=function(l){return l.constructor.name==="DataChannelInfo"?l.clone():ft.expand(l)};var Rn=ft;const fn=jt,zs=un,pr=mn,Ke=pn,Ut=Bt,Rr=Rn;let De=class Gn{constructor(e,V){this.id=e,this.type=V,this.direction=Ke.SENDRECV,this.extensions=new Map,this.codecs=new Map,this.rids=new Map,this.simulcast=null,this.bitrate=0,this.control=null,this.dataChannel=null}clone(){const e=new Gn(this.id,this.type);e.setDirection(this.direction),e.setBitrate(this.bitrate);for(const V of this.codecs.values())e.addCodec(V.clone());for(const[V,b]of this.extensions.entries())e.addExtension(V,b);for(const V of this.rids.values())e.addRID(V.clone());return this.simulcast&&e.setSimulcast(this.simulcast.clone()),this.control&&e.setControl(this.control),this.dataChannel&&e.setDataChannel(this.dataChannel.clone()),e}plain(){const e={id:this.id,type:this.type,direction:Ke.toString(this.direction),codecs:[]};this.dataChannel&&(e.dataChannel=this.dataChannel.plain()),this.bitrate&&(e.bitrate=this.bitrate);for(const V of this.codecs.values())e.codecs.push(V.plain());for(const[V,b]of this.extensions.entries())e.extensions||(e.extensions={}),e.extensions[V]=b;for(const V of this.rids.values())e.rids||(e.rids=[]),e.rids.push(V.plain());return this.simulcast&&(e.simulcast=this.simulcast.plain()),this.control&&(e.control=this.control),e}getType(){return this.type}getId(){return this.id}setId(e){this.id=e}addExtension(e,V){this.extensions.set(e,V)}addRID(e){this.rids.set(e.getId(),e)}addCodec(e){this.codecs.set(e.getType(),e)}setCodecs(e){this.codecs=e}getCodecForType(e){return this.codecs.get(e)}getCodec(e){for(const V of this.codecs.values())if(V.getCodec().toLowerCase()===e.toLowerCase())return V;return null}hasCodec(e){return this.getCodec(e)!==null}getCodecs(){return this.codecs}hasRTX(){for(const e of this.codecs.values())if(e.hasRTX())return!0;return!1}getExtensions(){return this.extensions}getRIDs(){return this.rids}getRID(e){return this.rids.get(e)}getBitrate(){return this.bitrate}setBitrate(e){this.bitrate=e}getDirection(){return this.direction}setDirection(e){this.direction=e}hasControl(){return!!this.control}getControl(){return this.control}setControl(e){this.control=e}hasDataChannel(){return!!this.dataChannel}getDataChannel(){return this.dataChannel}setDataChannel(e){this.dataChannel=e}answer(e){const V=new Gn(this.id,this.type);if(e){V.setDirection(Ke.reverse(this.direction));const{codecs:b,dataChannel:S}=e;if(b){let m;Array.isArray(b)?m=fn.MapFromNames(b,e.rtx,e.rtcpfbs):m=b;for(let t of this.codecs.values())for(let U of m.values()){if(U.getCodec().toLowerCase()!==t.getCodec().toLowerCase()||U.getCodec()==="h264"&&U.hasParam("packetization-mode")&&U.getParam("packetization-mode")!=t.getParam("packetization-mode","0")||U.getCodec()==="h264"&&U.hasParam("profile-level-id")&&t.hasParam("profile-level-id")&&U.getParam("profile-level-id")!=t.getParam("profile-level-id")||U.getCodec()==="multiopus"&&U.hasParam("num_streams")&&t.hasParam("num_streams")&&U.getParam("num_streams")!=t.getParam("num_streams"))continue;const f=U.clone();f.setType(t.getType()),f.hasRTX()&&f.setRTX(t.getRTX()),t.hasChannels()&&f.setChannels(t.getChannels()),f.addParams(t.getParams()),V.addCodec(f);break}}const W=new Set(e.extensions);for(let[m,t]of this.extensions)W.has(t)&&V.addExtension(m,t);if(e.simulcast&&this.simulcast){const m=new pr,t=this.simulcast.getSimulcastStreams(Ut.SEND);if(t)for(const f of t){const h=f.map(r=>r.clone());m.addSimulcastAlternativeStreams(Ut.RECV,h)}const U=this.simulcast.getSimulcastStreams(Ut.RECV);if(U)for(const f of U){const h=f.map(r=>r.clone());m.addSimulcastAlternativeStreams(Ut.SEND,h)}for(const f of this.rids.values()){const h=f.clone();h.setDirection(Ut.reverse(f.getDirection())),V.addRID(h)}V.setSimulcast(m)}if(S&&this.dataChannel){const m=new Rr(this.dataChannel.getPort(),S.maxMessageSize?S.maxMessageSize:this.dataChannel.getMaxMessageSize());V.setDataChannel(m)}}else V.setDirection(Ke.INACTIVE);return V}getSimulcast(){return this.simulcast}setSimulcast(e){this.simulcast=e}};De.create=function(l,e){const V=new De(l,l);if(e){const{codecs:b}=e;b&&(Array.isArray(b)?V.setCodecs(fn.MapFromNames(b,e.rtx,e.rtcpfbs)):V.setCodecs(b))}else V.setDirection(Ke.INACTIVE);return V},De.expand=function(l){if(l.constructor.name==="MediaInfo")return l;l=l;const e=new De(l.id,l.type);if(l.direction&&e.setDirection(Ke.byValue(l.direction)),e.setBitrate(l.bitrate),l.dataChannel){const V=Rr.expand(l.dataChannel);V&&e.setDataChannel(V)}for(const[V,b]of Object.entries(l.extensions))e.addExtension(Ds(V),b);for(const V of l.codecs){const b=fn.expand(V);b&&e.addCodec(b)}for(const V of l.rids||[]){const b=zs.expand(V);e.addRID(b)}return l.simulcast&&e.setSimulcast(pr.expand(l.simulcast)),l.control&&e.setControl(l.control),e},De.clone=function(l){return l.constructor.name==="MediaInfo"?l.clone():De.expand(l)};function Ds(l){const e=l.toString();if(!/^\d+$/.test(e))throw new Error(`invalid integer ${e}`);return parseInt(e)}var fr=De;let Wt=class es{constructor(e,V){this.semantics=e,this.ssrcs=[];for(let b=0;b<V.length;++b)this.ssrcs.push(parseInt(V[b]))}clone(){return new es(this.semantics,this.ssrcs)}plain(){const e={semantics:this.semantics,ssrcs:[]};for(let V=0;V<this.ssrcs.length;++V)e.ssrcs.push(this.ssrcs[V]);return e}getSemantics(){return this.semantics}getSSRCs(){return this.ssrcs}};Wt.expand=function(l){return l.constructor.name==="SourceGroupInfo"?l:(l=l,new Wt(l.semantics,l.ssrcs))},Wt.clone=function(l){return l.constructor.name==="SourceGroupInfo"?l.clone():Wt.expand(l)};var Un=Wt;let Zt=class ts{constructor(e){this.ssrc=e}clone(){const e=new ts(this.ssrc);return e.setCName(this.cname),e.setStreamId(this.streamId),e.setTrackId(this.trackId),e}plain(){const e={ssrc:this.ssrc};return this.cname&&(e.cname=this.cname),this.streamId&&(e.streamId=this.streamId),this.trackId&&(e.trackId=this.trackId),e}getCName(){return this.cname}setCName(e){this.cname=e}getStreamId(){return this.streamId}setStreamId(e){this.streamId=e}getTrackId(){return this.trackId}setTrackId(e){this.trackId=e}getSSRC(){return this.ssrc}};Zt.expand=function(l){if(l.constructor.name==="SourceInfo")return l;l=l;const e=new Zt(l.ssrc);return e.setCName(l.cname),e.setStreamId(l.streamId),e.setTrackId(l.trackId),e},Zt.clone=function(l){return l.constructor.name==="SourceInfo"?l.clone():Zt.expand(l)};var Ur=Zt;const Os=jt;let bt=class ns{constructor(e,V=!1){this.id=e,this.paused=V,this.codecs=new Map,this.params=new Map}clone(){var e=new ns(this.id,this.paused);for(let V of this.codecs.values())e.addCodec(V.clone());return e.setParams(this.params),e}plain(){var e={id:this.id,paused:this.paused,codecs:{},params:{}};for(var[V,b]of this.codecs.entries())e.codecs[V]=b.plain();for(var[V,S]of this.params.entries())e.params[V]=S;return e}getId(){return this.id}getCodecs(){return this.codecs}addCodec(e){this.codecs.set(e.getType(),e)}getParams(){return this.params}setParams(e){this.params=new Map(e)}addParam(e,V){this.params.set(e,V)}isPaused(){return this.paused}};bt.expand=function(l){if(l.constructor.name==="TrackEncodingInfo")return l;l=l;const e=new bt(l.id,l.paused);for(const V of Object.values(l.codecs||{}))e.addCodec(Os.expand(V));for(const[V,b]of Object.entries(l.params||{}))e.addParam(V,b);return e},bt.clone=function(l){return l.constructor.name==="TrackEncodingInfo"?l.clone():bt.expand(l)};var Wn=bt;const Hs=Un,_s=Wn;let Ft=class rs{constructor(e,V){this.media=e,this.id=V,this.ssrcs=[],this.groups=[],this.encodings=[]}clone(){const e=new rs(this.media,this.id);this.mediaId&&e.setMediaId(this.mediaId);for(let V=0;V<this.ssrcs.length;++V)e.addSSRC(this.ssrcs[V]);for(let V=0;V<this.groups.length;++V)e.addSourceGroup(this.groups[V].clone());for(let V=0;V<this.encodings.length;++V){const b=[];for(let S=0;S<this.encodings[V].length;++S)b.push(this.encodings[V][S].clone());e.addAlternativeEncodings(b)}return e}plain(){const e={media:this.media,id:this.id,ssrcs:[]};this.mediaId&&(e.mediaId=this.mediaId);for(let V=0;V<this.ssrcs.length;++V)e.ssrcs.push(this.ssrcs[V]);for(let V=0;V<this.groups.length;++V)e.groups||(e.groups=[]),e.groups.push(this.groups[V].plain());for(let V=0;V<this.encodings.length;++V){const b=[];for(let S=0;S<this.encodings[V].length;++S)b.push(this.encodings[V][S].plain());b.length&&(e.encodings||(e.encodings=[]),e.encodings.push(b))}return e}getMedia(){return this.media}setMediaId(e){this.mediaId=e}getMediaId(){return this.mediaId}getId(){return this.id}addSSRC(e){this.ssrcs.push(e)}getSSRCs(){return this.ssrcs}addSourceGroup(e){this.groups.push(e)}getSourceGroup(e){for(const V of this.groups)if(V.getSemantics().toLowerCase()===e.toLowerCase())return V;return null}getSourceGroups(){return this.groups}hasSourceGroup(e){for(const V of this.groups)if(V.getSemantics().toLowerCase()===e.toLowerCase())return!0;return!1}getEncodings(){return this.encodings}addEncoding(e){this.encodings.push([e])}addAlternativeEncodings(e){this.encodings.push(e)}setEncodings(e){this.encodings=e}};Ft.expand=function(l){if(l.constructor.name==="TrackInfo")return l;l=l;const e=new Ft(l.media,l.id);l.mediaId&&e.setMediaId(l.mediaId);for(const V of l.ssrcs||[])e.addSSRC(V);for(const V of l.groups||[])e.addSourceGroup(Hs.expand(V));for(const V of l.encodings||[]){const b=[];for(const S of V)b.push(_s.expand(S));e.addAlternativeEncodings(b)}return e},Ft.clone=function(l){return l.constructor.name==="TrackInfo"?l.clone():Ft.expand(l)};var Zn=Ft;const Ls=Zn;let gt=class ss{constructor(e){this.id=e,this.tracks=new Map}clone(){const e=new ss(this.id);for(const V of this.tracks.values())e.addTrack(V.clone());return e}plain(){const e={id:this.id,tracks:[]};for(const V of this.tracks.values())e.tracks.push(V.plain());return e}getId(){return this.id}addTrack(e){this.tracks.set(e.getId(),e)}removeTrack(e){return this.tracks.delete(e.getId())}removeTrackById(e){return this.tracks.delete(e)}getFirstTrack(e){for(let V of this.tracks.values())if(V.getMedia().toLowerCase()===e.toLowerCase())return V;return null}getTracks(){return this.tracks}removeAllTracks(){this.tracks.clear()}getTrack(e){return this.tracks.get(e)}};gt.expand=function(l){if(l.constructor.name==="StreamInfo")return l;l=l;const e=new gt(l.id);for(const V of l.tracks||[]){const b=Ls.expand(V);b&&e.addTrack(b)}return e},gt.clone=function(l){return l.constructor.name==="StreamInfo"?l.clone():gt.expand(l)};var Wr=gt;const $e=we,Se=Ns("en-US"),qe=ir,As=jt,Ps=tn,et=or,tt=lr,Oe=ur,bn=fr,Fn=sn,gn=pn,He=Bt,Ks=Un,$s=Ur,zt=Wr,Sn=Zn,qs=Wn,ei=mn,Zr=hn,ti=un,ni=Rn;let Ee=class Pt{constructor(e){this.version=e||1,this.streams=new Map,this.medias=new Array,this.candidates=new Array,this.ice=null,this.dtls=null,this.crypto=null,this.extmapAllowMixed=!0}clone(){const e=new Pt(this.version);for(const V of this.medias)e.addMedia(V.clone());for(const V of this.streams.values())e.addStream(V.clone());for(const V of this.candidates)e.addCandidate(V.clone());return e.setICE(this.ice.clone()),this.dtls&&e.setDTLS(this.dtls.clone()),this.crypto&&e.setCrypto(this.crypto.clone()),e.setExtmapAllowMixed(this.extmapAllowMixed),e}plain(){const e={version:this.version,streams:[],medias:[],candidates:[]};for(const V of this.medias)e.medias.push(V.plain());for(const V of this.streams.values())e.streams.push(V.plain());for(const V of this.candidates)e.candidates.push(V.plain());return this.ice&&(e.ice=this.ice.plain()),this.dtls&&(e.dtls=this.dtls.plain()),this.crypto&&(e.crypto=this.crypto.plain()),this.extmapAllowMixed||(e.extmapAllowMixedNotSupported=!this.extmapAllowMixed),e}unify(){const e=new Pt(this.version);for(const b of this.medias)e.addMedia(b.clone());const V={audio:e.getMediasByType("audio"),video:e.getMediasByType("video")};for(const b of this.streams.values()){const S=b.clone();for(const W of S.getTracks().values()){let m=V[W.getMedia()].pop();m||(m=this.getMedia(W.getMedia()).clone(),m.setId(W.getId()),e.addMedia(m)),W.setMediaId(m.getId())}e.addStream(S)}for(const b of this.candidates)e.addCandidate(b.clone());return this.ice&&e.setICE(this.ice.clone()),this.dtls&&e.setDTLS(this.dtls.clone()),this.crypto&&e.setCrypto(this.crypto.clone()),e}setVersion(e){this.version=e}addMedia(e){this.medias.push(e)}getMedia(e){for(let V in this.medias){let b=this.medias[V];if(Se(b.getType(),e))return b}return null}getMediasByType(e){let V=[];for(let b in this.medias){let S=this.medias[b];Se(S.getType(),e)&&V.push(S)}return V}getMediaById(e){for(const V of this.medias)if(Se(V.getId(),e))return V;return null}replaceMedia(e){for(let V in this.medias)if(this.medias[V].getId()==e.getId())return this.medias[V]=e,!0;return!1}getMedias(){return this.medias}getVersion(){return this.version}getDTLS(){return this.dtls}setDTLS(e){this.dtls=e}hasCrypto(){return!!this.crypto}getCrypto(){return this.crypto}setCrypto(e){this.crypto=e}hasICE(){return!!this.ice}getICE(){return this.ice}setICE(e){this.ice=e}addCandidate(e){for(const V of this.candidates)if(V.equals(e))return;this.candidates.push(e)}addCandidates(e){for(const V of e)this.addCandidate(V)}getCandidates(){return this.candidates}getStream(e){return this.streams.get(e)}getStreams(){return this.streams}getFirstStream(){for(const e of this.streams.values())return e;return null}addStream(e){this.streams.set(e.getId(),e)}removeStream(e){return this.streams.delete(e.getId())}removeAllStreams(){this.streams.clear()}getTrackByMediaId(e){for(const V of this.streams.values())for(const[b,S]of V.getTracks())if(S.getMediaId()==e)return S;return null}getStreamByMediaId(e){for(const V of this.streams.values())for(const[b,S]of V.getTracks())if(S.getMediaId()==e)return V;return null}getExtmapAllowMixed(){return this.extmapAllowMixed}setExtmapAllowMixed(e){this.extmapAllowMixed=e}answer(e){const V=new Pt;e.ice&&(e.ice instanceof Oe?V.setICE(e.ice.clone()):V.setICE(Oe.expand(e.ice))),e.dtls&&(e.dtls instanceof et?V.setDTLS(e.dtls):V.setDTLS(et.expand(e.dtls))),e.crypto&&(e.crypto instanceof tt?V.setCrypto(e.crypto):V.setCrypto(tt.expand(e.crypto)));for(let b=0;e.candidates&&b<e.candidates.length;++b)e.candidates[b]instanceof qe?V.addCandidate(e.candidates[b].clone()):V.addCandidate(qe.expand(e.candidates[b]));for(const b of this.medias){const S=e&&e.capabilities&&e.capabilities[b.getType()];V.addMedia(b.answer(S))}return V.setExtmapAllowMixed(this.extmapAllowMixed),V}toString(){let e={version:0,media:[]};e.version=0,e.origin={username:"-",sessionId:new Date().getTime(),sessionVersion:this.version,netType:"IN",ipVer:4,address:"127.0.0.1"},e.name="semantic-sdp",e.connection={version:4,ip:"0.0.0.0"},e.timing={start:0,stop:0},this.hasICE()&&this.getICE().isLite()&&(e.icelite="ice-lite"),e.msidSemantic={semantic:"WMS",token:"*"},e.groups=[],this.extmapAllowMixed&&(e.extmapAllowMixed="extmap-allow-mixed");const V=[];for(const S of this.medias){let W={type:S.getType(),port:9,protocol:"",fmtp:[],rtp:[],rtcpFb:[],ext:[],bandwidth:[],candidates:[],ssrcGroups:[],ssrcs:[],rids:[]};W.direction=gn.toString(S.getDirection()),this.extmapAllowMixed&&(W.extmapAllowMixed="extmap-allow-mixed"),W.mid=S.getId(),V.push(S.getId()),S.hasControl()&&(W.control=S.getControl()),S.getBitrate()>0&&(W.bandwidth.push({type:"AS",limit:S.getBitrate()}),W.bandwidth.push({type:"TIAS",limit:S.getBitrate()*1e3}));let m=this.getCandidates();for(const t of m)W.candidates.push({foundation:t.getFoundation(),component:t.getComponentId(),transport:t.getTransport(),priority:t.getPriority(),ip:t.getAddress(),port:t.getPort(),type:t.getType(),raddr:t.getRelAddr(),rport:t.getRelPort()});if(this.getICE()&&(W.iceUfrag=this.getICE().getUfrag(),W.icePwd=this.getICE().getPwd()),Se("audio",S.getType())||Se("video",S.getType())){W.rtcpMux="rtcp-mux",W.rtcpRsize="rtcp-rsize",this.getDTLS()?(W.protocol="UDP/TLS/RTP/SAVPF",W.fingerprint={type:this.getDTLS().getHash(),hash:this.getDTLS().getFingerprint()},W.setup=Fn.toString(this.getDTLS().getSetup())):this.getCrypto()?(W.protocol="RTP/SAVPF",W.crypto=[{id:this.getCrypto().getTag(),suite:this.getCrypto().getSuite(),config:this.getCrypto().getKeyParams()}]):W.protocol="RTP/AVP";for(const f of S.getCodecs().values()){Se("video",S.getType())?W.rtp.push({payload:f.getType(),codec:f.getCodec().toUpperCase(),rate:9e4}):Se("opus",f.getCodec())?W.rtp.push({payload:f.getType(),codec:f.getCodec(),rate:48e3,encoding:f.getChannels()}):Se("multiopus",f.getCodec())?W.rtp.push({payload:f.getType(),codec:f.getCodec(),rate:48e3,encoding:f.getChannels()}):W.rtp.push({payload:f.getType(),codec:f.getCodec(),rate:8e3});for(const r of f.getRTCPFeedbacks())W.rtcpFb.push({payload:f.getType(),type:r.getId(),subtype:r.getParams().join(" ")});f.hasRTX()&&(W.rtp.push({payload:f.getRTX(),codec:"rtx",rate:9e4}),W.fmtp.push({payload:f.getRTX(),config:"apt="+f.getType()}));const h=f.getParams();if(Object.keys(h).length){const r={payload:f.getType(),config:""};for(const i in h)r.config.length&&(r.config+=";"),Object.hasOwnProperty.call(h,i)?r.config+=i+"="+h[i]:r.config+=i;W.fmtp.push(r)}}const t=[];for(const f of W.rtp)t.push(f.payload);W.payloads=t.join(" ");for(let[f,h]of S.getExtensions().entries())W.ext.push({value:f,uri:h});for(let f of S.getRIDs().values()){let h={id:f.getId(),direction:He.toString(f.getDirection()),params:""};f.getFormats().length&&(h.params="pt="+f.getFormats().join(","));for(let[r,i]of f.getParams().entries())h.params+=(h.params.length?";":"")+r+"="+i;W.rids.push(h)}const U=S.getSimulcast();if(U){let f=1;W.simulcast={};const h=U.getSimulcastStreams(He.SEND),r=U.getSimulcastStreams(He.RECV);if(h&&h.length){let i="";for(const a of h){let s="";for(const n of a)s+=(s.length?",":"")+(n.isPaused()?"~":"")+n.getId();i+=(i.length?";":"")+s}W.simulcast["dir"+f]="send",W.simulcast["list"+f]=i,f++}if(r&&r.length){let i="";for(const a of r){let s="";for(const n of a)s+=(s.length?",":"")+(n.isPaused()?"~":"")+n.getId();i+=(i.length?";":"")+s}W.simulcast["dir"+f]="recv",W.simulcast["list"+f]=i,f++}}}else if(S.hasDataChannel()){W.protocol="UDP/DTLS/SCTP",W.payloads="webrtc-datachannel";const t=S.getDataChannel();W.sctpPort=t.getPort(),W.maxMessageSize=t.getMaxMessageSize()}e.media.push(W)}for(let S of this.streams.values())for(let W of S.getTracks().values())for(let m in e.media){let t=e.media[m];if(W.getMediaId()){if(W.getMediaId()==t.mid){let U=W.getSourceGroups();for(let h in U){let r=U[h];t.ssrcGroups.push({semantics:r.getSemantics(),ssrcs:r.getSSRCs().join(" ")})}let f=W.getSSRCs();for(let h in f)t.ssrcs.push({id:f[h],attribute:"cname",value:S.getId()}),t.ssrcs.push({id:f[h],attribute:"msid",value:S.getId()+" "+W.getId()});t.msid=S.getId()+" "+W.getId();break}}else if(Se(t.type,W.getMedia())){let U=W.getSourceGroups();for(let h in U){let r=U[h];t.ssrcGroups.push({semantics:r.getSemantics(),ssrcs:r.getSSRCs().join(" ")})}let f=W.getSSRCs();for(let h in f)t.ssrcs.push({id:f[h],attribute:"cname",value:S.getId()}),t.ssrcs.push({id:f[h],attribute:"msid",value:S.getId()+" "+W.getId()});break}}const b={type:"BUNDLE",mids:V.join(" ")};return e.groups.push(b),$e.write(e)}toIceFragmentString(){let e={version:0,media:[],candidates:[]};this.hasICE()&&this.getICE().isLite()&&(e.icelite="ice-lite"),this.getICE()&&(e.iceUfrag=this.getICE().getUfrag(),e.icePwd=this.getICE().getPwd());for(const V of this.getCandidates())e.candidates.push({foundation:V.getFoundation(),component:V.getComponentId(),transport:V.getTransport(),priority:V.getPriority(),ip:V.getAddress(),port:V.getPort(),type:V.getType(),raddr:V.getRelAddr(),rport:V.getRelPort()});return $e.write(e).slice(10)}};Ee.create=function(l){const e=new Ee;l.ice&&(l.ice instanceof Oe?e.setICE(l.ice.clone()):e.setICE(Oe.expand(l.ice))),l.dtls&&(l.dtls instanceof et?e.setDTLS(l.dtls):e.setDTLS(et.expand(l.dtls))),l.crypto&&(l.crypto instanceof tt?e.setCrypto(l.crypto):e.setCrypto(tt.expand(l.crypto)));for(const S of l.candidates||[])S instanceof qe?e.addCandidate(S.clone()):e.addCandidate(qe.expand(S));let V=96,b=1;for(const[S,W]of Object.entries(l.capabilities||{})){const m=bn.create(S,W);for(const[t,U]of m.getCodecs())U.getType()>=96&&U.setType(V++),U.getRTX()&&U.setRTX(V++);if(W.extensions)for(let t of W.extensions)b===15&&b++,m.addExtension(b++,t);e.addMedia(m)}return e},Ee.expand=function(l){if(l.constructor.name==="SDPInfo")return l;l=l;const e=new Ee(l.version);for(const V of l.medias||[]){const b=bn.expand(V);b&&e.addMedia(b)}for(const V of l.streams||[]){const b=zt.expand(V);b&&e.addStream(b)}for(const V of l.candidates||[]){const b=qe.expand(V);b&&e.addCandidate(b)}return l.ice&&e.setICE(Oe.expand(l.ice)),l.dtls&&e.setDTLS(et.expand(l.dtls)),l.crypto&&e.setCrypto(tt.expand(l.crypto)),l.extmapAllowMixedNotSupported&&(this.extmapAllowMixed=!l.extmapAllowMixedNotSupported),e},Ee.clone=function(l){return l.constructor.name==="SDPInfo"?l.clone():Ee.expand(l)},Ee.process=function(l){return Ee.parse(l)},Ee.parse=function(l){const e=$e.parse(l),V=new Ee;if(V.setVersion(e.version),e.iceUfrag&&e.icePwd){const b=String(e.iceUfrag),S=String(e.icePwd),W=new Oe(b,S);W.setLite(e.icelite=="ice-lite"),W.setEndOfCandidates(e.endOfCandidates=="end-of-candidates"),V.setICE(W)}for(let b in e.media){const S=e.media[b],W=S.type,m=S.mid?S.mid.toString():b,t=new bn(m,W);if(S.iceUfrag&&S.icePwd){const n=String(S.iceUfrag),c=String(S.icePwd),o=new Oe(n,c);o.setLite(e.icelite=="ice-lite"),o.setEndOfCandidates(S.endOfCandidates=="end-of-candidates"),V.setICE(o)}for(let n=0;S.candidates&&n<S.candidates.length;++n){const c=S.candidates[n],o=new qe(c.foundation,c.component,c.transport,c.priority,c.ip,c.port,c.type,c.raddr,c.rport);V.addCandidate(o)}const U=S.fingerprint||e.fingerprint;if(U){const n=U.type,c=U.hash;let o=Fn.ACTPASS;S.setup&&(o=Fn.byValue(S.setup)),V.setDTLS(new et(o,n,c))}if(S.crypto){const n=S.crypto[0];V.setCrypto(new tt(n.id,n.suite,n.config,n.sessionConfig))}let f=gn.SENDRECV;S.direction&&(f=gn.byValue(S.direction),t.setDirection(f)),S.control&&t.setControl(S.control),V.setExtmapAllowMixed(S.extmapAllowMixed=="extmap-allow-mixed"||e.extmapAllowMixed=="extmap-allow-mixed");const h=new Map;for(let n in S.rtp){const c=S.rtp[n],o=c.payload,d=c.codec;if(d.toUpperCase()==="RED"||d.toUpperCase()==="ULPFEC")continue;let u={};for(let p in S.fmtp){const g=S.fmtp[p];if(g.payload===o){const k=g.config.split(";");for(let N in k){const R=k[N].split("="),E=R[0].trim(),y=R.splice(1).join("=").trim();u[E]=y}}}if(d.toUpperCase()==="RTX")h.set(parseInt(u.apt),o);else{const p=new As(d,o,u);c.encoding>1&&p.setChannels(c.encoding),t.addCodec(p)}}for(let n of h.entries()){const c=t.getCodecForType(n[0]);c&&c.setRTX(n[1])}for(let n=0;S.rtcpFb&&n<S.rtcpFb.length;++n){const c=t.getCodecForType(S.rtcpFb[n].payload);if(c){const o=S.rtcpFb[n].type,d=S.rtcpFb[n].subtype?S.rtcpFb[n].subtype.split(" "):null;c.addRTCPFeedback(new Ps(o,d))}}const r=S.ext;for(let n in r){const c=r[n];t.addExtension(c.value,c.uri)}const i=S.rids;for(let n in i){const c=i[n],o=new ti(c.id,He.byValue(c.direction));let d=[];const u=new Map;if(c.params){const p=$e.parseParams(c.params);for(let g in p)g==="pt"?d=p[g].split(","):u.set(g,p[g]);o.setFormats(d),o.setParams(u)}t.addRID(o)}const a=[];if(S.simulcast){const n=new ei;if(S.simulcast.dir1){const c=He.byValue(S.simulcast.dir1),o=$e.parseSimulcastStreamList(S.simulcast.list1);for(let d=0;d<o.length;++d){const u=[];for(let p=0;p<o[d].length;++p)u.push(new Zr(o[d][p].scid,o[d][p].paused));n.addSimulcastAlternativeStreams(c,u)}}if(S.simulcast.dir2){const c=He.byValue(S.simulcast.dir2),o=$e.parseSimulcastStreamList(S.simulcast.list2);for(let d=0;d<o.length;++d){const u=[];for(let p=0;p<o[d].length;++p)u.push(new Zr(o[d][p].scid,o[d][p].paused));n.addSimulcastAlternativeStreams(c,u)}}for(let c of n.getSimulcastStreams(He.SEND)){const o=[];for(let d=0;d<c.length;d++){const u=new qs(c[d].getId(),c[d].isPaused()),p=t.getRID(u.getId());if(p){const g=p.getFormats();for(let k=0;g&&k<g.length;++k){const N=t.getCodecForType(g[k]);N&&u.addCodec(N)}u.setParams(p.getParams()),o.push(u)}}o.length&&a.push(o)}t.setSimulcast(n)}const s=new Map;if(S.ssrcs)for(let n in S.ssrcs){let c=S.ssrcs[n],o=c.id,d=c.attribute,u=c.value,p=s.get(o);if(p||(p=new $s(o),s.set(p.getSSRC(),p)),Se("cname",d))p.setCName(u);else if(Se("msid",d)){let g=u.split(" "),k=g[0],N=g[1];p.setStreamId(k),p.setTrackId(N);let R=V.getStream(k);R||(R=new zt(k),V.addStream(R));let E=R.getTrack(N);E||(E=new Sn(W,N),E.setMediaId(m),E.setEncodings(a),R.addTrack(E)),E.addSSRC(o)}}if(S.msid){let n=S.msid.split(" "),c=n[0],o=n[1],d=V.getStream(c);d||(d=new zt(c),V.addStream(d));let u=d.getTrack(o);u||(u=new Sn(W,o),u.setMediaId(m),u.setEncodings(a),d.addTrack(u));for(let[p,g]of s.entries())g.getStreamId()||(g.setStreamId(c),g.setTrackId(o),u.addSSRC(p))}for(let[n,c]of s.entries())if(!c.getStreamId()){let o=c.getCName(),d=m;c.setStreamId(o),c.setTrackId(d);let u=V.getStream(o);u||(u=new zt(o),V.addStream(u));let p=u.getTrack(d);p||(p=new Sn(W,d),p.setMediaId(m),p.setEncodings(a),u.addTrack(p)),p.addSSRC(n)}if(S.ssrcGroups)for(let n in S.ssrcGroups){let c=S.ssrcGroups[n],o=c.ssrcs.split(" "),d=new Ks(c.semantics,o),u=s.get(parseInt(o[0]));u&&V.getStream(u.getStreamId()).getTrack(u.getTrackId()).addSourceGroup(d)}if(S.type=="application"&&S.payloads=="webrtc-datachannel"){const n=new ni(S.sctpPort,S.maxMessageSize);t.setDataChannel(n)}V.addMedia(t)}return V};var ri=Ee;Object.defineProperty(Ve,"__esModule",{value:!0});var St=Ve.SDPInfo=ri;Ve.CandidateInfo=ir,Ve.CodecInfo=jt,Ve.DTLSInfo=or,Ve.CryptoInfo=lr,Ve.ICEInfo=ur;var si=Ve.MediaInfo=fr;Ve.Setup=sn,Ve.SourceGroupInfo=Un,Ve.SourceInfo=Ur,Ve.StreamInfo=Wr,Ve.TrackInfo=Zn,Ve.RTCPFeedbackInfo=tn,Ve.TrackEncodingInfo=Wn,Ve.RIDInfo=un,Ve.SimulcastInfo=mn,Ve.SimulcastStreamInfo=hn,Ve.DataChannelInfo=Rn;var ii=Ve.Direction=pn,En={exports:{}};(function(l,e){(function(V,b){var S="0.7.37",W="",m="?",t="function",U="undefined",f="object",h="string",r="major",i="model",a="name",s="type",n="vendor",c="version",o="architecture",d="console",u="mobile",p="tablet",g="smarttv",k="wearable",N="embedded",R=500,E="Amazon",y="Apple",w="ASUS",v="BlackBerry",G="Browser",j="Chrome",D="Edge",I="Firefox",x="Google",C="Huawei",O="LG",B="Microsoft",X="Motorola",_="Opera",q="Samsung",se="Sharp",ie="Sony",de="Xiaomi",Re="Zebra",Me="Facebook",_t="Chromium OS",Lt="Mac OS",At=function(H,L){var z={};for(var te in H)L[te]&&L[te].length%2===0?z[te]=L[te].concat(H[te]):z[te]=H[te];return z},xe=function(H){for(var L={},z=0;z<H.length;z++)L[H[z].toUpperCase()]=H[z];return L},We=function(H,L){return typeof H===h?ve(L).indexOf(ve(H))!==-1:!1},ve=function(H){return H.toLowerCase()},xn=function(H){return typeof H===h?H.replace(/[^\d\.]/g,W).split(".")[0]:b},J=function(H,L){if(typeof H===h)return H=H.replace(/^\s\s*/,W),typeof L===U?H:H.substring(0,R)},Z=function(H,L){for(var z=0,te,ye,Ze,ne,A,Je;z<L.length&&!A;){var vn=L[z],zr=L[z+1];for(te=ye=0;te<vn.length&&!A&&vn[te];)if(A=vn[te++].exec(H),A)for(Ze=0;Ze<zr.length;Ze++)Je=A[++ye],ne=zr[Ze],typeof ne===f&&ne.length>0?ne.length===2?typeof ne[1]==t?this[ne[0]]=ne[1].call(this,Je):this[ne[0]]=ne[1]:ne.length===3?typeof ne[1]===t&&!(ne[1].exec&&ne[1].test)?this[ne[0]]=Je?ne[1].call(this,Je,ne[2]):b:this[ne[0]]=Je?Je.replace(ne[1],ne[2]):b:ne.length===4&&(this[ne[0]]=Je?ne[3].call(this,Je.replace(ne[1],ne[2])):b):this[ne]=Je||b;z+=2}},F=function(H,L){for(var z in L)if(typeof L[z]===f&&L[z].length>0){for(var te=0;te<L[z].length;te++)if(We(L[z][te],H))return z===m?b:z}else if(We(L[z],H))return z===m?b:z;return H},T={"1.0":"/8","1.2":"/1","1.3":"/3","2.0":"/412","2.0.2":"/416","2.0.3":"/417","2.0.4":"/419","?":"/"},M={ME:"4.90","NT 3.11":"NT3.51","NT 4.0":"NT4.0",2e3:"NT 5.0",XP:["NT 5.1","NT 5.2"],Vista:"NT 6.0",7:"NT 6.1",8:"NT 6.2","8.1":"NT 6.3",10:["NT 6.4","NT 10.0"],RT:"ARM"},Q={browser:[[/\b(?:crmo|crios)\/([\w\.]+)/i],[c,[a,"Chrome"]],[/edg(?:e|ios|a)?\/([\w\.]+)/i],[c,[a,"Edge"]],[/(opera mini)\/([-\w\.]+)/i,/(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,/(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i],[a,c],[/opios[\/ ]+([\w\.]+)/i],[c,[a,_+" Mini"]],[/\bopr\/([\w\.]+)/i],[c,[a,_]],[/\bb[ai]*d(?:uhd|[ub]*[aekoprswx]{5,6})[\/ ]?([\w\.]+)/i],[c,[a,"Baidu"]],[/(kindle)\/([\w\.]+)/i,/(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,/(avant|iemobile|slim)\s?(?:browser)?[\/ ]?([\w\.]*)/i,/(?:ms|\()(ie) ([\w\.]+)/i,/(flock|rockmelt|midori|epiphany|silk|skyfire|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|qq|duckduckgo)\/([-\w\.]+)/i,/(heytap|ovi)browser\/([\d\.]+)/i,/(weibo)__([\d\.]+)/i],[a,c],[/(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i],[c,[a,"UC"+G]],[/microm.+\bqbcore\/([\w\.]+)/i,/\bqbcore\/([\w\.]+).+microm/i,/micromessenger\/([\w\.]+)/i],[c,[a,"WeChat"]],[/konqueror\/([\w\.]+)/i],[c,[a,"Konqueror"]],[/trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i],[c,[a,"IE"]],[/ya(?:search)?browser\/([\w\.]+)/i],[c,[a,"Yandex"]],[/slbrowser\/([\w\.]+)/i],[c,[a,"Smart Lenovo "+G]],[/(avast|avg)\/([\w\.]+)/i],[[a,/(.+)/,"$1 Secure "+G],c],[/\bfocus\/([\w\.]+)/i],[c,[a,I+" Focus"]],[/\bopt\/([\w\.]+)/i],[c,[a,_+" Touch"]],[/coc_coc\w+\/([\w\.]+)/i],[c,[a,"Coc Coc"]],[/dolfin\/([\w\.]+)/i],[c,[a,"Dolphin"]],[/coast\/([\w\.]+)/i],[c,[a,_+" Coast"]],[/miuibrowser\/([\w\.]+)/i],[c,[a,"MIUI "+G]],[/fxios\/([-\w\.]+)/i],[c,[a,I]],[/\bqihu|(qi?ho?o?|360)browser/i],[[a,"360 "+G]],[/(oculus|sailfish|huawei|vivo)browser\/([\w\.]+)/i],[[a,/(.+)/,"$1 "+G],c],[/samsungbrowser\/([\w\.]+)/i],[c,[a,q+" Internet"]],[/(comodo_dragon)\/([\w\.]+)/i],[[a,/_/g," "],c],[/metasr[\/ ]?([\d\.]+)/i],[c,[a,"Sogou Explorer"]],[/(sogou)mo\w+\/([\d\.]+)/i],[[a,"Sogou Mobile"],c],[/(electron)\/([\w\.]+) safari/i,/(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,/m?(qqbrowser|2345Explorer)[\/ ]?([\w\.]+)/i],[a,c],[/(lbbrowser)/i,/\[(linkedin)app\]/i],[a],[/((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i],[[a,Me],c],[/(Klarna)\/([\w\.]+)/i,/(kakao(?:talk|story))[\/ ]([\w\.]+)/i,/(naver)\(.*?(\d+\.[\w\.]+).*\)/i,/safari (line)\/([\w\.]+)/i,/\b(line)\/([\w\.]+)\/iab/i,/(alipay)client\/([\w\.]+)/i,/(chromium|instagram|snapchat)[\/ ]([-\w\.]+)/i],[a,c],[/\bgsa\/([\w\.]+) .*safari\//i],[c,[a,"GSA"]],[/musical_ly(?:.+app_?version\/|_)([\w\.]+)/i],[c,[a,"TikTok"]],[/headlesschrome(?:\/([\w\.]+)| )/i],[c,[a,j+" Headless"]],[/ wv\).+(chrome)\/([\w\.]+)/i],[[a,j+" WebView"],c],[/droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i],[c,[a,"Android "+G]],[/(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i],[a,c],[/version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i],[c,[a,"Mobile Safari"]],[/version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i],[c,a],[/webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i],[a,[c,F,T]],[/(webkit|khtml)\/([\w\.]+)/i],[a,c],[/(navigator|netscape\d?)\/([-\w\.]+)/i],[[a,"Netscape"],c],[/mobile vr; rv:([\w\.]+)\).+firefox/i],[c,[a,I+" Reality"]],[/ekiohf.+(flow)\/([\w\.]+)/i,/(swiftfox)/i,/(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,/(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,/(firefox)\/([\w\.]+)/i,/(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,/(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,/(links) \(([\w\.]+)/i,/panasonic;(viera)/i],[a,c],[/(cobalt)\/([\w\.]+)/i],[a,[c,/master.|lts./,""]]],cpu:[[/(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i],[[o,"amd64"]],[/(ia32(?=;))/i],[[o,ve]],[/((?:i[346]|x)86)[;\)]/i],[[o,"ia32"]],[/\b(aarch64|arm(v?8e?l?|_?64))\b/i],[[o,"arm64"]],[/\b(arm(?:v[67])?ht?n?[fl]p?)\b/i],[[o,"armhf"]],[/windows (ce|mobile); ppc;/i],[[o,"arm"]],[/((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i],[[o,/ower/,W,ve]],[/(sun4\w)[;\)]/i],[[o,"sparc"]],[/((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i],[[o,ve]]],device:[[/\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i],[i,[n,q],[s,p]],[/\b((?:s[cgp]h|gt|sm)-\w+|sc[g-]?[\d]+a?|galaxy nexus)/i,/samsung[- ]([-\w]+)/i,/sec-(sgh\w+)/i],[i,[n,q],[s,u]],[/(?:\/|\()(ip(?:hone|od)[\w, ]*)(?:\/|;)/i],[i,[n,y],[s,u]],[/\((ipad);[-\w\),; ]+apple/i,/applecoremedia\/[\w\.]+ \((ipad)/i,/\b(ipad)\d\d?,\d\d?[;\]].+ios/i],[i,[n,y],[s,p]],[/(macintosh);/i],[i,[n,y]],[/\b(sh-?[altvz]?\d\d[a-ekm]?)/i],[i,[n,se],[s,u]],[/\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i],[i,[n,C],[s,p]],[/(?:huawei|honor)([-\w ]+)[;\)]/i,/\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i],[i,[n,C],[s,u]],[/\b(poco[\w ]+|m2\d{3}j\d\d[a-z]{2})(?: bui|\))/i,/\b; (\w+) build\/hm\1/i,/\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,/\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,/oid[^\)]+; (m?[12][0-389][01]\w{3,6}[c-y])( bui|; wv|\))/i,/\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i],[[i,/_/g," "],[n,de],[s,u]],[/oid[^\)]+; (2\d{4}(283|rpbf)[cgl])( bui|\))/i,/\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i],[[i,/_/g," "],[n,de],[s,p]],[/; (\w+) bui.+ oppo/i,/\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i],[i,[n,"OPPO"],[s,u]],[/vivo (\w+)(?: bui|\))/i,/\b(v[12]\d{3}\w?[at])(?: bui|;)/i],[i,[n,"Vivo"],[s,u]],[/\b(rmx[1-3]\d{3})(?: bui|;|\))/i],[i,[n,"Realme"],[s,u]],[/\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,/\bmot(?:orola)?[- ](\w*)/i,/((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i],[i,[n,X],[s,u]],[/\b(mz60\d|xoom[2 ]{0,2}) build\//i],[i,[n,X],[s,p]],[/((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i],[i,[n,O],[s,p]],[/(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,/\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,/\blg-?([\d\w]+) bui/i],[i,[n,O],[s,u]],[/(ideatab[-\w ]+)/i,/lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i],[i,[n,"Lenovo"],[s,p]],[/(?:maemo|nokia).*(n900|lumia \d+)/i,/nokia[-_ ]?([-\w\.]*)/i],[[i,/_/g," "],[n,"Nokia"],[s,u]],[/(pixel c)\b/i],[i,[n,x],[s,p]],[/droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i],[i,[n,x],[s,u]],[/droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i],[i,[n,ie],[s,u]],[/sony tablet [ps]/i,/\b(?:sony)?sgp\w+(?: bui|\))/i],[[i,"Xperia Tablet"],[n,ie],[s,p]],[/ (kb2005|in20[12]5|be20[12][59])\b/i,/(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i],[i,[n,"OnePlus"],[s,u]],[/(alexa)webm/i,/(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\))/i,/(kf[a-z]+)( bui|\)).+silk\//i],[i,[n,E],[s,p]],[/((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i],[[i,/(.+)/g,"Fire Phone $1"],[n,E],[s,u]],[/(playbook);[-\w\),; ]+(rim)/i],[i,n,[s,p]],[/\b((?:bb[a-f]|st[hv])100-\d)/i,/\(bb10; (\w+)/i],[i,[n,v],[s,u]],[/(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i],[i,[n,w],[s,p]],[/ (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i],[i,[n,w],[s,u]],[/(nexus 9)/i],[i,[n,"HTC"],[s,p]],[/(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,/(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,/(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i],[n,[i,/_/g," "],[s,u]],[/droid.+; ([ab][1-7]-?[0178a]\d\d?)/i],[i,[n,"Acer"],[s,p]],[/droid.+; (m[1-5] note) bui/i,/\bmz-([-\w]{2,})/i],[i,[n,"Meizu"],[s,u]],[/; ((?:power )?armor(?:[\w ]{0,8}))(?: bui|\))/i],[i,[n,"Ulefone"],[s,u]],[/(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron|infinix|tecno)[-_ ]?([-\w]*)/i,/(hp) ([\w ]+\w)/i,/(asus)-?(\w+)/i,/(microsoft); (lumia[\w ]+)/i,/(lenovo)[-_ ]?([-\w]+)/i,/(jolla)/i,/(oppo) ?([\w ]+) bui/i],[n,i,[s,u]],[/(kobo)\s(ereader|touch)/i,/(archos) (gamepad2?)/i,/(hp).+(touchpad(?!.+tablet)|tablet)/i,/(kindle)\/([\w\.]+)/i,/(nook)[\w ]+build\/(\w+)/i,/(dell) (strea[kpr\d ]*[\dko])/i,/(le[- ]+pan)[- ]+(\w{1,9}) bui/i,/(trinity)[- ]*(t\d{3}) bui/i,/(gigaset)[- ]+(q\w{1,9}) bui/i,/(vodafone) ([\w ]+)(?:\)| bui)/i],[n,i,[s,p]],[/(surface duo)/i],[i,[n,B],[s,p]],[/droid [\d\.]+; (fp\du?)(?: b|\))/i],[i,[n,"Fairphone"],[s,u]],[/(u304aa)/i],[i,[n,"AT&T"],[s,u]],[/\bsie-(\w*)/i],[i,[n,"Siemens"],[s,u]],[/\b(rct\w+) b/i],[i,[n,"RCA"],[s,p]],[/\b(venue[\d ]{2,7}) b/i],[i,[n,"Dell"],[s,p]],[/\b(q(?:mv|ta)\w+) b/i],[i,[n,"Verizon"],[s,p]],[/\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i],[i,[n,"Barnes & Noble"],[s,p]],[/\b(tm\d{3}\w+) b/i],[i,[n,"NuVision"],[s,p]],[/\b(k88) b/i],[i,[n,"ZTE"],[s,p]],[/\b(nx\d{3}j) b/i],[i,[n,"ZTE"],[s,u]],[/\b(gen\d{3}) b.+49h/i],[i,[n,"Swiss"],[s,u]],[/\b(zur\d{3}) b/i],[i,[n,"Swiss"],[s,p]],[/\b((zeki)?tb.*\b) b/i],[i,[n,"Zeki"],[s,p]],[/\b([yr]\d{2}) b/i,/\b(dragon[- ]+touch |dt)(\w{5}) b/i],[[n,"Dragon Touch"],i,[s,p]],[/\b(ns-?\w{0,9}) b/i],[i,[n,"Insignia"],[s,p]],[/\b((nxa|next)-?\w{0,9}) b/i],[i,[n,"NextBook"],[s,p]],[/\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i],[[n,"Voice"],i,[s,u]],[/\b(lvtel\-)?(v1[12]) b/i],[[n,"LvTel"],i,[s,u]],[/\b(ph-1) /i],[i,[n,"Essential"],[s,u]],[/\b(v(100md|700na|7011|917g).*\b) b/i],[i,[n,"Envizen"],[s,p]],[/\b(trio[-\w\. ]+) b/i],[i,[n,"MachSpeed"],[s,p]],[/\btu_(1491) b/i],[i,[n,"Rotor"],[s,p]],[/(shield[\w ]+) b/i],[i,[n,"Nvidia"],[s,p]],[/(sprint) (\w+)/i],[n,i,[s,u]],[/(kin\.[onetw]{3})/i],[[i,/\./g," "],[n,B],[s,u]],[/droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i],[i,[n,Re],[s,p]],[/droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i],[i,[n,Re],[s,u]],[/smart-tv.+(samsung)/i],[n,[s,g]],[/hbbtv.+maple;(\d+)/i],[[i,/^/,"SmartTV"],[n,q],[s,g]],[/(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i],[[n,O],[s,g]],[/(apple) ?tv/i],[n,[i,y+" TV"],[s,g]],[/crkey/i],[[i,j+"cast"],[n,x],[s,g]],[/droid.+aft(\w+)( bui|\))/i],[i,[n,E],[s,g]],[/\(dtv[\);].+(aquos)/i,/(aquos-tv[\w ]+)\)/i],[i,[n,se],[s,g]],[/(bravia[\w ]+)( bui|\))/i],[i,[n,ie],[s,g]],[/(mitv-\w{5}) bui/i],[i,[n,de],[s,g]],[/Hbbtv.*(technisat) (.*);/i],[n,i,[s,g]],[/\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,/hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i],[[n,J],[i,J],[s,g]],[/\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i],[[s,g]],[/(ouya)/i,/(nintendo) ([wids3utch]+)/i],[n,i,[s,d]],[/droid.+; (shield) bui/i],[i,[n,"Nvidia"],[s,d]],[/(playstation [345portablevi]+)/i],[i,[n,ie],[s,d]],[/\b(xbox(?: one)?(?!; xbox))[\); ]/i],[i,[n,B],[s,d]],[/((pebble))app/i],[n,i,[s,k]],[/(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i],[i,[n,y],[s,k]],[/droid.+; (glass) \d/i],[i,[n,x],[s,k]],[/droid.+; (wt63?0{2,3})\)/i],[i,[n,Re],[s,k]],[/(quest( 2| pro)?)/i],[i,[n,Me],[s,k]],[/(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i],[n,[s,N]],[/(aeobc)\b/i],[i,[n,E],[s,N]],[/droid .+?; ([^;]+?)(?: bui|; wv\)|\) applew).+? mobile safari/i],[i,[s,u]],[/droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i],[i,[s,p]],[/\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i],[[s,p]],[/(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i],[[s,u]],[/(android[-\w\. ]{0,9});.+buil/i],[i,[n,"Generic"]]],engine:[[/windows.+ edge\/([\w\.]+)/i],[c,[a,D+"HTML"]],[/webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i],[c,[a,"Blink"]],[/(presto)\/([\w\.]+)/i,/(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,/ekioh(flow)\/([\w\.]+)/i,/(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,/(icab)[\/ ]([23]\.[\d\.]+)/i,/\b(libweb)/i],[a,c],[/rv\:([\w\.]{1,9})\b.+(gecko)/i],[c,a]],os:[[/microsoft (windows) (vista|xp)/i],[a,c],[/(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i],[a,[c,F,M]],[/windows nt 6\.2; (arm)/i,/windows[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i,/(?:win(?=3|9|n)|win 9x )([nt\d\.]+)/i],[[c,F,M],[a,"Windows"]],[/ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,/(?:ios;fbsv\/|iphone.+ios[\/ ])([\d\.]+)/i,/cfnetwork\/.+darwin/i],[[c,/_/g,"."],[a,"iOS"]],[/(mac os x) ?([\w\. ]*)/i,/(macintosh|mac_powerpc\b)(?!.+haiku)/i],[[a,Lt],[c,/_/g,"."]],[/droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i],[c,a],[/(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,/(blackberry)\w*\/([\w\.]*)/i,/(tizen|kaios)[\/ ]([\w\.]+)/i,/\((series40);/i],[a,c],[/\(bb(10);/i],[c,[a,v]],[/(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i],[c,[a,"Symbian"]],[/mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i],[c,[a,I+" OS"]],[/web0s;.+rt(tv)/i,/\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i],[c,[a,"webOS"]],[/watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i],[c,[a,"watchOS"]],[/crkey\/([\d\.]+)/i],[c,[a,j+"cast"]],[/(cros) [\w]+(?:\)| ([\w\.]+)\b)/i],[[a,_t],c],[/panasonic;(viera)/i,/(netrange)mmh/i,/(nettv)\/(\d+\.[\w\.]+)/i,/(nintendo|playstation) ([wids345portablevuch]+)/i,/(xbox); +xbox ([^\);]+)/i,/\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,/(mint)[\/\(\) ]?(\w*)/i,/(mageia|vectorlinux)[; ]/i,/([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,/(hurd|linux) ?([\w\.]*)/i,/(gnu) ?([\w\.]*)/i,/\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,/(haiku) (\w+)/i],[a,c],[/(sunos) ?([\w\.\d]*)/i],[[a,"Solaris"],c],[/((?:open)?solaris)[-\/ ]?([\w\.]*)/i,/(aix) ((\d)(?=\.|\)| )[\w\.])*/i,/\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i,/(unix) ?([\w\.]*)/i],[a,c]]},Y=function(H,L){if(typeof H===f&&(L=H,H=b),!(this instanceof Y))return new Y(H,L).getResult();var z=typeof V!==U&&V.navigator?V.navigator:b,te=H||(z&&z.userAgent?z.userAgent:W),ye=z&&z.userAgentData?z.userAgentData:b,Ze=L?At(Q,L):Q,ne=z&&z.userAgent==te;return this.getBrowser=function(){var A={};return A[a]=b,A[c]=b,Z.call(A,te,Ze.browser),A[r]=xn(A[c]),ne&&z&&z.brave&&typeof z.brave.isBrave==t&&(A[a]="Brave"),A},this.getCPU=function(){var A={};return A[o]=b,Z.call(A,te,Ze.cpu),A},this.getDevice=function(){var A={};return A[n]=b,A[i]=b,A[s]=b,Z.call(A,te,Ze.device),ne&&!A[s]&&ye&&ye.mobile&&(A[s]=u),ne&&A[i]=="Macintosh"&&z&&typeof z.standalone!==U&&z.maxTouchPoints&&z.maxTouchPoints>2&&(A[i]="iPad",A[s]=p),A},this.getEngine=function(){var A={};return A[a]=b,A[c]=b,Z.call(A,te,Ze.engine),A},this.getOS=function(){var A={};return A[a]=b,A[c]=b,Z.call(A,te,Ze.os),ne&&!A[a]&&ye&&ye.platform!="Unknown"&&(A[a]=ye.platform.replace(/chrome os/i,_t).replace(/macos/i,Lt)),A},this.getResult=function(){return{ua:this.getUA(),browser:this.getBrowser(),engine:this.getEngine(),os:this.getOS(),device:this.getDevice(),cpu:this.getCPU()}},this.getUA=function(){return te},this.setUA=function(A){return te=typeof A===h&&A.length>R?J(A,R):A,this},this.setUA(te),this};Y.VERSION=S,Y.BROWSER=xe([a,c,r]),Y.CPU=xe([o]),Y.DEVICE=xe([i,n,s,d,u,g,p,k,N]),Y.ENGINE=Y.OS=xe([a,c]),l.exports&&(e=l.exports=Y),e.UAParser=Y;var K=typeof V!==U&&(V.jQuery||V.Zepto);if(K&&!K.ua){var ee=new Y;K.ua=ee.getResult(),K.ua.get=function(){return ee.getUA()},K.ua.set=function(H){ee.setUA(H);var L=ee.getResult();for(var z in L)K.ua[z]=L[z]}}})(typeof window=="object"?window:Ge)})(En,En.exports);var ai=En.exports;const oi=_e(ai),li=["iOS"];class Et extends oi{constructor(){super(window.navigator.userAgent)}isChromium(){return this.getUA().match(/Chrome/i)}isChrome(){const e=this.getBrowser();if(!e.name)return!1;const V=this.getOS();let b=!0;return b=!new RegExp(li.join("|"),"i").test(V.name),e.name.match(/Chrome/i)&&b}isFirefox(){const e=this.getBrowser();return e.name?e.name.match(/Firefox/i):!1}isOpera(){const e=this.getBrowser();return e.name?e.name.match(/Opera/i):!1}isSafari(){const e=this.getBrowser();return e.name?e.name.match(/Safari/i):!1}}const ae=Te.get("SdpParser"),br=35,ci=65,Fr=96,di=127,Vi=Array.from({length:ci-br+1},(l,e)=>e+br),ui=Array.from({length:di-Fr+1},(l,e)=>e+Fr),gr=1,hi=14,Sr=16,mi=255,pi=Array.from({length:hi-gr+1},(l,e)=>e+gr),Ri=Array.from({length:mi-Sr+1},(l,e)=>e+Sr),me={setSimulcast(l,e){if(ae.info("Setting simulcast. Codec: ",e),!new Et().isChromium())return ae.warn("Your browser does not appear to support Simulcast. For a better experience, use a Chromium based browser."),l;if(e!=="h264"&&e!=="vp8")return ae.warn(`Your selected codec ${e} does not appear to support Simulcast.  To broadcast using simulcast, please use H.264 or VP8.`),l;if(!/m=video/.test(l))return ae.warn("There is no available video for simulcast to be enabled."),l;try{const b=/m=video.*?a=ssrc:(\d*) cname:(.+?)\r\n/s,S=/m=video.*?a=ssrc:(\d*) msid:(.+?)\r\n/s,W=b.exec(l),m=W[1],t=W[2],U=S.exec(l)[2],f=2,h=[m];for(let r=0;r<f;++r){const i=100+r*2,a=i+1;h.push(i),l+="a=ssrc-group:FID "+i+" "+a+`\r
a=ssrc:`+i+" cname:"+t+`\r
a=ssrc:`+i+" msid:"+U+`\r
a=ssrc:`+a+" cname:"+t+`\r
a=ssrc:`+a+" msid:"+U+`\r
`}return l+="a=ssrc-group:SIM "+h.join(" ")+`\r
`,ae.info("Simulcast setted"),ae.debug("Simulcast SDP: ",l),l}catch(b){throw ae.error("Error setting SDP for simulcast: ",b),b}},setStereo(l){return ae.info("Replacing SDP response for support stereo"),l=l.replace(/useinbandfec=1/g,"useinbandfec=1; stereo=1"),ae.info("Replaced SDP response for support stereo"),ae.debug("New SDP value: ",l),l},setDTX(l){return ae.info("Replacing SDP response for support dtx"),l=l.replace("useinbandfec=1","useinbandfec=1; usedtx=1"),ae.info("Replaced SDP response for support dtx"),ae.debug("New SDP value: ",l),l},setAbsoluteCaptureTime(l){const V="a=extmap:"+me.getAvailableHeaderExtensionIdRange(l)[0]+` http://www.webrtc.org/experiments/rtp-hdrext/abs-capture-time\r
`,b=/(m=.*\r\n(?:.*\r\n)*?)(a=extmap.*\r\n)/gm;return l=l.replace(b,(S,W,m)=>W+V+m),ae.info("Replaced SDP response for setting absolute capture time"),ae.debug("New SDP value: ",l),l},setDependencyDescriptor(l){const V="a=extmap:"+me.getAvailableHeaderExtensionIdRange(l)[0]+` https://aomediacodec.github.io/av1-rtp-spec/#dependency-descriptor-rtp-header-extension\r
`,b=/(m=.*\r\n(?:.*\r\n)*?)(a=extmap.*\r\n)/gm;return l=l.replace(b,(S,W,m)=>W+V+m),ae.info("Replaced SDP response for setting depency descriptor"),ae.debug("New SDP value: ",l),l},setVideoBitrate(l,e){if(e<1)ae.info("Remove bitrate restrictions"),l=l.replace(/b=AS:.*\r\n/,"").replace(/b=TIAS:.*\r\n/,"");else{const V=St.parse(l),b=V.getMedia("video");ae.info("Setting video bitrate"),b.setBitrate(e),l=V.toString()}return l},removeSdpLine(l,e){return ae.debug("SDP before trimming: ",l),l=l.split(`
`).filter(V=>V.trim()!==e).join(`
`),ae.debug("SDP trimmed result: ",l),l},adaptCodecName(l,e,V){if(!l)return l;const b=new RegExp(`${e}`,"i");return l.replace(b,V)},setMultiopus(l,e){if(!new Et().isFirefox()&&(!e||fi(e)))if(l.includes("multiopus/48000/6"))ae.info("Multiopus already setted");else{ae.info("Setting multiopus");const S=/m=audio 9 UDP\/TLS\/RTP\/SAVPF (.*)\r\n/.exec(l)[0],W=me.getAvailablePayloadTypeRange(l)[0],m=S.replace(`\r
`," ")+W+`\r
a=rtpmap:`+W+` multiopus/48000/6\r
a=fmtp:`+W+` channel_mapping=0,4,1,2,3,5;coupled_streams=2;minptime=10;num_streams=4;useinbandfec=1\r
`;l=l.replace(S,m),ae.info("Multiopus offer created"),ae.debug("SDP parsed for multioups: ",l)}return l},getAvailablePayloadTypeRange(l){const e=/m=(?:.*) (?:.*) UDP\/TLS\/RTP\/SAVPF (.*)\r\n/gm,V=l.matchAll(e);let b=ui.concat(Vi);for(const S of V){const W=S[1].split(" ").map(m=>parseInt(m));b=b.filter(m=>!W.includes(m))}return b},getAvailableHeaderExtensionIdRange(l){const e=/a=extmap:(\d+)(?:.*)\r\n/gm,V=l.matchAll(e);let b=pi.concat(Ri);for(const S of V){const W=S[1].split(" ").map(m=>parseInt(m));b=b.filter(m=>!W.includes(m))}return b},renegotiate(l,e){const V=St.parse(l),b=St.parse(e);for(const S of V.getMedias()){let W=b.getMediaById(S.getId());if(!W){W=new si(S.getId(),S.getType()),W.setDirection(ii.reverse(S.getDirection()));const m=b.getMedia(S.getType());if(m){W.setCodecs(m.getCodecs());for(const[t,U]of m.getExtensions())W.addExtension(t,U)}b.addMedia(W)}}return b.toString()},updateMissingVideoExtensions(l,e){var W;const V=St.parse(l),S=(W=St.parse(e).getMediasByType("video")[0])==null?void 0:W.getExtensions();if(!(!S&&!S.length)){for(const m of V.getMediasByType("video")){const t=m.getExtensions();S.forEach((U,f)=>{if(!t.get(f)){const h=m.getId(),r="a=extmap:"+f+" "+U+`\r
`,i=new RegExp("(a=mid:"+h+`\r
(?:.*\r
)*?)`,"g");l=l.replace(i,(a,s,n)=>s+r)}})}return l}},getCodecPayloadType(l){const e=/a=rtpmap:(\d+) (\w+)\/\d+/g,V=l.matchAll(e),b={};for(const S of V)b[S[1]]=S[2];return b}},fi=l=>l.getAudioTracks().some(e=>e.getSettings().channelCount>2),Ue={VP8:"vp8",VP9:"vp9",H264:"h264",AV1:"av1",H265:"h265"},Ui={OPUS:"opus",MULTIOPUS:"multiopus"},Wi="d40e38ea-d419-4c62-94ed-20ac37b4e4fa",P=Te.get("PeerConnection"),Dt={Publisher:"Publisher",Viewer:"Viewer"},Ne={track:"track",connectionStateChange:"connectionStateChange"},Er={stereo:!1,mediaStream:null,codec:"h264",simulcast:!1,scalabilityMode:null,disableAudio:!1,disableVideo:!1,setSDPToPeer:!0};class Qe extends Ct{constructor(){super(),this.mode=null,this.sessionDescription=null,this.peer=null,this.peerConnectionStats=null}async createRTCPeer(e={autoInitStats:!0,statsIntervalMs:1e3},V=Dt.Viewer){P.info("Creating new RTCPeerConnection"),P.debug("RTC configuration provided by user: ",e),this.peer=bi(this,e),this.mode=V,e.autoInitStats&&this.initStats(e)}getRTCPeer(){return P.info("Getting RTC Peer"),this.peer}async closeRTCPeer(){var e;P.info("Closing RTCPeerConnection"),(e=this.peer)==null||e.close(),this.peer=null,this.stopStats(),this.emit(Ne.connectionStateChange,"closed")}async setRTCRemoteSDP(e){P.info("Setting RTC Remote SDP");const V={type:"answer",sdp:e};try{await this.peer.setRemoteDescription(V),P.info("RTC Remote SDP was set successfully."),P.debug("RTC Remote SDP new value: ",e)}catch(b){throw P.error("Error while setting RTC Remote SDP: ",b),b}}async getRTCLocalSDP(e=Er){P.info("Getting RTC Local SDP"),e={...Er,...e},P.debug("Options: ",e);const V=Zi(e.mediaStream);V?gi(this.peer,V,e):Si(this.peer,e),P.info("Creating peer offer");const b=await this.peer.createOffer();return P.info("Peer offer created"),P.debug("Peer offer response: ",b.sdp),this.sessionDescription=b,e.disableAudio||(e.stereo&&(this.sessionDescription.sdp=me.setStereo(this.sessionDescription.sdp)),e.dtx&&(this.sessionDescription.sdp=me.setDTX(this.sessionDescription.sdp)),this.sessionDescription.sdp=me.setMultiopus(this.sessionDescription.sdp,V)),!e.disableVideo&&e.simulcast&&(this.sessionDescription.sdp=me.setSimulcast(this.sessionDescription.sdp,e.codec)),e.absCaptureTime&&(this.sessionDescription.sdp=me.setAbsoluteCaptureTime(this.sessionDescription.sdp)),e.dependencyDescriptor&&(this.sessionDescription.sdp=me.setDependencyDescriptor(this.sessionDescription.sdp)),e.setSDPToPeer&&(await this.peer.setLocalDescription(this.sessionDescription),P.info("Peer local description set")),this.sessionDescription.sdp}async addRemoteTrack(e,V){try{let b=this.peer.addTransceiver(e,{direction:"recvonly",streams:V});return b=await kr(b,V),b}catch(b){throw P.error("Error while adding the remote track: ",b),b}}updateBandwidthRestriction(e,V){if(this.mode===Dt.Viewer)throw P.error("Viewer attempting to update bitrate, this is not allowed"),new Error("It is not possible for a viewer to update the bitrate.");return P.info("Updating bandwidth restriction, bitrate value: ",V),P.debug("SDP value: ",e),me.setVideoBitrate(e,V)}async updateBitrate(e=0){if(this.mode===Dt.Viewer)throw P.error("Viewer attempting to update bitrate, this is not allowed"),new Error("It is not possible for a viewer to update the bitrate.");if(!this.peer)throw P.error("Cannot update bitrate. No peer found."),new Error("Cannot update bitrate. No peer found.");P.info("Updating bitrate to value: ",e),this.sessionDescription=await this.peer.createOffer(),await this.peer.setLocalDescription(this.sessionDescription);const V=this.updateBandwidthRestriction(this.peer.remoteDescription.sdp,e);await this.setRTCRemoteSDP(V),P.info("Bitrate restrictions updated: ",`${e>0?e:"unlimited"} kbps`)}getRTCPeerStatus(){if(P.info("Getting RTC peer status"),!this.peer)return null;const e=Ei(this.peer);return P.info("RTC peer status getted, value: ",e),e}replaceTrack(e){if(!this.peer){P.error("Could not change track if there is not an active connection.");return}const V=this.peer.getSenders().find(b=>b.track.kind===e.kind);V?V.replaceTrack(e):P.error(`There is no ${e.kind} track in active broadcast.`)}static getCapabilities(e){const V=new Et,b=RTCRtpSender.getCapabilities(e);if(b){const S={};let W=new RegExp(`^video/(${Object.values(Ue).join("|")})x?$`,"i");e==="audio"&&(W=new RegExp(`^audio/(${Object.values(Ui).join("|")})$`,"i"),V.isChrome()&&(S.multiopus={mimeType:"audio/multiopus",channels:6}));for(const m of b.codecs){const t=m.mimeType.match(W);if(t){const U=t[1].toLowerCase();if(S[U]={...S[U],mimeType:m.mimeType},m.scalabilityModes){let f=S[U].scalabilityModes||[];f=[...f,...m.scalabilityModes],S[U].scalabilityModes=[...new Set(f)]}m.channels&&(S[U].channels=m.channels)}}b.codecs=Object.keys(S).map(m=>({codec:m,...S[m]}))}return b}getTracks(){var e,V;return(V=(e=this.peer)==null?void 0:e.getSenders())==null?void 0:V.map(b=>b.track)}initStats(e){this.peerConnectionStats?P.warn("PeerConnection.initStats() has already been called. Automatic initialization occurs via View.connect(), Publish.connect() or this.createRTCPeer(). See options"):this.peer?(this.peerConnectionStats=new bs(this.peer,e),ot(this.peerConnectionStats,this,[er.stats])):P.warn("Cannot init peer stats: RTCPeerConnection not initialized")}stopStats(){var e;(e=this.peerConnectionStats)==null||e.stop(),this.peerConnectionStats=null}}const yr=l=>(l==null?void 0:l.getAudioTracks().length)<=1&&(l==null?void 0:l.getVideoTracks().length)<=1,Zi=l=>{if(!l)return null;if(l instanceof MediaStream&&yr(l))return l;if(!(l instanceof MediaStream)){P.info("Creating MediaStream to add received tracks.");const e=new MediaStream;for(const V of l)e.addTrack(V);if(yr(e))return e}throw P.error("MediaStream must have 1 audio track and 1 video track, or at least one of them."),new Error("MediaStream must have 1 audio track and 1 video track, or at least one of them.")},bi=(l,e)=>{const V=new RTCPeerConnection(e);return Fi(l,V),V},Fi=(l,e)=>{e.ontrack=V=>{P.info("New track from peer."),P.debug("Track event value: ",V),l.emit(Ne.track,V)},e.connectionState?e.onconnectionstatechange=V=>{P.info("Peer connection state change: ",e.connectionState),l.emit(Ne.connectionStateChange,e.connectionState)}:e.oniceconnectionstatechange=V=>{P.info("Peer ICE connection state change: ",e.iceConnectionState),l.emit(Ne.connectionStateChange,e.iceConnectionState)},e.onnegotiationneeded=async V=>{if(!e.remoteDescription)return;P.info("Peer onnegotiationneeded, updating local description");const b=await e.createOffer();P.info("Peer onnegotiationneeded, got local offer",b.sdp),b.sdp=me.updateMissingVideoExtensions(b.sdp,e.remoteDescription.sdp),await e.setLocalDescription(b);const S=me.renegotiate(b.sdp,e.remoteDescription.sdp);P.info("Peer onnegotiationneeded, updating remote description",S),await e.setRemoteDescription({type:"answer",sdp:S}),P.info("Peer onnegotiationneeded, renegotiation done")}},gi=(l,e,V)=>{P.info("Adding mediaStream tracks to RTCPeerConnection");for(const b of e.getTracks()){const S={streams:[e]};b.kind==="audio"&&(S.direction=V.disableAudio?"inactive":"sendonly"),b.kind==="video"&&(S.direction=V.disableVideo?"inactive":"sendonly",V.scalabilityMode&&new Et().isChrome()?(P.debug(`Video track with scalability mode: ${V.scalabilityMode}.`),S.sendEncodings=[{scalabilityMode:V.scalabilityMode}]):V.scalabilityMode&&P.warn("SVC is only supported in Google Chrome")),l.addTransceiver(b,S),P.info(`Track '${b.label}' added: `,`id: ${b.id}`,`kind: ${b.kind}`)}},Si=(l,e)=>{const V=new Et;if(!e.disableVideo){const b=l.addTransceiver("video",{direction:"recvonly"});V.isOpera()&&b.setCodecPreferences(RTCRtpReceiver.getCapabilities("video").codecs.filter(S=>S.mimeType!=="video/H264"||S.sdpFmtpLine.includes("profile-level-id=4")))}e.disableAudio||l.addTransceiver("audio",{direction:"recvonly"});for(let b=0;b<e.multiplexedAudioTracks;b++)l.addTransceiver("audio",{direction:"recvonly"})},kr=async(l,e,V=0)=>new Promise((b,S)=>{if(l.mid){for(const W of e)W.addTrack(l.receiver.track);b(l)}else V>=10?S(new Error("Error, maximum number of retries has been reached")):(V++,setTimeout(()=>{kr(l,e,V).then(b).catch(S)},50))}),Ei=l=>{const e=l.connectionState??l.iceConnectionState;switch(e){case"checking":return"connecting";case"completed":return"connected";default:return e}};var yn={};Object.defineProperty(yn,"__esModule",{value:!0}),yn.TypedEmitter=$t.EventEmitter;const{TypedEmitter:Nr}=yn;class yi extends Nr{constructor(e,V){super(),this.namespace=e,this.tm=V}cmd(e,V){return this.tm.cmd(e,V,this.namespace)}event(e,V){return this.tm.event(e,V,this.namespace)}close(){return this.tm.namespaces.delete(this.namespace)}}class ki extends Nr{constructor(e){super(),this.maxId=0,this.namespaces=new Map,this.transactions=new Map,this.transport=e,this.listener=V=>{let b;try{b=JSON.parse(V.utf8Data||V.data||V)}catch{return}switch(b.type){case"cmd":const{transId:W}=b,m={name:b.name,data:b.data,namespace:b.namespace,accept:U=>{this._send({type:"response",transId:W,data:U})},reject:U=>{this._send({type:"error",transId:W,data:U})}};if(m.namespace){const U=this.namespaces.get(m.namespace);U?U.emit("cmd",m):this.emit("cmd",m)}else this.emit("cmd",m);break;case"response":{const U=this.transactions.get(b.transId);if(!U)return;this.transactions.delete(b.transId),U.resolve(b.data);break}case"error":{const U=this.transactions.get(b.transId);if(!U)return;this.transactions.delete(b.transId),U.reject(b.data);break}case"event":const t={name:b.name,data:b.data,namespace:b.namespace};if(t.namespace){var S=this.namespaces.get(t.namespace);S?S.emit("event",t):this.emit("event",t)}else this.emit("event",t);break}},this.transport.addListener?this.transport.addListener("message",this.listener):this.transport.addEventListener("message",this.listener)}_send(e){this.transport.send(JSON.stringify(e))}cmd(e,V,b=void 0){return new Promise((S,W)=>{if(!e||e.length===0)throw new Error("Bad command name");const m={type:"cmd",transId:this.maxId++,name:e,data:V};b&&(m.namespace=b),this.transactions.set(m.transId,{...m,resolve:S,reject:W});try{this._send(m)}catch(t){throw this.transactions.delete(m.transId),t}})}event(e,V,b=void 0){if(!e||e.length===0)throw new Error("Bad event name");const S={type:"event",name:e,data:V};b&&(S.namespace=b),this._send(S)}namespace(e){let V=this.namespaces.get(e);return V||(V=new yi(e,this),this.namespaces.set(e,V),V)}close(){for(const e of this.namespaces.values())e.close();this.transport.removeListener?this.transport.removeListener("message",this.listener):this.transport.removeEventListener("message",this.listener)}}var Ni=ki;const Ji=_e(Ni),oe=Te.get("Signaling"),Ye={connectionSuccess:"wsConnectionSuccess",connectionError:"wsConnectionError",connectionClose:"wsConnectionClose",broadcastEvent:"broadcastEvent"};class kn extends Ct{constructor(e={streamName:null,url:"ws://localhost:8080/"}){super(),this.streamName=e.streamName,this.wsUrl=e.url,this.webSocket=null,this.transactionManager=null,this.serverId=null,this.clusterId=null,this.streamViewId=null}async connect(){var e;return oe.info("Connecting to Signaling Server"),this.transactionManager&&((e=this.webSocket)==null?void 0:e.readyState)===WebSocket.OPEN?(oe.info("Connected to server: ",this.webSocket.url),oe.debug("WebSocket value: ",{url:this.webSocket.url,protocol:this.webSocket.protocol,readyState:this.webSocket.readyState,binaryType:this.webSocket.binaryType,extensions:this.webSocket.extensions}),this.emit(Ye.connectionSuccess,{ws:this.webSocket,tm:this.transactionManager}),this.webSocket):new Promise((V,b)=>{this.webSocket=new WebSocket(this.wsUrl),this.transactionManager=new Ji(this.webSocket),this.webSocket.onopen=()=>{oe.info("WebSocket opened"),this.transactionManager.on("event",S=>{this.emit(Ye.broadcastEvent,S)}),oe.info("Connected to server: ",this.webSocket.url),oe.debug("WebSocket value: ",{url:this.webSocket.url,protocol:this.webSocket.protocol,readyState:this.webSocket.readyState,binaryType:this.webSocket.binaryType,extensions:this.webSocket.extensions}),this.emit(Ye.connectionSuccess,{ws:this.webSocket,tm:this.transactionManager}),V(this.webSocket)},this.webSocket.onerror=()=>{oe.error("WebSocket not connected: ",this.webSocket.url),this.emit(Ye.connectionError,this.webSocket.url),b(this.webSocket.url)},this.webSocket.onclose=()=>{this.webSocket=null,this.transactionManager=null,oe.info("Connection closed with Signaling Server."),this.emit(Ye.connectionClose)}})}close(){var e;oe.info("Closing connection with Signaling Server."),(e=this.webSocket)==null||e.close()}async subscribe(e,V,b=null,S=null){var t,U,f,h;oe.info("Starting subscription to streamName: ",this.streamName),oe.debug("Subcription local description: ",e);const W=Ti(V,b,S);e=me.adaptCodecName(e,"AV1X",Ue.AV1);const m={sdp:e,streamId:this.streamName,pinnedSourceId:W.pinnedSourceId,excludedSourceIds:W.excludedSourceIds};W.vad&&(m.vad=!0),Array.isArray(W.events)&&(m.events=W.events),W.forcePlayoutDelay&&(m.forcePlayoutDelay=W.forcePlayoutDelay),W.layer&&(m.layer=W.layer);try{await this.connect(),oe.info("Sending view command");const r=await this.transactionManager.cmd("view",m),i=(h=(f=(U=(t=RTCRtpReceiver.getCapabilities)==null?void 0:t.call(RTCRtpReceiver,"video"))==null?void 0:U.codecs)==null?void 0:f.find)==null?void 0:h.call(f,a=>a.mimeType==="video/AV1X");return r.sdp=i?me.adaptCodecName(r.sdp,Ue.AV1,"AV1X"):r.sdp,oe.info("Command sent, subscriberId: ",r.subscriberId),oe.debug("Command result: ",r),this.serverId=r.subscriberId,this.clusterId=r.clusterId,this.streamViewId=r.streamViewId,fe.initStreamName(this.streamName),fe.initSubscriberId(this.serverId),fe.initStreamViewId(r.streamViewId),fe.setClusterId(this.clusterId),r.sdp}catch(r){throw oe.error("Error sending view command, error: ",r),r}}async publish(e,V,b=null,S=null){var f,h,r,i,a,s,n;const W=wi(V,b,S);oe.info(`Starting publishing to streamName: ${this.streamName}, codec: ${W.codec}`),oe.debug("Publishing local description: ",e);const m=((r=(h=(f=Qe.getCapabilities)==null?void 0:f.call(Qe,"video"))==null?void 0:h.codecs)==null?void 0:r.map(c=>c.codec))??[],t=Object.values(Ue);if(t.indexOf(W.codec)===-1)throw oe.error(`Invalid codec ${W.codec}. Possible values are: `,t),new Error(`Invalid codec ${W.codec}. Possible values are: ${t}`);if(m.length>0&&m.indexOf(W.codec)===-1)throw oe.error(`Unsupported codec ${W.codec}. Possible values are: `,m),new Error(`Unsupported codec ${W.codec}. Possible values are: ${m}`);W.codec===Ue.AV1&&(e=me.adaptCodecName(e,"AV1X",Ue.AV1));const U={name:this.streamName,sdp:e,codec:W.codec,sourceId:W.sourceId};if(W.priority)if(Number.isInteger(W.priority)&&W.priority>=-2147483648&&W.priority<=2147483647)U.priority=W.priority;else throw new Error("Invalid value for priority option. It should be a decimal integer between the range [-2^31, +2^31 - 1]");W.record!==null&&(U.record=W.record),Array.isArray(W.events)&&(U.events=W.events);try{await this.connect(),oe.info("Sending publish command");const c=await this.transactionManager.cmd("publish",U);if(W.codec===Ue.AV1){const o=(n=(s=(a=(i=RTCRtpSender.getCapabilities)==null?void 0:i.call(RTCRtpSender,"video"))==null?void 0:a.codecs)==null?void 0:s.find)==null?void 0:n.call(s,d=>d.mimeType==="video/AV1X");c.sdp=o?me.adaptCodecName(c.sdp,Ue.AV1,"AV1X"):c.sdp}return oe.info("Command sent, publisherId: ",c.publisherId),oe.debug("Command result: ",c),this.serverId=c.publisherId,this.clusterId=c.clusterId,fe.initStreamName(this.streamName),fe.initSubscriberId(this.serverId),fe.initFeedId(c.feedId),fe.setClusterId(this.clusterId),c.sdp}catch(c){throw oe.error("Error sending publish command, error: ",c),c}}async cmd(e,V){return oe.info(`Sending cmd: ${e}`),this.transactionManager.cmd(e,V)}}const Ti=(l,e,V)=>{let b=typeof l=="object"?l:{};return Object.keys(b).length===0&&(b={vad:l,pinnedSourceId:e,excludedSourceIds:V}),b},wi=(l,e,V)=>{let b=typeof l=="object"?l:{};if(Object.keys(b).length===0){const S=Ue.H264;b={codec:l??S,record:e,sourceId:V}}return b};class Ot extends Error{constructor(e,V){super(e),this.name="FetchError",this.status=V}}const nt=Te.get("Director"),Mi={WEBRTC:"WebRtc",RTMP:"Rtmp"};let Jr="",Tr="https://director.millicast.com";const yt={setEndpoint:l=>{Tr=l.replace(/\/$/,"")},getEndpoint:()=>Tr,setLiveDomain:l=>{Jr=l.replace(/\/$/,"")},getLiveDomain:()=>Jr,getPublisher:async(l,e=null,V=Mi.WEBRTC)=>{const b=xi(l,e,V);nt.info("Getting publisher connection path for stream name: ",b.streamName);const S={streamName:b.streamName,streamType:b.streamType},W={"Content-Type":"application/json",Authorization:`Bearer ${b.token}`},m=`${yt.getEndpoint()}/api/director/publish`;try{const t=await fetch(m,{method:"POST",headers:W,body:JSON.stringify(S)});let U=await t.json();if(U.status==="fail")throw new Ot(U.data.message,t.status);return U=wr(U),nt.debug("Getting publisher response: ",U),fe.initAccountId(U.data.streamAccountId),U.data}catch(t){throw nt.error("Error while getting publisher connection path. ",t),t}},getSubscriber:async(l,e=null,V=null)=>{const b=vi(l,e,V);fe.initAccountId(b.streamAccountId),nt.info(`Getting subscriber connection data for stream name: ${b.streamName} and account id: ${b.streamAccountId}`);const S={streamAccountId:b.streamAccountId,streamName:b.streamName};let W={"Content-Type":"application/json"};b.subscriberToken&&(W={...W,Authorization:`Bearer ${b.subscriberToken}`});const m=`${yt.getEndpoint()}/api/director/subscribe`;try{const t=await fetch(m,{method:"POST",headers:W,body:JSON.stringify(S)});let U=await t.json();if(U.status==="fail")throw new Ot(U.data.message,t.status);return U=wr(U),nt.debug("Getting subscriber response: ",U),U.data}catch(t){throw nt.error("Error while getting subscriber connection path. ",t),t}}},xi=(l,e,V)=>{let b=typeof l=="object"?l:{};return Object.keys(b).length===0&&(b={token:l,streamName:e,streamType:V}),b},vi=(l,e,V)=>{let b=typeof l=="object"?l:{};return Object.keys(b).length===0&&(b={streamName:l,streamAccountId:e,subscriberToken:V}),b},wr=l=>{if(yt.getLiveDomain()){const e=/\/\/(.*?)\//,V=l.data.urls.map(b=>{const S=e.exec(b);return b.replace(S[1],yt.getLiveDomain())});l.data.urls=V}return l};function Nn(l){this.message=l}Nn.prototype=new Error,Nn.prototype.name="InvalidCharacterError";var Mr=typeof window<"u"&&window.atob&&window.atob.bind(window)||function(l){var e=String(l).replace(/=+$/,"");if(e.length%4==1)throw new Nn("'atob' failed: The string to be decoded is not correctly encoded.");for(var V,b,S=0,W=0,m="";b=e.charAt(W++);~b&&(V=S%4?64*V+b:b,S++%4)?m+=String.fromCharCode(255&V>>(-2*S&6)):0)b="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(b);return m};function Gi(l){var e=l.replace(/-/g,"+").replace(/_/g,"/");switch(e.length%4){case 0:break;case 2:e+="==";break;case 3:e+="=";break;default:throw"Illegal base64url string!"}try{return function(V){return decodeURIComponent(Mr(V).replace(/(.)/g,function(b,S){var W=S.charCodeAt(0).toString(16).toUpperCase();return W.length<2&&(W="0"+W),"%"+W}))}(e)}catch{return Mr(e)}}function Ht(l){this.message=l}function xr(l,e){if(typeof l!="string")throw new Ht("Invalid token specified");var V=(e=e||{}).header===!0?0:1;try{return JSON.parse(Gi(l.split(".")[V]))}catch(b){throw new Ht("Invalid token specified: "+b.message)}}Ht.prototype=new Error,Ht.prototype.name="InvalidTokenError";var Jn={exports:{}};(function(l,e){(function(V){if(e!=null&&typeof e.nodeType!="number")l.exports=V();else{var b=V(),S=typeof self<"u"?self:$.global;typeof S.btoa!="function"&&(S.btoa=b.btoa),typeof S.atob!="function"&&(S.atob=b.atob)}})(function(){var V="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function b(m){this.message=m}b.prototype=new Error,b.prototype.name="InvalidCharacterError";function S(m){for(var t=String(m),U,f,h,r,i=0,a="";i<t.length;){if(U=t.charCodeAt(i++),f=t.charCodeAt(i++),h=t.charCodeAt(i++),U>255||f>255||h>255)throw new b("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");r=U<<16|f<<8|h,a+=V.charAt(r>>18&63)+V.charAt(r>>12&63)+V.charAt(r>>6&63)+V.charAt(r&63)}switch(t.length%3){case 0:return a;case 1:return a.slice(0,-2)+"==";case 2:return a.slice(0,-1)+"="}}function W(m){var t=String(m).replace(/[=]+$/,"");if(t.length%4===1)throw new b("'atob' failed: The string to be decoded is not correctly encoded.");for(var U=0,f,h,r=0,i="";h=t.charAt(r++);~h&&(f=U%4?f*64+h:h,U++%4)?i+=String.fromCharCode(255&f>>(-2*U&6)):0)h=V.indexOf(h);return i}return{btoa:S,atob:W}})})(Jn,Jn.exports);var Qi=Jn.exports,vr={exports:{}};(function(l,e){(function(V,b){l.exports=b()})(self,()=>{return V={7629:(S,W,m)=>{const t=m(375),U=m(8571),f=m(9474),h=m(1687),r=m(8652),i=m(8160),a=m(3292),s=m(6354),n=m(8901),c=m(9708),o=m(6914),d=m(2294),u=m(6133),p=m(1152),g=m(8863),k=m(2036),N={Base:class{constructor(R){this.type=R,this.$_root=null,this._definition={},this._reset()}_reset(){this._ids=new d.Ids,this._preferences=null,this._refs=new u.Manager,this._cache=null,this._valids=null,this._invalids=null,this._flags={},this._rules=[],this._singleRules=new Map,this.$_terms={},this.$_temp={ruleset:null,whens:{}}}describe(){return t(typeof c.describe=="function","Manifest functionality disabled"),c.describe(this)}allow(...R){return i.verifyFlat(R,"allow"),this._values(R,"_valids")}alter(R){t(R&&typeof R=="object"&&!Array.isArray(R),"Invalid targets argument"),t(!this._inRuleset(),"Cannot set alterations inside a ruleset");const E=this.clone();E.$_terms.alterations=E.$_terms.alterations||[];for(const y in R){const w=R[y];t(typeof w=="function","Alteration adjuster for",y,"must be a function"),E.$_terms.alterations.push({target:y,adjuster:w})}return E.$_temp.ruleset=!1,E}artifact(R){return t(R!==void 0,"Artifact cannot be undefined"),t(!this._cache,"Cannot set an artifact with a rule cache"),this.$_setFlag("artifact",R)}cast(R){return t(R===!1||typeof R=="string","Invalid to value"),t(R===!1||this._definition.cast[R],"Type",this.type,"does not support casting to",R),this.$_setFlag("cast",R===!1?void 0:R)}default(R,E){return this._default("default",R,E)}description(R){return t(R&&typeof R=="string","Description must be a non-empty string"),this.$_setFlag("description",R)}empty(R){const E=this.clone();return R!==void 0&&(R=E.$_compile(R,{override:!1})),E.$_setFlag("empty",R,{clone:!1})}error(R){return t(R,"Missing error"),t(R instanceof Error||typeof R=="function","Must provide a valid Error object or a function"),this.$_setFlag("error",R)}example(R,E={}){return t(R!==void 0,"Missing example"),i.assertOptions(E,["override"]),this._inner("examples",R,{single:!0,override:E.override})}external(R,E){return typeof R=="object"&&(t(!E,"Cannot combine options with description"),E=R.description,R=R.method),t(typeof R=="function","Method must be a function"),t(E===void 0||E&&typeof E=="string","Description must be a non-empty string"),this._inner("externals",{method:R,description:E},{single:!0})}failover(R,E){return this._default("failover",R,E)}forbidden(){return this.presence("forbidden")}id(R){return R?(t(typeof R=="string","id must be a non-empty string"),t(/^[^\.]+$/.test(R),"id cannot contain period character"),this.$_setFlag("id",R)):this.$_setFlag("id",void 0)}invalid(...R){return this._values(R,"_invalids")}label(R){return t(R&&typeof R=="string","Label name must be a non-empty string"),this.$_setFlag("label",R)}meta(R){return t(R!==void 0,"Meta cannot be undefined"),this._inner("metas",R,{single:!0})}note(...R){t(R.length,"Missing notes");for(const E of R)t(E&&typeof E=="string","Notes must be non-empty strings");return this._inner("notes",R)}only(R=!0){return t(typeof R=="boolean","Invalid mode:",R),this.$_setFlag("only",R)}optional(){return this.presence("optional")}prefs(R){t(R,"Missing preferences"),t(R.context===void 0,"Cannot override context"),t(R.externals===void 0,"Cannot override externals"),t(R.warnings===void 0,"Cannot override warnings"),t(R.debug===void 0,"Cannot override debug"),i.checkPreferences(R);const E=this.clone();return E._preferences=i.preferences(E._preferences,R),E}presence(R){return t(["optional","required","forbidden"].includes(R),"Unknown presence mode",R),this.$_setFlag("presence",R)}raw(R=!0){return this.$_setFlag("result",R?"raw":void 0)}result(R){return t(["raw","strip"].includes(R),"Unknown result mode",R),this.$_setFlag("result",R)}required(){return this.presence("required")}strict(R){const E=this.clone(),y=R!==void 0&&!R;return E._preferences=i.preferences(E._preferences,{convert:y}),E}strip(R=!0){return this.$_setFlag("result",R?"strip":void 0)}tag(...R){t(R.length,"Missing tags");for(const E of R)t(E&&typeof E=="string","Tags must be non-empty strings");return this._inner("tags",R)}unit(R){return t(R&&typeof R=="string","Unit name must be a non-empty string"),this.$_setFlag("unit",R)}valid(...R){i.verifyFlat(R,"valid");const E=this.allow(...R);return E.$_setFlag("only",!!E._valids,{clone:!1}),E}when(R,E){const y=this.clone();y.$_terms.whens||(y.$_terms.whens=[]);const w=a.when(y,R,E);if(!["any","link"].includes(y.type)){const v=w.is?[w]:w.switch;for(const G of v)t(!G.then||G.then.type==="any"||G.then.type===y.type,"Cannot combine",y.type,"with",G.then&&G.then.type),t(!G.otherwise||G.otherwise.type==="any"||G.otherwise.type===y.type,"Cannot combine",y.type,"with",G.otherwise&&G.otherwise.type)}return y.$_terms.whens.push(w),y.$_mutateRebuild()}cache(R){t(!this._inRuleset(),"Cannot set caching inside a ruleset"),t(!this._cache,"Cannot override schema cache"),t(this._flags.artifact===void 0,"Cannot cache a rule with an artifact");const E=this.clone();return E._cache=R||r.provider.provision(),E.$_temp.ruleset=!1,E}clone(){const R=Object.create(Object.getPrototypeOf(this));return this._assign(R)}concat(R){t(i.isSchema(R),"Invalid schema object"),t(this.type==="any"||R.type==="any"||R.type===this.type,"Cannot merge type",this.type,"with another type:",R.type),t(!this._inRuleset(),"Cannot concatenate onto a schema with open ruleset"),t(!R._inRuleset(),"Cannot concatenate a schema with open ruleset");let E=this.clone();if(this.type==="any"&&R.type!=="any"){const y=R.clone();for(const w of Object.keys(E))w!=="type"&&(y[w]=E[w]);E=y}E._ids.concat(R._ids),E._refs.register(R,u.toSibling),E._preferences=E._preferences?i.preferences(E._preferences,R._preferences):R._preferences,E._valids=k.merge(E._valids,R._valids,R._invalids),E._invalids=k.merge(E._invalids,R._invalids,R._valids);for(const y of R._singleRules.keys())E._singleRules.has(y)&&(E._rules=E._rules.filter(w=>w.keep||w.name!==y),E._singleRules.delete(y));for(const y of R._rules)R._definition.rules[y.method].multi||E._singleRules.set(y.name,y),E._rules.push(y);if(E._flags.empty&&R._flags.empty){E._flags.empty=E._flags.empty.concat(R._flags.empty);const y=Object.assign({},R._flags);delete y.empty,h(E._flags,y)}else if(R._flags.empty){E._flags.empty=R._flags.empty;const y=Object.assign({},R._flags);delete y.empty,h(E._flags,y)}else h(E._flags,R._flags);for(const y in R.$_terms){const w=R.$_terms[y];w?E.$_terms[y]?E.$_terms[y]=E.$_terms[y].concat(w):E.$_terms[y]=w.slice():E.$_terms[y]||(E.$_terms[y]=w)}return this.$_root._tracer&&this.$_root._tracer._combine(E,[this,R]),E.$_mutateRebuild()}extend(R){return t(!R.base,"Cannot extend type with another base"),n.type(this,R)}extract(R){return R=Array.isArray(R)?R:R.split("."),this._ids.reach(R)}fork(R,E){t(!this._inRuleset(),"Cannot fork inside a ruleset");let y=this;for(let w of[].concat(R))w=Array.isArray(w)?w:w.split("."),y=y._ids.fork(w,E,y);return y.$_temp.ruleset=!1,y}rule(R){const E=this._definition;i.assertOptions(R,Object.keys(E.modifiers)),t(this.$_temp.ruleset!==!1,"Cannot apply rules to empty ruleset or the last rule added does not support rule properties");const y=this.$_temp.ruleset===null?this._rules.length-1:this.$_temp.ruleset;t(y>=0&&y<this._rules.length,"Cannot apply rules to empty ruleset");const w=this.clone();for(let v=y;v<w._rules.length;++v){const G=w._rules[v],j=U(G);for(const D in R)E.modifiers[D](j,R[D]),t(j.name===G.name,"Cannot change rule name");w._rules[v]=j,w._singleRules.get(j.name)===G&&w._singleRules.set(j.name,j)}return w.$_temp.ruleset=!1,w.$_mutateRebuild()}get ruleset(){t(!this._inRuleset(),"Cannot start a new ruleset without closing the previous one");const R=this.clone();return R.$_temp.ruleset=R._rules.length,R}get $(){return this.ruleset}tailor(R){R=[].concat(R),t(!this._inRuleset(),"Cannot tailor inside a ruleset");let E=this;if(this.$_terms.alterations)for(const{target:y,adjuster:w}of this.$_terms.alterations)R.includes(y)&&(E=w(E),t(i.isSchema(E),"Alteration adjuster for",y,"failed to return a schema object"));return E=E.$_modify({each:y=>y.tailor(R),ref:!1}),E.$_temp.ruleset=!1,E.$_mutateRebuild()}tracer(){return p.location?p.location(this):this}validate(R,E){return g.entry(R,this,E)}validateAsync(R,E){return g.entryAsync(R,this,E)}$_addRule(R){typeof R=="string"&&(R={name:R}),t(R&&typeof R=="object","Invalid options"),t(R.name&&typeof R.name=="string","Invalid rule name");for(const G in R)t(G[0]!=="_","Cannot set private rule properties");const E=Object.assign({},R);E._resolve=[],E.method=E.method||E.name;const y=this._definition.rules[E.method],w=E.args;t(y,"Unknown rule",E.method);const v=this.clone();if(w){t(Object.keys(w).length===1||Object.keys(w).length===this._definition.rules[E.name].args.length,"Invalid rule definition for",this.type,E.name);for(const G in w){let j=w[G];if(y.argsByName){const D=y.argsByName.get(G);if(D.ref&&i.isResolvable(j))E._resolve.push(G),v.$_mutateRegister(j);else if(D.normalize&&(j=D.normalize(j),w[G]=j),D.assert){const I=i.validateArg(j,G,D);t(!I,I,"or reference")}}j!==void 0?w[G]=j:delete w[G]}}return y.multi||(v._ruleRemove(E.name,{clone:!1}),v._singleRules.set(E.name,E)),v.$_temp.ruleset===!1&&(v.$_temp.ruleset=null),y.priority?v._rules.unshift(E):v._rules.push(E),v}$_compile(R,E){return a.schema(this.$_root,R,E)}$_createError(R,E,y,w,v,G={}){const j=G.flags!==!1?this._flags:{},D=G.messages?o.merge(this._definition.messages,G.messages):this._definition.messages;return new s.Report(R,E,y,j,D,w,v)}$_getFlag(R){return this._flags[R]}$_getRule(R){return this._singleRules.get(R)}$_mapLabels(R){return R=Array.isArray(R)?R:R.split("."),this._ids.labels(R)}$_match(R,E,y,w){(y=Object.assign({},y)).abortEarly=!0,y._externals=!1,E.snapshot();const v=!g.validate(R,this,E,y,w).errors;return E.restore(),v}$_modify(R){return i.assertOptions(R,["each","once","ref","schema"]),d.schema(this,R)||this}$_mutateRebuild(){return t(!this._inRuleset(),"Cannot add this rule inside a ruleset"),this._refs.reset(),this._ids.reset(),this.$_modify({each:(R,{source:E,name:y,path:w,key:v})=>{const G=this._definition[E][y]&&this._definition[E][y].register;G!==!1&&this.$_mutateRegister(R,{family:G,key:v})}}),this._definition.rebuild&&this._definition.rebuild(this),this.$_temp.ruleset=!1,this}$_mutateRegister(R,{family:E,key:y}={}){this._refs.register(R,E),this._ids.register(R,{key:y})}$_property(R){return this._definition.properties[R]}$_reach(R){return this._ids.reach(R)}$_rootReferences(){return this._refs.roots()}$_setFlag(R,E,y={}){t(R[0]==="_"||!this._inRuleset(),"Cannot set flag inside a ruleset");const w=this._definition.flags[R]||{};if(f(E,w.default)&&(E=void 0),f(E,this._flags[R]))return this;const v=y.clone!==!1?this.clone():this;return E!==void 0?(v._flags[R]=E,v.$_mutateRegister(E)):delete v._flags[R],R[0]!=="_"&&(v.$_temp.ruleset=!1),v}$_parent(R,...E){return this[R][i.symbols.parent].call(this,...E)}$_validate(R,E,y){return g.validate(R,this,E,y)}_assign(R){R.type=this.type,R.$_root=this.$_root,R.$_temp=Object.assign({},this.$_temp),R.$_temp.whens={},R._ids=this._ids.clone(),R._preferences=this._preferences,R._valids=this._valids&&this._valids.clone(),R._invalids=this._invalids&&this._invalids.clone(),R._rules=this._rules.slice(),R._singleRules=U(this._singleRules,{shallow:!0}),R._refs=this._refs.clone(),R._flags=Object.assign({},this._flags),R._cache=null,R.$_terms={};for(const E in this.$_terms)R.$_terms[E]=this.$_terms[E]?this.$_terms[E].slice():null;R.$_super={};for(const E in this.$_super)R.$_super[E]=this._super[E].bind(R);return R}_bare(){const R=this.clone();R._reset();const E=R._definition.terms;for(const y in E){const w=E[y];R.$_terms[y]=w.init}return R.$_mutateRebuild()}_default(R,E,y={}){return i.assertOptions(y,"literal"),t(E!==void 0,"Missing",R,"value"),t(typeof E=="function"||!y.literal,"Only function value supports literal option"),typeof E=="function"&&y.literal&&(E={[i.symbols.literal]:!0,literal:E}),this.$_setFlag(R,E)}_generate(R,E,y){if(!this.$_terms.whens)return{schema:this};const w=[],v=[];for(let D=0;D<this.$_terms.whens.length;++D){const I=this.$_terms.whens[D];if(I.concat){w.push(I.concat),v.push(`${D}.concat`);continue}const x=I.ref?I.ref.resolve(R,E,y):R,C=I.is?[I]:I.switch,O=v.length;for(let B=0;B<C.length;++B){const{is:X,then:_,otherwise:q}=C[B],se=`${D}${I.switch?"."+B:""}`;if(X.$_match(x,E.nest(X,`${se}.is`),y)){if(_){const ie=E.localize([...E.path,`${se}.then`],E.ancestors,E.schemas),{schema:de,id:Re}=_._generate(R,ie,y);w.push(de),v.push(`${se}.then${Re?`(${Re})`:""}`);break}}else if(q){const ie=E.localize([...E.path,`${se}.otherwise`],E.ancestors,E.schemas),{schema:de,id:Re}=q._generate(R,ie,y);w.push(de),v.push(`${se}.otherwise${Re?`(${Re})`:""}`);break}}if(I.break&&v.length>O)break}const G=v.join(", ");if(E.mainstay.tracer.debug(E,"rule","when",G),!G)return{schema:this};if(!E.mainstay.tracer.active&&this.$_temp.whens[G])return{schema:this.$_temp.whens[G],id:G};let j=this;this._definition.generate&&(j=this._definition.generate(this,R,E,y));for(const D of w)j=j.concat(D);return this.$_root._tracer&&this.$_root._tracer._combine(j,[this,...w]),this.$_temp.whens[G]=j,{schema:j,id:G}}_inner(R,E,y={}){t(!this._inRuleset(),`Cannot set ${R} inside a ruleset`);const w=this.clone();return w.$_terms[R]&&!y.override||(w.$_terms[R]=[]),y.single?w.$_terms[R].push(E):w.$_terms[R].push(...E),w.$_temp.ruleset=!1,w}_inRuleset(){return this.$_temp.ruleset!==null&&this.$_temp.ruleset!==!1}_ruleRemove(R,E={}){if(!this._singleRules.has(R))return this;const y=E.clone!==!1?this.clone():this;y._singleRules.delete(R);const w=[];for(let v=0;v<y._rules.length;++v){const G=y._rules[v];G.name!==R||G.keep?w.push(G):y._inRuleset()&&v<y.$_temp.ruleset&&--y.$_temp.ruleset}return y._rules=w,y}_values(R,E){i.verifyFlat(R,E.slice(1,-1));const y=this.clone(),w=R[0]===i.symbols.override;if(w&&(R=R.slice(1)),!y[E]&&R.length?y[E]=new k:w&&(y[E]=R.length?new k:null,y.$_mutateRebuild()),!y[E])return y;w&&y[E].override();for(const v of R){t(v!==void 0,"Cannot call allow/valid/invalid with undefined"),t(v!==i.symbols.override,"Override must be the first value");const G=E==="_invalids"?"_valids":"_invalids";y[G]&&(y[G].remove(v),y[G].length||(t(E==="_valids"||!y._flags.only,"Setting invalid value",v,"leaves schema rejecting all values due to previous valid rule"),y[G]=null)),y[E].add(v,y._refs)}return y}}};N.Base.prototype[i.symbols.any]={version:i.version,compile:a.compile,root:"$_root"},N.Base.prototype.isImmutable=!0,N.Base.prototype.deny=N.Base.prototype.invalid,N.Base.prototype.disallow=N.Base.prototype.invalid,N.Base.prototype.equal=N.Base.prototype.valid,N.Base.prototype.exist=N.Base.prototype.required,N.Base.prototype.not=N.Base.prototype.invalid,N.Base.prototype.options=N.Base.prototype.prefs,N.Base.prototype.preferences=N.Base.prototype.prefs,S.exports=new N.Base},8652:(S,W,m)=>{const t=m(375),U=m(8571),f=m(8160),h={max:1e3,supported:new Set(["undefined","boolean","number","string"])};W.provider={provision:r=>new h.Cache(r)},h.Cache=class{constructor(r={}){f.assertOptions(r,["max"]),t(r.max===void 0||r.max&&r.max>0&&isFinite(r.max),"Invalid max cache size"),this._max=r.max||h.max,this._map=new Map,this._list=new h.List}get length(){return this._map.size}set(r,i){if(r!==null&&!h.supported.has(typeof r))return;let a=this._map.get(r);if(a)return a.value=i,void this._list.first(a);a=this._list.unshift({key:r,value:i}),this._map.set(r,a),this._compact()}get(r){const i=this._map.get(r);if(i)return this._list.first(i),U(i.value)}_compact(){if(this._map.size>this._max){const r=this._list.pop();this._map.delete(r.key)}}},h.List=class{constructor(){this.tail=null,this.head=null}unshift(r){return r.next=null,r.prev=this.head,this.head&&(this.head.next=r),this.head=r,this.tail||(this.tail=r),r}first(r){r!==this.head&&(this._remove(r),this.unshift(r))}pop(){return this._remove(this.tail)}_remove(r){const{next:i,prev:a}=r;return i.prev=a,a&&(a.next=i),r===this.tail&&(this.tail=i),r.prev=null,r.next=null,r}}},8160:(S,W,m)=>{const t=m(375),U=m(7916),f=m(5934);let h,r;const i={isoDate:/^(?:[-+]\d{2})?(?:\d{4}(?!\d{2}\b))(?:(-?)(?:(?:0[1-9]|1[0-2])(?:\1(?:[12]\d|0[1-9]|3[01]))?|W(?:[0-4]\d|5[0-2])(?:-?[1-7])?|(?:00[1-9]|0[1-9]\d|[12]\d{2}|3(?:[0-5]\d|6[1-6])))(?![T]$|[T][\d]+Z$)(?:[T\s](?:(?:(?:[01]\d|2[0-3])(?:(:?)[0-5]\d)?|24\:?00)(?:[.,]\d+(?!:))?)(?:\2[0-5]\d(?:[.,]\d+)?)?(?:[Z]|(?:[+-])(?:[01]\d|2[0-3])(?::?[0-5]\d)?)?)?)?$/};W.version=f.version,W.defaults={abortEarly:!0,allowUnknown:!1,artifacts:!1,cache:!0,context:null,convert:!0,dateFormat:"iso",errors:{escapeHtml:!1,label:"path",language:null,render:!0,stack:!1,wrap:{label:'"',array:"[]"}},externals:!0,messages:{},nonEnumerables:!1,noDefaults:!1,presence:"optional",skipFunctions:!1,stripUnknown:!1,warnings:!1},W.symbols={any:Symbol.for("@hapi/joi/schema"),arraySingle:Symbol("arraySingle"),deepDefault:Symbol("deepDefault"),errors:Symbol("errors"),literal:Symbol("literal"),override:Symbol("override"),parent:Symbol("parent"),prefs:Symbol("prefs"),ref:Symbol("ref"),template:Symbol("template"),values:Symbol("values")},W.assertOptions=function(a,s,n="Options"){t(a&&typeof a=="object"&&!Array.isArray(a),"Options must be of type object");const c=Object.keys(a).filter(o=>!s.includes(o));t(c.length===0,`${n} contain unknown keys: ${c}`)},W.checkPreferences=function(a){r=r||m(3378);const s=r.preferences.validate(a);if(s.error)throw new U([s.error.details[0].message])},W.compare=function(a,s,n){switch(n){case"=":return a===s;case">":return a>s;case"<":return a<s;case">=":return a>=s;case"<=":return a<=s}},W.default=function(a,s){return a===void 0?s:a},W.isIsoDate=function(a){return i.isoDate.test(a)},W.isNumber=function(a){return typeof a=="number"&&!isNaN(a)},W.isResolvable=function(a){return!!a&&(a[W.symbols.ref]||a[W.symbols.template])},W.isSchema=function(a,s={}){const n=a&&a[W.symbols.any];return!!n&&(t(s.legacy||n.version===W.version,"Cannot mix different versions of joi schemas"),!0)},W.isValues=function(a){return a[W.symbols.values]},W.limit=function(a){return Number.isSafeInteger(a)&&a>=0},W.preferences=function(a,s){h=h||m(6914),a=a||{},s=s||{};const n=Object.assign({},a,s);return s.errors&&a.errors&&(n.errors=Object.assign({},a.errors,s.errors),n.errors.wrap=Object.assign({},a.errors.wrap,s.errors.wrap)),s.messages&&(n.messages=h.compile(s.messages,a.messages)),delete n[W.symbols.prefs],n},W.tryWithPath=function(a,s,n={}){try{return a()}catch(c){throw c.path!==void 0?c.path=s+"."+c.path:c.path=s,n.append&&(c.message=`${c.message} (${c.path})`),c}},W.validateArg=function(a,s,{assert:n,message:c}){if(W.isSchema(n)){const o=n.validate(a);return o.error?o.error.message:void 0}if(!n(a))return s?`${s} ${c}`:c},W.verifyFlat=function(a,s){for(const n of a)t(!Array.isArray(n),"Method no longer accepts array arguments:",s)}},3292:(S,W,m)=>{const t=m(375),U=m(8160),f=m(6133),h={};W.schema=function(r,i,a={}){U.assertOptions(a,["appendPath","override"]);try{return h.schema(r,i,a)}catch(s){throw a.appendPath&&s.path!==void 0&&(s.message=`${s.message} (${s.path})`),s}},h.schema=function(r,i,a){t(i!==void 0,"Invalid undefined schema"),Array.isArray(i)&&(t(i.length,"Invalid empty array schema"),i.length===1&&(i=i[0]));const s=(n,...c)=>a.override!==!1?n.valid(r.override,...c):n.valid(...c);if(h.simple(i))return s(r,i);if(typeof i=="function")return r.custom(i);if(t(typeof i=="object","Invalid schema content:",typeof i),U.isResolvable(i))return s(r,i);if(U.isSchema(i))return i;if(Array.isArray(i)){for(const n of i)if(!h.simple(n))return r.alternatives().try(...i);return s(r,...i)}return i instanceof RegExp?r.string().regex(i):i instanceof Date?s(r.date(),i):(t(Object.getPrototypeOf(i)===Object.getPrototypeOf({}),"Schema can only contain plain objects"),r.object().keys(i))},W.ref=function(r,i){return f.isRef(r)?r:f.create(r,i)},W.compile=function(r,i,a={}){U.assertOptions(a,["legacy"]);const s=i&&i[U.symbols.any];if(s)return t(a.legacy||s.version===U.version,"Cannot mix different versions of joi schemas:",s.version,U.version),i;if(typeof i!="object"||!a.legacy)return W.schema(r,i,{appendPath:!0});const n=h.walk(i);return n?n.compile(n.root,i):W.schema(r,i,{appendPath:!0})},h.walk=function(r){if(typeof r!="object")return null;if(Array.isArray(r)){for(const a of r){const s=h.walk(a);if(s)return s}return null}const i=r[U.symbols.any];if(i)return{root:r[i.root],compile:i.compile};t(Object.getPrototypeOf(r)===Object.getPrototypeOf({}),"Schema can only contain plain objects");for(const a in r){const s=h.walk(r[a]);if(s)return s}return null},h.simple=function(r){return r===null||["boolean","string","number"].includes(typeof r)},W.when=function(r,i,a){if(a===void 0&&(t(i&&typeof i=="object","Missing options"),a=i,i=f.create(".")),Array.isArray(a)&&(a={switch:a}),U.assertOptions(a,["is","not","then","otherwise","switch","break"]),U.isSchema(i))return t(a.is===void 0,'"is" can not be used with a schema condition'),t(a.not===void 0,'"not" can not be used with a schema condition'),t(a.switch===void 0,'"switch" can not be used with a schema condition'),h.condition(r,{is:i,then:a.then,otherwise:a.otherwise,break:a.break});if(t(f.isRef(i)||typeof i=="string","Invalid condition:",i),t(a.not===void 0||a.is===void 0,'Cannot combine "is" with "not"'),a.switch===void 0){let n=a;a.not!==void 0&&(n={is:a.not,then:a.otherwise,otherwise:a.then,break:a.break});let c=n.is!==void 0?r.$_compile(n.is):r.$_root.invalid(null,!1,0,"").required();return t(n.then!==void 0||n.otherwise!==void 0,'options must have at least one of "then", "otherwise", or "switch"'),t(n.break===void 0||n.then===void 0||n.otherwise===void 0,"Cannot specify then, otherwise, and break all together"),a.is===void 0||f.isRef(a.is)||U.isSchema(a.is)||(c=c.required()),h.condition(r,{ref:W.ref(i),is:c,then:n.then,otherwise:n.otherwise,break:n.break})}t(Array.isArray(a.switch),'"switch" must be an array'),t(a.is===void 0,'Cannot combine "switch" with "is"'),t(a.not===void 0,'Cannot combine "switch" with "not"'),t(a.then===void 0,'Cannot combine "switch" with "then"');const s={ref:W.ref(i),switch:[],break:a.break};for(let n=0;n<a.switch.length;++n){const c=a.switch[n],o=n===a.switch.length-1;U.assertOptions(c,o?["is","then","otherwise"]:["is","then"]),t(c.is!==void 0,'Switch statement missing "is"'),t(c.then!==void 0,'Switch statement missing "then"');const d={is:r.$_compile(c.is),then:r.$_compile(c.then)};if(f.isRef(c.is)||U.isSchema(c.is)||(d.is=d.is.required()),o){t(a.otherwise===void 0||c.otherwise===void 0,'Cannot specify "otherwise" inside and outside a "switch"');const u=a.otherwise!==void 0?a.otherwise:c.otherwise;u!==void 0&&(t(s.break===void 0,"Cannot specify both otherwise and break"),d.otherwise=r.$_compile(u))}s.switch.push(d)}return s},h.condition=function(r,i){for(const a of["then","otherwise"])i[a]===void 0?delete i[a]:i[a]=r.$_compile(i[a]);return i}},6354:(S,W,m)=>{const t=m(5688),U=m(8160),f=m(3328);W.Report=class{constructor(h,r,i,a,s,n,c){if(this.code=h,this.flags=a,this.messages=s,this.path=n.path,this.prefs=c,this.state=n,this.value=r,this.message=null,this.template=null,this.local=i||{},this.local.label=W.label(this.flags,this.state,this.prefs,this.messages),this.value===void 0||this.local.hasOwnProperty("value")||(this.local.value=this.value),this.path.length){const o=this.path[this.path.length-1];typeof o!="object"&&(this.local.key=o)}}_setTemplate(h){if(this.template=h,!this.flags.label&&this.path.length===0){const r=this._template(this.template,"root");r&&(this.local.label=r)}}toString(){if(this.message)return this.message;const h=this.code;if(!this.prefs.errors.render)return this.code;const r=this._template(this.template)||this._template(this.prefs.messages)||this._template(this.messages);return r===void 0?`Error code "${h}" is not defined, your custom type is missing the correct messages definition`:(this.message=r.render(this.value,this.state,this.prefs,this.local,{errors:this.prefs.errors,messages:[this.prefs.messages,this.messages]}),this.prefs.errors.label||(this.message=this.message.replace(/^"" /,"").trim()),this.message)}_template(h,r){return W.template(this.value,h,r||this.code,this.state,this.prefs)}},W.path=function(h){let r="";for(const i of h)typeof i!="object"&&(typeof i=="string"?(r&&(r+="."),r+=i):r+=`[${i}]`);return r},W.template=function(h,r,i,a,s){if(!r)return;if(f.isTemplate(r))return i!=="root"?r:null;let n=s.errors.language;if(U.isResolvable(n)&&(n=n.resolve(h,a,s)),n&&r[n]){if(r[n][i]!==void 0)return r[n][i];if(r[n]["*"]!==void 0)return r[n]["*"]}return r[i]?r[i]:r["*"]},W.label=function(h,r,i,a){if(h.label)return h.label;if(!i.errors.label)return"";let s=r.path;return i.errors.label==="key"&&r.path.length>1&&(s=r.path.slice(-1)),W.path(s)||W.template(null,i.messages,"root",r,i)||a&&W.template(null,a,"root",r,i)||"value"},W.process=function(h,r,i){if(!h)return null;const{override:a,message:s,details:n}=W.details(h);if(a)return a;if(i.errors.stack)return new W.ValidationError(s,n,r);const c=Error.stackTraceLimit;Error.stackTraceLimit=0;const o=new W.ValidationError(s,n,r);return Error.stackTraceLimit=c,o},W.details=function(h,r={}){let i=[];const a=[];for(const s of h){if(s instanceof Error){if(r.override!==!1)return{override:s};const c=s.toString();i.push(c),a.push({message:c,type:"override",context:{error:s}});continue}const n=s.toString();i.push(n),a.push({message:n,path:s.path.filter(c=>typeof c!="object"),type:s.code,context:s.local})}return i.length>1&&(i=[...new Set(i)]),{message:i.join(". "),details:a}},W.ValidationError=class extends Error{constructor(h,r,i){super(h),this._original=i,this.details=r}static isError(h){return h instanceof W.ValidationError}},W.ValidationError.prototype.isJoi=!0,W.ValidationError.prototype.name="ValidationError",W.ValidationError.prototype.annotate=t.error},8901:(S,W,m)=>{const t=m(375),U=m(8571),f=m(8160),h=m(6914),r={};W.type=function(i,a){const s=Object.getPrototypeOf(i),n=U(s),c=i._assign(Object.create(n)),o=Object.assign({},a);delete o.base,n._definition=o;const d=s._definition||{};o.messages=h.merge(d.messages,o.messages),o.properties=Object.assign({},d.properties,o.properties),c.type=o.type,o.flags=Object.assign({},d.flags,o.flags);const u=Object.assign({},d.terms);if(o.terms)for(const N in o.terms){const R=o.terms[N];t(c.$_terms[N]===void 0,"Invalid term override for",o.type,N),c.$_terms[N]=R.init,u[N]=R}o.terms=u,o.args||(o.args=d.args),o.prepare=r.prepare(o.prepare,d.prepare),o.coerce&&(typeof o.coerce=="function"&&(o.coerce={method:o.coerce}),o.coerce.from&&!Array.isArray(o.coerce.from)&&(o.coerce={method:o.coerce.method,from:[].concat(o.coerce.from)})),o.coerce=r.coerce(o.coerce,d.coerce),o.validate=r.validate(o.validate,d.validate);const p=Object.assign({},d.rules);if(o.rules)for(const N in o.rules){const R=o.rules[N];t(typeof R=="object","Invalid rule definition for",o.type,N);let E=R.method;if(E===void 0&&(E=function(){return this.$_addRule(N)}),E&&(t(!n[N],"Rule conflict in",o.type,N),n[N]=E),t(!p[N],"Rule conflict in",o.type,N),p[N]=R,R.alias){const y=[].concat(R.alias);for(const w of y)n[w]=R.method}R.args&&(R.argsByName=new Map,R.args=R.args.map(y=>(typeof y=="string"&&(y={name:y}),t(!R.argsByName.has(y.name),"Duplicated argument name",y.name),f.isSchema(y.assert)&&(y.assert=y.assert.strict().label(y.name)),R.argsByName.set(y.name,y),y)))}o.rules=p;const g=Object.assign({},d.modifiers);if(o.modifiers)for(const N in o.modifiers){t(!n[N],"Rule conflict in",o.type,N);const R=o.modifiers[N];t(typeof R=="function","Invalid modifier definition for",o.type,N);const E=function(y){return this.rule({[N]:y})};n[N]=E,g[N]=R}if(o.modifiers=g,o.overrides){n._super=s,c.$_super={};for(const N in o.overrides)t(s[N],"Cannot override missing",N),o.overrides[N][f.symbols.parent]=s[N],c.$_super[N]=s[N].bind(c);Object.assign(n,o.overrides)}o.cast=Object.assign({},d.cast,o.cast);const k=Object.assign({},d.manifest,o.manifest);return k.build=r.build(o.manifest&&o.manifest.build,d.manifest&&d.manifest.build),o.manifest=k,o.rebuild=r.rebuild(o.rebuild,d.rebuild),c},r.build=function(i,a){return i&&a?function(s,n){return a(i(s,n),n)}:i||a},r.coerce=function(i,a){return i&&a?{from:i.from&&a.from?[...new Set([...i.from,...a.from])]:null,method(s,n){let c;if((!a.from||a.from.includes(typeof s))&&(c=a.method(s,n),c)){if(c.errors||c.value===void 0)return c;s=c.value}if(!i.from||i.from.includes(typeof s)){const o=i.method(s,n);if(o)return o}return c}}:i||a},r.prepare=function(i,a){return i&&a?function(s,n){const c=i(s,n);if(c){if(c.errors||c.value===void 0)return c;s=c.value}return a(s,n)||c}:i||a},r.rebuild=function(i,a){return i&&a?function(s){a(s),i(s)}:i||a},r.validate=function(i,a){return i&&a?function(s,n){const c=a(s,n);if(c){if(c.errors&&(!Array.isArray(c.errors)||c.errors.length))return c;s=c.value}return i(s,n)||c}:i||a}},5107:(S,W,m)=>{const t=m(375),U=m(8571),f=m(8652),h=m(8160),r=m(3292),i=m(6354),a=m(8901),s=m(9708),n=m(6133),c=m(3328),o=m(1152);let d;const u={types:{alternatives:m(4946),any:m(8068),array:m(546),boolean:m(4937),date:m(7500),function:m(390),link:m(8785),number:m(3832),object:m(8966),string:m(7417),symbol:m(8826)},aliases:{alt:"alternatives",bool:"boolean",func:"function"},root:function(){const p={_types:new Set(Object.keys(u.types))};for(const g of p._types)p[g]=function(...k){return t(!k.length||["alternatives","link","object"].includes(g),"The",g,"type does not allow arguments"),u.generate(this,u.types[g],k)};for(const g of["allow","custom","disallow","equal","exist","forbidden","invalid","not","only","optional","options","prefs","preferences","required","strip","valid","when"])p[g]=function(...k){return this.any()[g](...k)};Object.assign(p,u.methods);for(const g in u.aliases){const k=u.aliases[g];p[g]=p[k]}return p.x=p.expression,o.setup&&o.setup(p),p}};u.methods={ValidationError:i.ValidationError,version:h.version,cache:f.provider,assert(p,g,...k){u.assert(p,g,!0,k)},attempt:(p,g,...k)=>u.assert(p,g,!1,k),build(p){return t(typeof s.build=="function","Manifest functionality disabled"),s.build(this,p)},checkPreferences(p){h.checkPreferences(p)},compile(p,g){return r.compile(this,p,g)},defaults(p){t(typeof p=="function","modifier must be a function");const g=Object.assign({},this);for(const k of g._types){const N=p(g[k]());t(h.isSchema(N),"modifier must return a valid schema object"),g[k]=function(...R){return u.generate(this,N,R)}}return g},expression:(...p)=>new c(...p),extend(...p){h.verifyFlat(p,"extend"),d=d||m(3378),t(p.length,"You need to provide at least one extension"),this.assert(p,d.extensions);const g=Object.assign({},this);g._types=new Set(g._types);for(let k of p){typeof k=="function"&&(k=k(g)),this.assert(k,d.extension);const N=u.expandExtension(k,g);for(const R of N){t(g[R.type]===void 0||g._types.has(R.type),"Cannot override name",R.type);const E=R.base||this.any(),y=a.type(E,R);g._types.add(R.type),g[R.type]=function(...w){return u.generate(this,y,w)}}}return g},isError:i.ValidationError.isError,isExpression:c.isTemplate,isRef:n.isRef,isSchema:h.isSchema,in:(...p)=>n.in(...p),override:h.symbols.override,ref:(...p)=>n.create(...p),types(){const p={};for(const g of this._types)p[g]=this[g]();for(const g in u.aliases)p[g]=this[g]();return p}},u.assert=function(p,g,k,N){const R=N[0]instanceof Error||typeof N[0]=="string"?N[0]:null,E=R!==null?N[1]:N[0],y=g.validate(p,h.preferences({errors:{stack:!0}},E||{}));let w=y.error;if(!w)return y.value;if(R instanceof Error)throw R;const v=k&&typeof w.annotate=="function"?w.annotate():w.message;throw w instanceof i.ValidationError==0&&(w=U(w)),w.message=R?`${R} ${v}`:v,w},u.generate=function(p,g,k){return t(p,"Must be invoked on a Joi instance."),g.$_root=p,g._definition.args&&k.length?g._definition.args(g,...k):g},u.expandExtension=function(p,g){if(typeof p.type=="string")return[p];const k=[];for(const N of g._types)if(p.type.test(N)){const R=Object.assign({},p);R.type=N,R.base=g[N](),k.push(R)}return k},S.exports=u.root()},6914:(S,W,m)=>{const t=m(375),U=m(8571),f=m(3328);W.compile=function(h,r){if(typeof h=="string")return t(!r,"Cannot set single message string"),new f(h);if(f.isTemplate(h))return t(!r,"Cannot set single message template"),h;t(typeof h=="object"&&!Array.isArray(h),"Invalid message options"),r=r?U(r):{};for(let i in h){const a=h[i];if(i==="root"||f.isTemplate(a)){r[i]=a;continue}if(typeof a=="string"){r[i]=new f(a);continue}t(typeof a=="object"&&!Array.isArray(a),"Invalid message for",i);const s=i;for(i in r[s]=r[s]||{},a){const n=a[i];i==="root"||f.isTemplate(n)?r[s][i]=n:(t(typeof n=="string","Invalid message for",i,"in",s),r[s][i]=new f(n))}}return r},W.decompile=function(h){const r={};for(let i in h){const a=h[i];if(i==="root"){r.root=a;continue}if(f.isTemplate(a)){r[i]=a.describe({compact:!0});continue}const s=i;for(i in r[s]={},a){const n=a[i];i!=="root"?r[s][i]=n.describe({compact:!0}):r[s].root=n}}return r},W.merge=function(h,r){if(!h)return W.compile(r);if(!r)return h;if(typeof r=="string")return new f(r);if(f.isTemplate(r))return r;const i=U(h);for(let a in r){const s=r[a];if(a==="root"||f.isTemplate(s)){i[a]=s;continue}if(typeof s=="string"){i[a]=new f(s);continue}t(typeof s=="object"&&!Array.isArray(s),"Invalid message for",a);const n=a;for(a in i[n]=i[n]||{},s){const c=s[a];a==="root"||f.isTemplate(c)?i[n][a]=c:(t(typeof c=="string","Invalid message for",a,"in",n),i[n][a]=new f(c))}}return i}},2294:(S,W,m)=>{const t=m(375),U=m(8160),f=m(6133),h={};W.Ids=h.Ids=class{constructor(){this._byId=new Map,this._byKey=new Map,this._schemaChain=!1}clone(){const r=new h.Ids;return r._byId=new Map(this._byId),r._byKey=new Map(this._byKey),r._schemaChain=this._schemaChain,r}concat(r){r._schemaChain&&(this._schemaChain=!0);for(const[i,a]of r._byId.entries())t(!this._byKey.has(i),"Schema id conflicts with existing key:",i),this._byId.set(i,a);for(const[i,a]of r._byKey.entries())t(!this._byId.has(i),"Schema key conflicts with existing id:",i),this._byKey.set(i,a)}fork(r,i,a){const s=this._collect(r);s.push({schema:a});const n=s.shift();let c={id:n.id,schema:i(n.schema)};t(U.isSchema(c.schema),"adjuster function failed to return a joi schema type");for(const o of s)c={id:o.id,schema:h.fork(o.schema,c.id,c.schema)};return c.schema}labels(r,i=[]){const a=r[0],s=this._get(a);if(!s)return[...i,...r].join(".");const n=r.slice(1);return i=[...i,s.schema._flags.label||a],n.length?s.schema._ids.labels(n,i):i.join(".")}reach(r,i=[]){const a=r[0],s=this._get(a);t(s,"Schema does not contain path",[...i,...r].join("."));const n=r.slice(1);return n.length?s.schema._ids.reach(n,[...i,a]):s.schema}register(r,{key:i}={}){if(!r||!U.isSchema(r))return;(r.$_property("schemaChain")||r._ids._schemaChain)&&(this._schemaChain=!0);const a=r._flags.id;if(a){const s=this._byId.get(a);t(!s||s.schema===r,"Cannot add different schemas with the same id:",a),t(!this._byKey.has(a),"Schema id conflicts with existing key:",a),this._byId.set(a,{schema:r,id:a})}i&&(t(!this._byKey.has(i),"Schema already contains key:",i),t(!this._byId.has(i),"Schema key conflicts with existing id:",i),this._byKey.set(i,{schema:r,id:i}))}reset(){this._byId=new Map,this._byKey=new Map,this._schemaChain=!1}_collect(r,i=[],a=[]){const s=r[0],n=this._get(s);t(n,"Schema does not contain path",[...i,...r].join(".")),a=[n,...a];const c=r.slice(1);return c.length?n.schema._ids._collect(c,[...i,s],a):a}_get(r){return this._byId.get(r)||this._byKey.get(r)}},h.fork=function(r,i,a){const s=W.schema(r,{each:(n,{key:c})=>{if(i===(n._flags.id||c))return a},ref:!1});return s?s.$_mutateRebuild():r},W.schema=function(r,i){let a;for(const s in r._flags){if(s[0]==="_")continue;const n=h.scan(r._flags[s],{source:"flags",name:s},i);n!==void 0&&(a=a||r.clone(),a._flags[s]=n)}for(let s=0;s<r._rules.length;++s){const n=r._rules[s],c=h.scan(n.args,{source:"rules",name:n.name},i);if(c!==void 0){a=a||r.clone();const o=Object.assign({},n);o.args=c,a._rules[s]=o,a._singleRules.get(n.name)===n&&a._singleRules.set(n.name,o)}}for(const s in r.$_terms){if(s[0]==="_")continue;const n=h.scan(r.$_terms[s],{source:"terms",name:s},i);n!==void 0&&(a=a||r.clone(),a.$_terms[s]=n)}return a},h.scan=function(r,i,a,s,n){const c=s||[];if(r===null||typeof r!="object")return;let o;if(Array.isArray(r)){for(let d=0;d<r.length;++d){const u=i.source==="terms"&&i.name==="keys"&&r[d].key,p=h.scan(r[d],i,a,[d,...c],u);p!==void 0&&(o=o||r.slice(),o[d]=p)}return o}if(a.schema!==!1&&U.isSchema(r)||a.ref!==!1&&f.isRef(r)){const d=a.each(r,{...i,path:c,key:n});return d===r?void 0:d}for(const d in r){if(d[0]==="_")continue;const u=h.scan(r[d],i,a,[d,...c],n);u!==void 0&&(o=o||Object.assign({},r),o[d]=u)}return o}},6133:(S,W,m)=>{const t=m(375),U=m(8571),f=m(9621),h=m(8160);let r;const i={symbol:Symbol("ref"),defaults:{adjust:null,in:!1,iterables:null,map:null,separator:".",type:"value"}};W.create=function(a,s={}){t(typeof a=="string","Invalid reference key:",a),h.assertOptions(s,["adjust","ancestor","in","iterables","map","prefix","render","separator"]),t(!s.prefix||typeof s.prefix=="object","options.prefix must be of type object");const n=Object.assign({},i.defaults,s);delete n.prefix;const c=n.separator,o=i.context(a,c,s.prefix);if(n.type=o.type,a=o.key,n.type==="value")if(o.root&&(t(!c||a[0]!==c,"Cannot specify relative path with root prefix"),n.ancestor="root",a||(a=null)),c&&c===a)a=null,n.ancestor=0;else if(n.ancestor!==void 0)t(!c||!a||a[0]!==c,"Cannot combine prefix with ancestor option");else{const[d,u]=i.ancestor(a,c);u&&(a=a.slice(u))===""&&(a=null),n.ancestor=d}return n.path=c?a===null?[]:a.split(c):[a],new i.Ref(n)},W.in=function(a,s={}){return W.create(a,{...s,in:!0})},W.isRef=function(a){return!!a&&!!a[h.symbols.ref]},i.Ref=class{constructor(a){t(typeof a=="object","Invalid reference construction"),h.assertOptions(a,["adjust","ancestor","in","iterables","map","path","render","separator","type","depth","key","root","display"]),t([!1,void 0].includes(a.separator)||typeof a.separator=="string"&&a.separator.length===1,"Invalid separator"),t(!a.adjust||typeof a.adjust=="function","options.adjust must be a function"),t(!a.map||Array.isArray(a.map),"options.map must be an array"),t(!a.map||!a.adjust,"Cannot set both map and adjust options"),Object.assign(this,i.defaults,a),t(this.type==="value"||this.ancestor===void 0,"Non-value references cannot reference ancestors"),Array.isArray(this.map)&&(this.map=new Map(this.map)),this.depth=this.path.length,this.key=this.path.length?this.path.join(this.separator):null,this.root=this.path[0],this.updateDisplay()}resolve(a,s,n,c,o={}){return t(!this.in||o.in,"Invalid in() reference usage"),this.type==="global"?this._resolve(n.context,s,o):this.type==="local"?this._resolve(c,s,o):this.ancestor?this.ancestor==="root"?this._resolve(s.ancestors[s.ancestors.length-1],s,o):(t(this.ancestor<=s.ancestors.length,"Invalid reference exceeds the schema root:",this.display),this._resolve(s.ancestors[this.ancestor-1],s,o)):this._resolve(a,s,o)}_resolve(a,s,n){let c;if(this.type==="value"&&s.mainstay.shadow&&n.shadow!==!1&&(c=s.mainstay.shadow.get(this.absolute(s))),c===void 0&&(c=f(a,this.path,{iterables:this.iterables,functions:!0})),this.adjust&&(c=this.adjust(c)),this.map){const o=this.map.get(c);o!==void 0&&(c=o)}return s.mainstay&&s.mainstay.tracer.resolve(s,this,c),c}toString(){return this.display}absolute(a){return[...a.path.slice(0,-this.ancestor),...this.path]}clone(){return new i.Ref(this)}describe(){const a={path:this.path};this.type!=="value"&&(a.type=this.type),this.separator!=="."&&(a.separator=this.separator),this.type==="value"&&this.ancestor!==1&&(a.ancestor=this.ancestor),this.map&&(a.map=[...this.map]);for(const s of["adjust","iterables","render"])this[s]!==null&&this[s]!==void 0&&(a[s]=this[s]);return this.in!==!1&&(a.in=!0),{ref:a}}updateDisplay(){const a=this.key!==null?this.key:"";if(this.type!=="value")return void(this.display=`ref:${this.type}:${a}`);if(!this.separator)return void(this.display=`ref:${a}`);if(!this.ancestor)return void(this.display=`ref:${this.separator}${a}`);if(this.ancestor==="root")return void(this.display=`ref:root:${a}`);if(this.ancestor===1)return void(this.display=`ref:${a||".."}`);const s=new Array(this.ancestor+1).fill(this.separator).join("");this.display=`ref:${s}${a||""}`}},i.Ref.prototype[h.symbols.ref]=!0,W.build=function(a){return(a=Object.assign({},i.defaults,a)).type==="value"&&a.ancestor===void 0&&(a.ancestor=1),new i.Ref(a)},i.context=function(a,s,n={}){if(a=a.trim(),n){const c=n.global===void 0?"$":n.global;if(c!==s&&a.startsWith(c))return{key:a.slice(c.length),type:"global"};const o=n.local===void 0?"#":n.local;if(o!==s&&a.startsWith(o))return{key:a.slice(o.length),type:"local"};const d=n.root===void 0?"/":n.root;if(d!==s&&a.startsWith(d))return{key:a.slice(d.length),type:"value",root:!0}}return{key:a,type:"value"}},i.ancestor=function(a,s){if(!s)return[1,0];if(a[0]!==s)return[1,0];if(a[1]!==s)return[0,1];let n=2;for(;a[n]===s;)++n;return[n-1,n]},W.toSibling=0,W.toParent=1,W.Manager=class{constructor(){this.refs=[]}register(a,s){if(a)if(s=s===void 0?W.toParent:s,Array.isArray(a))for(const n of a)this.register(n,s);else if(h.isSchema(a))for(const n of a._refs.refs)n.ancestor-s>=0&&this.refs.push({ancestor:n.ancestor-s,root:n.root});else W.isRef(a)&&a.type==="value"&&a.ancestor-s>=0&&this.refs.push({ancestor:a.ancestor-s,root:a.root}),r=r||m(3328),r.isTemplate(a)&&this.register(a.refs(),s)}get length(){return this.refs.length}clone(){const a=new W.Manager;return a.refs=U(this.refs),a}reset(){this.refs=[]}roots(){return this.refs.filter(a=>!a.ancestor).map(a=>a.root)}}},3378:(S,W,m)=>{const t=m(5107),U={};U.wrap=t.string().min(1).max(2).allow(!1),W.preferences=t.object({allowUnknown:t.boolean(),abortEarly:t.boolean(),artifacts:t.boolean(),cache:t.boolean(),context:t.object(),convert:t.boolean(),dateFormat:t.valid("date","iso","string","time","utc"),debug:t.boolean(),errors:{escapeHtml:t.boolean(),label:t.valid("path","key",!1),language:[t.string(),t.object().ref()],render:t.boolean(),stack:t.boolean(),wrap:{label:U.wrap,array:U.wrap,string:U.wrap}},externals:t.boolean(),messages:t.object(),noDefaults:t.boolean(),nonEnumerables:t.boolean(),presence:t.valid("required","optional","forbidden"),skipFunctions:t.boolean(),stripUnknown:t.object({arrays:t.boolean(),objects:t.boolean()}).or("arrays","objects").allow(!0,!1),warnings:t.boolean()}).strict(),U.nameRx=/^[a-zA-Z0-9]\w*$/,U.rule=t.object({alias:t.array().items(t.string().pattern(U.nameRx)).single(),args:t.array().items(t.string(),t.object({name:t.string().pattern(U.nameRx).required(),ref:t.boolean(),assert:t.alternatives([t.function(),t.object().schema()]).conditional("ref",{is:!0,then:t.required()}),normalize:t.function(),message:t.string().when("assert",{is:t.function(),then:t.required()})})),convert:t.boolean(),manifest:t.boolean(),method:t.function().allow(!1),multi:t.boolean(),validate:t.function()}),W.extension=t.object({type:t.alternatives([t.string(),t.object().regex()]).required(),args:t.function(),cast:t.object().pattern(U.nameRx,t.object({from:t.function().maxArity(1).required(),to:t.function().minArity(1).maxArity(2).required()})),base:t.object().schema().when("type",{is:t.object().regex(),then:t.forbidden()}),coerce:[t.function().maxArity(3),t.object({method:t.function().maxArity(3).required(),from:t.array().items(t.string()).single()})],flags:t.object().pattern(U.nameRx,t.object({setter:t.string(),default:t.any()})),manifest:{build:t.function().arity(2)},messages:[t.object(),t.string()],modifiers:t.object().pattern(U.nameRx,t.function().minArity(1).maxArity(2)),overrides:t.object().pattern(U.nameRx,t.function()),prepare:t.function().maxArity(3),rebuild:t.function().arity(1),rules:t.object().pattern(U.nameRx,U.rule),terms:t.object().pattern(U.nameRx,t.object({init:t.array().allow(null).required(),manifest:t.object().pattern(/.+/,[t.valid("schema","single"),t.object({mapped:t.object({from:t.string().required(),to:t.string().required()}).required()})])})),validate:t.function().maxArity(3)}).strict(),W.extensions=t.array().items(t.object(),t.function().arity(1)).strict(),U.desc={buffer:t.object({buffer:t.string()}),func:t.object({function:t.function().required(),options:{literal:!0}}),override:t.object({override:!0}),ref:t.object({ref:t.object({type:t.valid("value","global","local"),path:t.array().required(),separator:t.string().length(1).allow(!1),ancestor:t.number().min(0).integer().allow("root"),map:t.array().items(t.array().length(2)).min(1),adjust:t.function(),iterables:t.boolean(),in:t.boolean(),render:t.boolean()}).required()}),regex:t.object({regex:t.string().min(3)}),special:t.object({special:t.valid("deep").required()}),template:t.object({template:t.string().required(),options:t.object()}),value:t.object({value:t.alternatives([t.object(),t.array()]).required()})},U.desc.entity=t.alternatives([t.array().items(t.link("...")),t.boolean(),t.function(),t.number(),t.string(),U.desc.buffer,U.desc.func,U.desc.ref,U.desc.regex,U.desc.special,U.desc.template,U.desc.value,t.link("/")]),U.desc.values=t.array().items(null,t.boolean(),t.function(),t.number().allow(1/0,-1/0),t.string().allow(""),t.symbol(),U.desc.buffer,U.desc.func,U.desc.override,U.desc.ref,U.desc.regex,U.desc.template,U.desc.value),U.desc.messages=t.object().pattern(/.+/,[t.string(),U.desc.template,t.object().pattern(/.+/,[t.string(),U.desc.template])]),W.description=t.object({type:t.string().required(),flags:t.object({cast:t.string(),default:t.any(),description:t.string(),empty:t.link("/"),failover:U.desc.entity,id:t.string(),label:t.string(),only:!0,presence:["optional","required","forbidden"],result:["raw","strip"],strip:t.boolean(),unit:t.string()}).unknown(),preferences:{allowUnknown:t.boolean(),abortEarly:t.boolean(),artifacts:t.boolean(),cache:t.boolean(),convert:t.boolean(),dateFormat:["date","iso","string","time","utc"],errors:{escapeHtml:t.boolean(),label:["path","key"],language:[t.string(),U.desc.ref],wrap:{label:U.wrap,array:U.wrap}},externals:t.boolean(),messages:U.desc.messages,noDefaults:t.boolean(),nonEnumerables:t.boolean(),presence:["required","optional","forbidden"],skipFunctions:t.boolean(),stripUnknown:t.object({arrays:t.boolean(),objects:t.boolean()}).or("arrays","objects").allow(!0,!1),warnings:t.boolean()},allow:U.desc.values,invalid:U.desc.values,rules:t.array().min(1).items({name:t.string().required(),args:t.object().min(1),keep:t.boolean(),message:[t.string(),U.desc.messages],warn:t.boolean()}),keys:t.object().pattern(/.*/,t.link("/")),link:U.desc.ref}).pattern(/^[a-z]\w*$/,t.any())},493:(S,W,m)=>{const t=m(8571),U=m(9621),f=m(8160),h={value:Symbol("value")};S.exports=h.State=class{constructor(r,i,a){this.path=r,this.ancestors=i,this.mainstay=a.mainstay,this.schemas=a.schemas,this.debug=null}localize(r,i=null,a=null){const s=new h.State(r,i,this);return a&&s.schemas&&(s.schemas=[h.schemas(a),...s.schemas]),s}nest(r,i){const a=new h.State(this.path,this.ancestors,this);return a.schemas=a.schemas&&[h.schemas(r),...a.schemas],a.debug=i,a}shadow(r,i){this.mainstay.shadow=this.mainstay.shadow||new h.Shadow,this.mainstay.shadow.set(this.path,r,i)}snapshot(){this.mainstay.shadow&&(this._snapshot=t(this.mainstay.shadow.node(this.path))),this.mainstay.snapshot()}restore(){this.mainstay.shadow&&(this.mainstay.shadow.override(this.path,this._snapshot),this._snapshot=void 0),this.mainstay.restore()}commit(){this.mainstay.shadow&&(this.mainstay.shadow.override(this.path,this._snapshot),this._snapshot=void 0),this.mainstay.commit()}},h.schemas=function(r){return f.isSchema(r)?{schema:r}:r},h.Shadow=class{constructor(){this._values=null}set(r,i,a){if(!r.length||a==="strip"&&typeof r[r.length-1]=="number")return;this._values=this._values||new Map;let s=this._values;for(let n=0;n<r.length;++n){const c=r[n];let o=s.get(c);o||(o=new Map,s.set(c,o)),s=o}s[h.value]=i}get(r){const i=this.node(r);if(i)return i[h.value]}node(r){if(this._values)return U(this._values,r,{iterables:!0})}override(r,i){if(!this._values)return;const a=r.slice(0,-1),s=r[r.length-1],n=U(this._values,a,{iterables:!0});i?n.set(s,i):n&&n.delete(s)}}},3328:(S,W,m)=>{const t=m(375),U=m(8571),f=m(5277),h=m(1447),r=m(8160),i=m(6354),a=m(6133),s={symbol:Symbol("template"),opens:new Array(1e3).join("\0"),closes:new Array(1e3).join(""),dateFormat:{date:Date.prototype.toDateString,iso:Date.prototype.toISOString,string:Date.prototype.toString,time:Date.prototype.toTimeString,utc:Date.prototype.toUTCString}};S.exports=s.Template=class{constructor(n,c){if(t(typeof n=="string","Template source must be a string"),t(!n.includes("\0")&&!n.includes(""),"Template source cannot contain reserved control characters"),this.source=n,this.rendered=n,this._template=null,c){const{functions:o,...d}=c;this._settings=Object.keys(d).length?U(d):void 0,this._functions=o,this._functions&&(t(Object.keys(this._functions).every(u=>typeof u=="string"),"Functions keys must be strings"),t(Object.values(this._functions).every(u=>typeof u=="function"),"Functions values must be functions"))}else this._settings=void 0,this._functions=void 0;this._parse()}_parse(){if(!this.source.includes("{"))return;const n=s.encode(this.source),c=s.split(n);let o=!1;const d=[],u=c.shift();u&&d.push(u);for(const p of c){const g=p[0]!=="{",k=g?"}":"}}",N=p.indexOf(k);if(N===-1||p[1]==="{"){d.push(`{${s.decode(p)}`);continue}let R=p.slice(g?0:1,N);const E=R[0]===":";E&&(R=R.slice(1));const y=this._ref(s.decode(R),{raw:g,wrapped:E});d.push(y),typeof y!="string"&&(o=!0);const w=p.slice(N+k.length);w&&d.push(s.decode(w))}o?this._template=d:this.rendered=d.join("")}static date(n,c){return s.dateFormat[c.dateFormat].call(n)}describe(n={}){if(!this._settings&&n.compact)return this.source;const c={template:this.source};return this._settings&&(c.options=this._settings),this._functions&&(c.functions=this._functions),c}static build(n){return new s.Template(n.template,n.options||n.functions?{...n.options,functions:n.functions}:void 0)}isDynamic(){return!!this._template}static isTemplate(n){return!!n&&!!n[r.symbols.template]}refs(){if(!this._template)return;const n=[];for(const c of this._template)typeof c!="string"&&n.push(...c.refs);return n}resolve(n,c,o,d){return this._template&&this._template.length===1?this._part(this._template[0],n,c,o,d,{}):this.render(n,c,o,d)}_part(n,...c){return n.ref?n.ref.resolve(...c):n.formula.evaluate(c)}render(n,c,o,d,u={}){if(!this.isDynamic())return this.rendered;const p=[];for(const g of this._template)if(typeof g=="string")p.push(g);else{const k=this._part(g,n,c,o,d,u),N=s.stringify(k,n,c,o,d,u);if(N!==void 0){const R=g.raw||(u.errors&&u.errors.escapeHtml)===!1?N:f(N);p.push(s.wrap(R,g.wrapped&&o.errors.wrap.label))}}return p.join("")}_ref(n,{raw:c,wrapped:o}){const d=[],u=g=>{const k=a.create(g,this._settings);return d.push(k),N=>{const R=k.resolve(...N);return R!==void 0?R:null}};try{const g=this._functions?{...s.functions,...this._functions}:s.functions;var p=new h.Parser(n,{reference:u,functions:g,constants:s.constants})}catch(g){throw g.message=`Invalid template variable "${n}" fails due to: ${g.message}`,g}if(p.single){if(p.single.type==="reference"){const g=d[0];return{ref:g,raw:c,refs:d,wrapped:o||g.type==="local"&&g.key==="label"}}return s.stringify(p.single.value)}return{formula:p,raw:c,refs:d}}toString(){return this.source}},s.Template.prototype[r.symbols.template]=!0,s.Template.prototype.isImmutable=!0,s.encode=function(n){return n.replace(/\\(\{+)/g,(c,o)=>s.opens.slice(0,o.length)).replace(/\\(\}+)/g,(c,o)=>s.closes.slice(0,o.length))},s.decode=function(n){return n.replace(/\u0000/g,"{").replace(/\u0001/g,"}")},s.split=function(n){const c=[];let o="";for(let d=0;d<n.length;++d){const u=n[d];if(u==="{"){let p="";for(;d+1<n.length&&n[d+1]==="{";)p+="{",++d;c.push(o),o=p}else o+=u}return c.push(o),c},s.wrap=function(n,c){return c?c.length===1?`${c}${n}${c}`:`${c[0]}${n}${c[1]}`:n},s.stringify=function(n,c,o,d,u,p={}){const g=typeof n,k=d&&d.errors&&d.errors.wrap||{};let N=!1;if(a.isRef(n)&&n.render&&(N=n.in,n=n.resolve(c,o,d,u,{in:n.in,...p})),n===null)return"null";if(g==="string")return s.wrap(n,p.arrayItems&&k.string);if(g==="number"||g==="function"||g==="symbol")return n.toString();if(g!=="object")return JSON.stringify(n);if(n instanceof Date)return s.Template.date(n,d);if(n instanceof Map){const E=[];for(const[y,w]of n.entries())E.push(`${y.toString()} -> ${w.toString()}`);n=E}if(!Array.isArray(n))return n.toString();const R=[];for(const E of n)R.push(s.stringify(E,c,o,d,u,{arrayItems:!0,...p}));return s.wrap(R.join(", "),!N&&k.array)},s.constants={true:!0,false:!1,null:null,second:1e3,minute:6e4,hour:36e5,day:864e5},s.functions={if:(n,c,o)=>n?c:o,length:n=>typeof n=="string"?n.length:n&&typeof n=="object"?Array.isArray(n)?n.length:Object.keys(n).length:null,msg(n){const[c,o,d,u,p]=this,g=p.messages;if(!g)return"";const k=i.template(c,g[0],n,o,d)||i.template(c,g[1],n,o,d);return k?k.render(c,o,d,u,p):""},number:n=>typeof n=="number"?n:typeof n=="string"?parseFloat(n):typeof n=="boolean"?n?1:0:n instanceof Date?n.getTime():null}},4946:(S,W,m)=>{const t=m(375),U=m(1687),f=m(8068),h=m(8160),r=m(3292),i=m(6354),a=m(6133),s={};S.exports=f.extend({type:"alternatives",flags:{match:{default:"any"}},terms:{matches:{init:[],register:a.toSibling}},args:(n,...c)=>c.length===1&&Array.isArray(c[0])?n.try(...c[0]):n.try(...c),validate(n,c){const{schema:o,error:d,state:u,prefs:p}=c;if(o._flags.match){const k=[],N=[];for(let E=0;E<o.$_terms.matches.length;++E){const y=o.$_terms.matches[E],w=u.nest(y.schema,`match.${E}`);w.snapshot();const v=y.schema.$_validate(n,w,p);v.errors?(N.push(v.errors),w.restore()):(k.push(v.value),w.commit())}if(k.length===0)return{errors:d("alternatives.any",{details:N.map(E=>i.details(E,{override:!1}))})};if(o._flags.match==="one")return k.length===1?{value:k[0]}:{errors:d("alternatives.one")};if(k.length!==o.$_terms.matches.length)return{errors:d("alternatives.all",{details:N.map(E=>i.details(E,{override:!1}))})};const R=E=>E.$_terms.matches.some(y=>y.schema.type==="object"||y.schema.type==="alternatives"&&R(y.schema));return R(o)?{value:k.reduce((E,y)=>U(E,y,{mergeArrays:!1}))}:{value:k[k.length-1]}}const g=[];for(let k=0;k<o.$_terms.matches.length;++k){const N=o.$_terms.matches[k];if(N.schema){const y=u.nest(N.schema,`match.${k}`);y.snapshot();const w=N.schema.$_validate(n,y,p);if(!w.errors)return y.commit(),w;y.restore(),g.push({schema:N.schema,reports:w.errors});continue}const R=N.ref?N.ref.resolve(n,u,p):n,E=N.is?[N]:N.switch;for(let y=0;y<E.length;++y){const w=E[y],{is:v,then:G,otherwise:j}=w,D=`match.${k}${N.switch?"."+y:""}`;if(v.$_match(R,u.nest(v,`${D}.is`),p)){if(G)return G.$_validate(n,u.nest(G,`${D}.then`),p)}else if(j)return j.$_validate(n,u.nest(j,`${D}.otherwise`),p)}}return s.errors(g,c)},rules:{conditional:{method(n,c){t(!this._flags._endedSwitch,"Unreachable condition"),t(!this._flags.match,"Cannot combine match mode",this._flags.match,"with conditional rule"),t(c.break===void 0,"Cannot use break option with alternatives conditional");const o=this.clone(),d=r.when(o,n,c),u=d.is?[d]:d.switch;for(const p of u)if(p.then&&p.otherwise){o.$_setFlag("_endedSwitch",!0,{clone:!1});break}return o.$_terms.matches.push(d),o.$_mutateRebuild()}},match:{method(n){if(t(["any","one","all"].includes(n),"Invalid alternatives match mode",n),n!=="any")for(const c of this.$_terms.matches)t(c.schema,"Cannot combine match mode",n,"with conditional rules");return this.$_setFlag("match",n)}},try:{method(...n){t(n.length,"Missing alternative schemas"),h.verifyFlat(n,"try"),t(!this._flags._endedSwitch,"Unreachable condition");const c=this.clone();for(const o of n)c.$_terms.matches.push({schema:c.$_compile(o)});return c.$_mutateRebuild()}}},overrides:{label(n){return this.$_parent("label",n).$_modify({each:(c,o)=>o.path[0]!=="is"&&typeof c._flags.label!="string"?c.label(n):void 0,ref:!1})}},rebuild(n){n.$_modify({each:c=>{h.isSchema(c)&&c.type==="array"&&n.$_setFlag("_arrayItems",!0,{clone:!1})}})},manifest:{build(n,c){if(c.matches)for(const o of c.matches){const{schema:d,ref:u,is:p,not:g,then:k,otherwise:N}=o;n=d?n.try(d):u?n.conditional(u,{is:p,then:k,not:g,otherwise:N,switch:o.switch}):n.conditional(p,{then:k,otherwise:N})}return n}},messages:{"alternatives.all":"{{#label}} does not match all of the required types","alternatives.any":"{{#label}} does not match any of the allowed types","alternatives.match":"{{#label}} does not match any of the allowed types","alternatives.one":"{{#label}} matches more than one allowed type","alternatives.types":"{{#label}} must be one of {{#types}}"}}),s.errors=function(n,{error:c,state:o}){if(!n.length)return{errors:c("alternatives.any")};if(n.length===1)return{errors:n[0].reports};const d=new Set,u=[];for(const{reports:p,schema:g}of n){if(p.length>1)return s.unmatched(n,c);const k=p[0];if(k instanceof i.Report==0)return s.unmatched(n,c);if(k.state.path.length!==o.path.length){u.push({type:g.type,report:k});continue}if(k.code==="any.only"){for(const E of k.local.valids)d.add(E);continue}const[N,R]=k.code.split(".");R==="base"?d.add(N):u.push({type:g.type,report:k})}return u.length?u.length===1?{errors:u[0].report}:s.unmatched(n,c):{errors:c("alternatives.types",{types:[...d]})}},s.unmatched=function(n,c){const o=[];for(const d of n)o.push(...d.reports);return{errors:c("alternatives.match",i.details(o,{override:!1}))}}},8068:(S,W,m)=>{const t=m(375),U=m(7629),f=m(8160),h=m(6914);S.exports=U.extend({type:"any",flags:{only:{default:!1}},terms:{alterations:{init:null},examples:{init:null},externals:{init:null},metas:{init:[]},notes:{init:[]},shared:{init:null},tags:{init:[]},whens:{init:null}},rules:{custom:{method(r,i){return t(typeof r=="function","Method must be a function"),t(i===void 0||i&&typeof i=="string","Description must be a non-empty string"),this.$_addRule({name:"custom",args:{method:r,description:i}})},validate(r,i,{method:a}){try{return a(r,i)}catch(s){return i.error("any.custom",{error:s})}},args:["method","description"],multi:!0},messages:{method(r){return this.prefs({messages:r})}},shared:{method(r){t(f.isSchema(r)&&r._flags.id,"Schema must be a schema with an id");const i=this.clone();return i.$_terms.shared=i.$_terms.shared||[],i.$_terms.shared.push(r),i.$_mutateRegister(r),i}},warning:{method(r,i){return t(r&&typeof r=="string","Invalid warning code"),this.$_addRule({name:"warning",args:{code:r,local:i},warn:!0})},validate:(r,i,{code:a,local:s})=>i.error(a,s),args:["code","local"],multi:!0}},modifiers:{keep(r,i=!0){r.keep=i},message(r,i){r.message=h.compile(i)},warn(r,i=!0){r.warn=i}},manifest:{build(r,i){for(const a in i){const s=i[a];if(["examples","externals","metas","notes","tags"].includes(a))for(const n of s)r=r[a.slice(0,-1)](n);else if(a!=="alterations")if(a!=="whens"){if(a==="shared")for(const n of s)r=r.shared(n)}else for(const n of s){const{ref:c,is:o,not:d,then:u,otherwise:p,concat:g}=n;r=g?r.concat(g):c?r.when(c,{is:o,not:d,then:u,otherwise:p,switch:n.switch,break:n.break}):r.when(o,{then:u,otherwise:p,break:n.break})}else{const n={};for(const{target:c,adjuster:o}of s)n[c]=o;r=r.alter(n)}}return r}},messages:{"any.custom":"{{#label}} failed custom validation because {{#error.message}}","any.default":"{{#label}} threw an error when running default method","any.failover":"{{#label}} threw an error when running failover method","any.invalid":"{{#label}} contains an invalid value","any.only":'{{#label}} must be {if(#valids.length == 1, "", "one of ")}{{#valids}}',"any.ref":"{{#label}} {{#arg}} references {{:#ref}} which {{#reason}}","any.required":"{{#label}} is required","any.unknown":"{{#label}} is not allowed"}})},546:(S,W,m)=>{const t=m(375),U=m(9474),f=m(9621),h=m(8068),r=m(8160),i=m(3292),a={};S.exports=h.extend({type:"array",flags:{single:{default:!1},sparse:{default:!1}},terms:{items:{init:[],manifest:"schema"},ordered:{init:[],manifest:"schema"},_exclusions:{init:[]},_inclusions:{init:[]},_requireds:{init:[]}},coerce:{from:"object",method(s,{schema:n,state:c,prefs:o}){if(!Array.isArray(s))return;const d=n.$_getRule("sort");return d?a.sort(n,s,d.args.options,c,o):void 0}},validate(s,{schema:n,error:c}){if(!Array.isArray(s)){if(n._flags.single){const o=[s];return o[r.symbols.arraySingle]=!0,{value:o}}return{errors:c("array.base")}}if(n.$_getRule("items")||n.$_terms.externals)return{value:s.slice()}},rules:{has:{method(s){s=this.$_compile(s,{appendPath:!0});const n=this.$_addRule({name:"has",args:{schema:s}});return n.$_mutateRegister(s),n},validate(s,{state:n,prefs:c,error:o},{schema:d}){const u=[s,...n.ancestors];for(let g=0;g<s.length;++g){const k=n.localize([...n.path,g],u,d);if(d.$_match(s[g],k,c))return s}const p=d._flags.label;return p?o("array.hasKnown",{patternLabel:p}):o("array.hasUnknown",null)},multi:!0},items:{method(...s){r.verifyFlat(s,"items");const n=this.$_addRule("items");for(let c=0;c<s.length;++c){const o=r.tryWithPath(()=>this.$_compile(s[c]),c,{append:!0});n.$_terms.items.push(o)}return n.$_mutateRebuild()},validate(s,{schema:n,error:c,state:o,prefs:d,errorsArray:u}){const p=n.$_terms._requireds.slice(),g=n.$_terms.ordered.slice(),k=[...n.$_terms._inclusions,...p],N=!s[r.symbols.arraySingle];delete s[r.symbols.arraySingle];const R=u();let E=s.length;for(let y=0;y<E;++y){const w=s[y];let v=!1,G=!1;const j=N?y:new Number(y),D=[...o.path,j];if(!n._flags.sparse&&w===void 0){if(R.push(c("array.sparse",{key:j,path:D,pos:y,value:void 0},o.localize(D))),d.abortEarly)return R;g.shift();continue}const I=[s,...o.ancestors];for(const B of n.$_terms._exclusions)if(B.$_match(w,o.localize(D,I,B),d,{presence:"ignore"})){if(R.push(c("array.excludes",{pos:y,value:w},o.localize(D))),d.abortEarly)return R;v=!0,g.shift();break}if(v)continue;if(n.$_terms.ordered.length){if(g.length){const B=g.shift(),X=B.$_validate(w,o.localize(D,I,B),d);if(X.errors){if(R.push(...X.errors),d.abortEarly)return R}else if(B._flags.result==="strip")a.fastSplice(s,y),--y,--E;else{if(!n._flags.sparse&&X.value===void 0){if(R.push(c("array.sparse",{key:j,path:D,pos:y,value:void 0},o.localize(D))),d.abortEarly)return R;continue}s[y]=X.value}continue}if(!n.$_terms.items.length){if(R.push(c("array.orderedLength",{pos:y,limit:n.$_terms.ordered.length})),d.abortEarly)return R;break}}const x=[];let C=p.length;for(let B=0;B<C;++B){const X=o.localize(D,I,p[B]);X.snapshot();const _=p[B].$_validate(w,X,d);if(x[B]=_,!_.errors){if(X.commit(),s[y]=_.value,G=!0,a.fastSplice(p,B),--B,--C,!n._flags.sparse&&_.value===void 0&&(R.push(c("array.sparse",{key:j,path:D,pos:y,value:void 0},o.localize(D))),d.abortEarly))return R;break}X.restore()}if(G)continue;const O=d.stripUnknown&&!!d.stripUnknown.arrays||!1;C=k.length;for(const B of k){let X;const _=p.indexOf(B);if(_!==-1)X=x[_];else{const q=o.localize(D,I,B);if(q.snapshot(),X=B.$_validate(w,q,d),!X.errors){q.commit(),B._flags.result==="strip"?(a.fastSplice(s,y),--y,--E):n._flags.sparse||X.value!==void 0?s[y]=X.value:(R.push(c("array.sparse",{key:j,path:D,pos:y,value:void 0},o.localize(D))),v=!0),G=!0;break}q.restore()}if(C===1){if(O){a.fastSplice(s,y),--y,--E,G=!0;break}if(R.push(...X.errors),d.abortEarly)return R;v=!0;break}}if(!v&&(n.$_terms._inclusions.length||n.$_terms._requireds.length)&&!G){if(O){a.fastSplice(s,y),--y,--E;continue}if(R.push(c("array.includes",{pos:y,value:w},o.localize(D))),d.abortEarly)return R}}return p.length&&a.fillMissedErrors(n,R,p,s,o,d),g.length&&(a.fillOrderedErrors(n,R,g,s,o,d),R.length||a.fillDefault(g,s,o,d)),R.length?R:s},priority:!0,manifest:!1},length:{method(s){return this.$_addRule({name:"length",args:{limit:s},operator:"="})},validate:(s,n,{limit:c},{name:o,operator:d,args:u})=>r.compare(s.length,c,d)?s:n.error("array."+o,{limit:u.limit,value:s}),args:[{name:"limit",ref:!0,assert:r.limit,message:"must be a positive integer"}]},max:{method(s){return this.$_addRule({name:"max",method:"length",args:{limit:s},operator:"<="})}},min:{method(s){return this.$_addRule({name:"min",method:"length",args:{limit:s},operator:">="})}},ordered:{method(...s){r.verifyFlat(s,"ordered");const n=this.$_addRule("items");for(let c=0;c<s.length;++c){const o=r.tryWithPath(()=>this.$_compile(s[c]),c,{append:!0});a.validateSingle(o,n),n.$_mutateRegister(o),n.$_terms.ordered.push(o)}return n.$_mutateRebuild()}},single:{method(s){const n=s===void 0||!!s;return t(!n||!this._flags._arrayItems,"Cannot specify single rule when array has array items"),this.$_setFlag("single",n)}},sort:{method(s={}){r.assertOptions(s,["by","order"]);const n={order:s.order||"ascending"};return s.by&&(n.by=i.ref(s.by,{ancestor:0}),t(!n.by.ancestor,"Cannot sort by ancestor")),this.$_addRule({name:"sort",args:{options:n}})},validate(s,{error:n,state:c,prefs:o,schema:d},{options:u}){const{value:p,errors:g}=a.sort(d,s,u,c,o);if(g)return g;for(let k=0;k<s.length;++k)if(s[k]!==p[k])return n("array.sort",{order:u.order,by:u.by?u.by.key:"value"});return s},convert:!0},sparse:{method(s){const n=s===void 0||!!s;return this._flags.sparse===n?this:(n?this.clone():this.$_addRule("items")).$_setFlag("sparse",n,{clone:!1})}},unique:{method(s,n={}){t(!s||typeof s=="function"||typeof s=="string","comparator must be a function or a string"),r.assertOptions(n,["ignoreUndefined","separator"]);const c={name:"unique",args:{options:n,comparator:s}};if(s)if(typeof s=="string"){const o=r.default(n.separator,".");c.path=o?s.split(o):[s]}else c.comparator=s;return this.$_addRule(c)},validate(s,{state:n,error:c,schema:o},{comparator:d,options:u},{comparator:p,path:g}){const k={string:Object.create(null),number:Object.create(null),undefined:Object.create(null),boolean:Object.create(null),bigint:Object.create(null),object:new Map,function:new Map,custom:new Map},N=p||U,R=u.ignoreUndefined;for(let E=0;E<s.length;++E){const y=g?f(s[E],g):s[E],w=p?k.custom:k[typeof y];if(t(w,"Failed to find unique map container for type",typeof y),w instanceof Map){const v=w.entries();let G;for(;!(G=v.next()).done;)if(N(G.value[0],y)){const j=n.localize([...n.path,E],[s,...n.ancestors]),D={pos:E,value:s[E],dupePos:G.value[1],dupeValue:s[G.value[1]]};return g&&(D.path=d),c("array.unique",D,j)}w.set(y,E)}else{if((!R||y!==void 0)&&w[y]!==void 0){const v={pos:E,value:s[E],dupePos:w[y],dupeValue:s[w[y]]};return g&&(v.path=d),c("array.unique",v,n.localize([...n.path,E],[s,...n.ancestors]))}w[y]=E}}return s},args:["comparator","options"],multi:!0}},cast:{set:{from:Array.isArray,to:(s,n)=>new Set(s)}},rebuild(s){s.$_terms._inclusions=[],s.$_terms._exclusions=[],s.$_terms._requireds=[];for(const n of s.$_terms.items)a.validateSingle(n,s),n._flags.presence==="required"?s.$_terms._requireds.push(n):n._flags.presence==="forbidden"?s.$_terms._exclusions.push(n):s.$_terms._inclusions.push(n);for(const n of s.$_terms.ordered)a.validateSingle(n,s)},manifest:{build:(s,n)=>(n.items&&(s=s.items(...n.items)),n.ordered&&(s=s.ordered(...n.ordered)),s)},messages:{"array.base":"{{#label}} must be an array","array.excludes":"{{#label}} contains an excluded value","array.hasKnown":"{{#label}} does not contain at least one required match for type {:#patternLabel}","array.hasUnknown":"{{#label}} does not contain at least one required match","array.includes":"{{#label}} does not match any of the allowed types","array.includesRequiredBoth":"{{#label}} does not contain {{#knownMisses}} and {{#unknownMisses}} other required value(s)","array.includesRequiredKnowns":"{{#label}} does not contain {{#knownMisses}}","array.includesRequiredUnknowns":"{{#label}} does not contain {{#unknownMisses}} required value(s)","array.length":"{{#label}} must contain {{#limit}} items","array.max":"{{#label}} must contain less than or equal to {{#limit}} items","array.min":"{{#label}} must contain at least {{#limit}} items","array.orderedLength":"{{#label}} must contain at most {{#limit}} items","array.sort":"{{#label}} must be sorted in {#order} order by {{#by}}","array.sort.mismatching":"{{#label}} cannot be sorted due to mismatching types","array.sort.unsupported":"{{#label}} cannot be sorted due to unsupported type {#type}","array.sparse":"{{#label}} must not be a sparse array item","array.unique":"{{#label}} contains a duplicate value"}}),a.fillMissedErrors=function(s,n,c,o,d,u){const p=[];let g=0;for(const k of c){const N=k._flags.label;N?p.push(N):++g}p.length?g?n.push(s.$_createError("array.includesRequiredBoth",o,{knownMisses:p,unknownMisses:g},d,u)):n.push(s.$_createError("array.includesRequiredKnowns",o,{knownMisses:p},d,u)):n.push(s.$_createError("array.includesRequiredUnknowns",o,{unknownMisses:g},d,u))},a.fillOrderedErrors=function(s,n,c,o,d,u){const p=[];for(const g of c)g._flags.presence==="required"&&p.push(g);p.length&&a.fillMissedErrors(s,n,p,o,d,u)},a.fillDefault=function(s,n,c,o){const d=[];let u=!0;for(let p=s.length-1;p>=0;--p){const g=s[p],k=[n,...c.ancestors],N=g.$_validate(void 0,c.localize(c.path,k,g),o).value;if(u){if(N===void 0)continue;u=!1}d.unshift(N)}d.length&&n.push(...d)},a.fastSplice=function(s,n){let c=n;for(;c<s.length;)s[c++]=s[c];--s.length},a.validateSingle=function(s,n){(s.type==="array"||s._flags._arrayItems)&&(t(!n._flags.single,"Cannot specify array item with single rule enabled"),n.$_setFlag("_arrayItems",!0,{clone:!1}))},a.sort=function(s,n,c,o,d){const u=c.order==="ascending"?1:-1,p=-1*u,g=u,k=(N,R)=>{let E=a.compare(N,R,p,g);if(E!==null||(c.by&&(N=c.by.resolve(N,o,d),R=c.by.resolve(R,o,d)),E=a.compare(N,R,p,g),E!==null))return E;const y=typeof N;if(y!==typeof R)throw s.$_createError("array.sort.mismatching",n,null,o,d);if(y!=="number"&&y!=="string")throw s.$_createError("array.sort.unsupported",n,{type:y},o,d);return y==="number"?(N-R)*u:N<R?p:g};try{return{value:n.slice().sort(k)}}catch(N){return{errors:N}}},a.compare=function(s,n,c,o){return s===n?0:s===void 0?1:n===void 0?-1:s===null?o:n===null?c:null}},4937:(S,W,m)=>{const t=m(375),U=m(8068),f=m(8160),h=m(2036),r={isBool:function(i){return typeof i=="boolean"}};S.exports=U.extend({type:"boolean",flags:{sensitive:{default:!1}},terms:{falsy:{init:null,manifest:"values"},truthy:{init:null,manifest:"values"}},coerce(i,{schema:a}){if(typeof i!="boolean"){if(typeof i=="string"){const s=a._flags.sensitive?i:i.toLowerCase();i=s==="true"||s!=="false"&&i}return typeof i!="boolean"&&(i=a.$_terms.truthy&&a.$_terms.truthy.has(i,null,null,!a._flags.sensitive)||(!a.$_terms.falsy||!a.$_terms.falsy.has(i,null,null,!a._flags.sensitive))&&i),{value:i}}},validate(i,{error:a}){if(typeof i!="boolean")return{value:i,errors:a("boolean.base")}},rules:{truthy:{method(...i){f.verifyFlat(i,"truthy");const a=this.clone();a.$_terms.truthy=a.$_terms.truthy||new h;for(let s=0;s<i.length;++s){const n=i[s];t(n!==void 0,"Cannot call truthy with undefined"),a.$_terms.truthy.add(n)}return a}},falsy:{method(...i){f.verifyFlat(i,"falsy");const a=this.clone();a.$_terms.falsy=a.$_terms.falsy||new h;for(let s=0;s<i.length;++s){const n=i[s];t(n!==void 0,"Cannot call falsy with undefined"),a.$_terms.falsy.add(n)}return a}},sensitive:{method(i=!0){return this.$_setFlag("sensitive",i)}}},cast:{number:{from:r.isBool,to:(i,a)=>i?1:0},string:{from:r.isBool,to:(i,a)=>i?"true":"false"}},manifest:{build:(i,a)=>(a.truthy&&(i=i.truthy(...a.truthy)),a.falsy&&(i=i.falsy(...a.falsy)),i)},messages:{"boolean.base":"{{#label}} must be a boolean"}})},7500:(S,W,m)=>{const t=m(375),U=m(8068),f=m(8160),h=m(3328),r={isDate:function(i){return i instanceof Date}};S.exports=U.extend({type:"date",coerce:{from:["number","string"],method:(i,{schema:a})=>({value:r.parse(i,a._flags.format)||i})},validate(i,{schema:a,error:s,prefs:n}){if(i instanceof Date&&!isNaN(i.getTime()))return;const c=a._flags.format;return n.convert&&c&&typeof i=="string"?{value:i,errors:s("date.format",{format:c})}:{value:i,errors:s("date.base")}},rules:{compare:{method:!1,validate(i,a,{date:s},{name:n,operator:c,args:o}){const d=s==="now"?Date.now():s.getTime();return f.compare(i.getTime(),d,c)?i:a.error("date."+n,{limit:o.date,value:i})},args:[{name:"date",ref:!0,normalize:i=>i==="now"?i:r.parse(i),assert:i=>i!==null,message:"must have a valid date format"}]},format:{method(i){return t(["iso","javascript","unix"].includes(i),"Unknown date format",i),this.$_setFlag("format",i)}},greater:{method(i){return this.$_addRule({name:"greater",method:"compare",args:{date:i},operator:">"})}},iso:{method(){return this.format("iso")}},less:{method(i){return this.$_addRule({name:"less",method:"compare",args:{date:i},operator:"<"})}},max:{method(i){return this.$_addRule({name:"max",method:"compare",args:{date:i},operator:"<="})}},min:{method(i){return this.$_addRule({name:"min",method:"compare",args:{date:i},operator:">="})}},timestamp:{method(i="javascript"){return t(["javascript","unix"].includes(i),'"type" must be one of "javascript, unix"'),this.format(i)}}},cast:{number:{from:r.isDate,to:(i,a)=>i.getTime()},string:{from:r.isDate,to:(i,{prefs:a})=>h.date(i,a)}},messages:{"date.base":"{{#label}} must be a valid date","date.format":'{{#label}} must be in {msg("date.format." + #format) || #format} format',"date.greater":"{{#label}} must be greater than {{:#limit}}","date.less":"{{#label}} must be less than {{:#limit}}","date.max":"{{#label}} must be less than or equal to {{:#limit}}","date.min":"{{#label}} must be greater than or equal to {{:#limit}}","date.format.iso":"ISO 8601 date","date.format.javascript":"timestamp or number of milliseconds","date.format.unix":"timestamp or number of seconds"}}),r.parse=function(i,a){if(i instanceof Date)return i;if(typeof i!="string"&&(isNaN(i)||!isFinite(i))||/^\s*$/.test(i))return null;if(a==="iso")return f.isIsoDate(i)?r.date(i.toString()):null;const s=i;if(typeof i=="string"&&/^[+-]?\d+(\.\d+)?$/.test(i)&&(i=parseFloat(i)),a){if(a==="javascript")return r.date(1*i);if(a==="unix")return r.date(1e3*i);if(typeof s=="string")return null}return r.date(i)},r.date=function(i){const a=new Date(i);return isNaN(a.getTime())?null:a}},390:(S,W,m)=>{const t=m(375),U=m(7824);S.exports=U.extend({type:"function",properties:{typeof:"function"},rules:{arity:{method(f){return t(Number.isSafeInteger(f)&&f>=0,"n must be a positive integer"),this.$_addRule({name:"arity",args:{n:f}})},validate:(f,h,{n:r})=>f.length===r?f:h.error("function.arity",{n:r})},class:{method(){return this.$_addRule("class")},validate:(f,h)=>/^\s*class\s/.test(f.toString())?f:h.error("function.class",{value:f})},minArity:{method(f){return t(Number.isSafeInteger(f)&&f>0,"n must be a strict positive integer"),this.$_addRule({name:"minArity",args:{n:f}})},validate:(f,h,{n:r})=>f.length>=r?f:h.error("function.minArity",{n:r})},maxArity:{method(f){return t(Number.isSafeInteger(f)&&f>=0,"n must be a positive integer"),this.$_addRule({name:"maxArity",args:{n:f}})},validate:(f,h,{n:r})=>f.length<=r?f:h.error("function.maxArity",{n:r})}},messages:{"function.arity":"{{#label}} must have an arity of {{#n}}","function.class":"{{#label}} must be a class","function.maxArity":"{{#label}} must have an arity lesser or equal to {{#n}}","function.minArity":"{{#label}} must have an arity greater or equal to {{#n}}"}})},7824:(S,W,m)=>{const t=m(978),U=m(375),f=m(8571),h=m(3652),r=m(8068),i=m(8160),a=m(3292),s=m(6354),n=m(6133),c=m(3328),o={renameDefaults:{alias:!1,multiple:!1,override:!1}};S.exports=r.extend({type:"_keys",properties:{typeof:"object"},flags:{unknown:{default:!1}},terms:{dependencies:{init:null},keys:{init:null,manifest:{mapped:{from:"schema",to:"key"}}},patterns:{init:null},renames:{init:null}},args:(d,u)=>d.keys(u),validate(d,{schema:u,error:p,state:g,prefs:k}){if(!d||typeof d!==u.$_property("typeof")||Array.isArray(d))return{value:d,errors:p("object.base",{type:u.$_property("typeof")})};if(!(u.$_terms.renames||u.$_terms.dependencies||u.$_terms.keys||u.$_terms.patterns||u.$_terms.externals))return;d=o.clone(d,k);const N=[];if(u.$_terms.renames&&!o.rename(u,d,g,k,N))return{value:d,errors:N};if(!u.$_terms.keys&&!u.$_terms.patterns&&!u.$_terms.dependencies)return{value:d,errors:N};const R=new Set(Object.keys(d));if(u.$_terms.keys){const E=[d,...g.ancestors];for(const y of u.$_terms.keys){const w=y.key,v=d[w];R.delete(w);const G=g.localize([...g.path,w],E,y),j=y.schema.$_validate(v,G,k);if(j.errors){if(k.abortEarly)return{value:d,errors:j.errors};j.value!==void 0&&(d[w]=j.value),N.push(...j.errors)}else y.schema._flags.result==="strip"||j.value===void 0&&v!==void 0?delete d[w]:j.value!==void 0&&(d[w]=j.value)}}if(R.size||u._flags._hasPatternMatch){const E=o.unknown(u,d,R,N,g,k);if(E)return E}if(u.$_terms.dependencies)for(const E of u.$_terms.dependencies){if(E.key!==null&&o.isPresent(E.options)(E.key.resolve(d,g,k,null,{shadow:!1}))===!1)continue;const y=o.dependencies[E.rel](u,E,d,g,k);if(y){const w=u.$_createError(y.code,d,y.context,g,k);if(k.abortEarly)return{value:d,errors:w};N.push(w)}}return{value:d,errors:N}},rules:{and:{method(...d){return i.verifyFlat(d,"and"),o.dependency(this,"and",null,d)}},append:{method(d){return d==null||Object.keys(d).length===0?this:this.keys(d)}},assert:{method(d,u,p){c.isTemplate(d)||(d=a.ref(d)),U(p===void 0||typeof p=="string","Message must be a string"),u=this.$_compile(u,{appendPath:!0});const g=this.$_addRule({name:"assert",args:{subject:d,schema:u,message:p}});return g.$_mutateRegister(d),g.$_mutateRegister(u),g},validate(d,{error:u,prefs:p,state:g},{subject:k,schema:N,message:R}){const E=k.resolve(d,g,p),y=n.isRef(k)?k.absolute(g):[];return N.$_match(E,g.localize(y,[d,...g.ancestors],N),p)?d:u("object.assert",{subject:k,message:R})},args:["subject","schema","message"],multi:!0},instance:{method(d,u){return U(typeof d=="function","constructor must be a function"),u=u||d.name,this.$_addRule({name:"instance",args:{constructor:d,name:u}})},validate:(d,u,{constructor:p,name:g})=>d instanceof p?d:u.error("object.instance",{type:g,value:d}),args:["constructor","name"]},keys:{method(d){U(d===void 0||typeof d=="object","Object schema must be a valid object"),U(!i.isSchema(d),"Object schema cannot be a joi schema");const u=this.clone();if(d)if(Object.keys(d).length){u.$_terms.keys=u.$_terms.keys?u.$_terms.keys.filter(p=>!d.hasOwnProperty(p.key)):new o.Keys;for(const p in d)i.tryWithPath(()=>u.$_terms.keys.push({key:p,schema:this.$_compile(d[p])}),p)}else u.$_terms.keys=new o.Keys;else u.$_terms.keys=null;return u.$_mutateRebuild()}},length:{method(d){return this.$_addRule({name:"length",args:{limit:d},operator:"="})},validate:(d,u,{limit:p},{name:g,operator:k,args:N})=>i.compare(Object.keys(d).length,p,k)?d:u.error("object."+g,{limit:N.limit,value:d}),args:[{name:"limit",ref:!0,assert:i.limit,message:"must be a positive integer"}]},max:{method(d){return this.$_addRule({name:"max",method:"length",args:{limit:d},operator:"<="})}},min:{method(d){return this.$_addRule({name:"min",method:"length",args:{limit:d},operator:">="})}},nand:{method(...d){return i.verifyFlat(d,"nand"),o.dependency(this,"nand",null,d)}},or:{method(...d){return i.verifyFlat(d,"or"),o.dependency(this,"or",null,d)}},oxor:{method(...d){return o.dependency(this,"oxor",null,d)}},pattern:{method(d,u,p={}){const g=d instanceof RegExp;g||(d=this.$_compile(d,{appendPath:!0})),U(u!==void 0,"Invalid rule"),i.assertOptions(p,["fallthrough","matches"]),g&&U(!d.flags.includes("g")&&!d.flags.includes("y"),"pattern should not use global or sticky mode"),u=this.$_compile(u,{appendPath:!0});const k=this.clone();k.$_terms.patterns=k.$_terms.patterns||[];const N={[g?"regex":"schema"]:d,rule:u};return p.matches&&(N.matches=this.$_compile(p.matches),N.matches.type!=="array"&&(N.matches=N.matches.$_root.array().items(N.matches)),k.$_mutateRegister(N.matches),k.$_setFlag("_hasPatternMatch",!0,{clone:!1})),p.fallthrough&&(N.fallthrough=!0),k.$_terms.patterns.push(N),k.$_mutateRegister(u),k}},ref:{method(){return this.$_addRule("ref")},validate:(d,u)=>n.isRef(d)?d:u.error("object.refType",{value:d})},regex:{method(){return this.$_addRule("regex")},validate:(d,u)=>d instanceof RegExp?d:u.error("object.regex",{value:d})},rename:{method(d,u,p={}){U(typeof d=="string"||d instanceof RegExp,"Rename missing the from argument"),U(typeof u=="string"||u instanceof c,"Invalid rename to argument"),U(u!==d,"Cannot rename key to same name:",d),i.assertOptions(p,["alias","ignoreUndefined","override","multiple"]);const g=this.clone();g.$_terms.renames=g.$_terms.renames||[];for(const k of g.$_terms.renames)U(k.from!==d,"Cannot rename the same key multiple times");return u instanceof c&&g.$_mutateRegister(u),g.$_terms.renames.push({from:d,to:u,options:t(o.renameDefaults,p)}),g}},schema:{method(d="any"){return this.$_addRule({name:"schema",args:{type:d}})},validate:(d,u,{type:p})=>!i.isSchema(d)||p!=="any"&&d.type!==p?u.error("object.schema",{type:p}):d},unknown:{method(d){return this.$_setFlag("unknown",d!==!1)}},with:{method(d,u,p={}){return o.dependency(this,"with",d,u,p)}},without:{method(d,u,p={}){return o.dependency(this,"without",d,u,p)}},xor:{method(...d){return i.verifyFlat(d,"xor"),o.dependency(this,"xor",null,d)}}},overrides:{default(d,u){return d===void 0&&(d=i.symbols.deepDefault),this.$_parent("default",d,u)}},rebuild(d){if(d.$_terms.keys){const u=new h.Sorter;for(const p of d.$_terms.keys)i.tryWithPath(()=>u.add(p,{after:p.schema.$_rootReferences(),group:p.key}),p.key);d.$_terms.keys=new o.Keys(...u.nodes)}},manifest:{build(d,u){if(u.keys&&(d=d.keys(u.keys)),u.dependencies)for(const{rel:p,key:g=null,peers:k,options:N}of u.dependencies)d=o.dependency(d,p,g,k,N);if(u.patterns)for(const{regex:p,schema:g,rule:k,fallthrough:N,matches:R}of u.patterns)d=d.pattern(p||g,k,{fallthrough:N,matches:R});if(u.renames)for(const{from:p,to:g,options:k}of u.renames)d=d.rename(p,g,k);return d}},messages:{"object.and":"{{#label}} contains {{#presentWithLabels}} without its required peers {{#missingWithLabels}}","object.assert":'{{#label}} is invalid because {if(#subject.key, `"` + #subject.key + `" failed to ` + (#message || "pass the assertion test"), #message || "the assertion failed")}',"object.base":"{{#label}} must be of type {{#type}}","object.instance":"{{#label}} must be an instance of {{:#type}}","object.length":'{{#label}} must have {{#limit}} key{if(#limit == 1, "", "s")}',"object.max":'{{#label}} must have less than or equal to {{#limit}} key{if(#limit == 1, "", "s")}',"object.min":'{{#label}} must have at least {{#limit}} key{if(#limit == 1, "", "s")}',"object.missing":"{{#label}} must contain at least one of {{#peersWithLabels}}","object.nand":"{{:#mainWithLabel}} must not exist simultaneously with {{#peersWithLabels}}","object.oxor":"{{#label}} contains a conflict between optional exclusive peers {{#peersWithLabels}}","object.pattern.match":"{{#label}} keys failed to match pattern requirements","object.refType":"{{#label}} must be a Joi reference","object.regex":"{{#label}} must be a RegExp object","object.rename.multiple":"{{#label}} cannot rename {{:#from}} because multiple renames are disabled and another key was already renamed to {{:#to}}","object.rename.override":"{{#label}} cannot rename {{:#from}} because override is disabled and target {{:#to}} exists","object.schema":"{{#label}} must be a Joi schema of {{#type}} type","object.unknown":"{{#label}} is not allowed","object.with":"{{:#mainWithLabel}} missing required peer {{:#peerWithLabel}}","object.without":"{{:#mainWithLabel}} conflict with forbidden peer {{:#peerWithLabel}}","object.xor":"{{#label}} contains a conflict between exclusive peers {{#peersWithLabels}}"}}),o.clone=function(d,u){if(typeof d=="object"){if(u.nonEnumerables)return f(d,{shallow:!0});const g=Object.create(Object.getPrototypeOf(d));return Object.assign(g,d),g}const p=function(...g){return d.apply(this,g)};return p.prototype=f(d.prototype),Object.defineProperty(p,"name",{value:d.name,writable:!1}),Object.defineProperty(p,"length",{value:d.length,writable:!1}),Object.assign(p,d),p},o.dependency=function(d,u,p,g,k){U(p===null||typeof p=="string",u,"key must be a strings"),k||(k=g.length>1&&typeof g[g.length-1]=="object"?g.pop():{}),i.assertOptions(k,["separator","isPresent"]),g=[].concat(g);const N=i.default(k.separator,"."),R=[];for(const y of g)U(typeof y=="string",u,"peers must be strings"),R.push(a.ref(y,{separator:N,ancestor:0,prefix:!1}));p!==null&&(p=a.ref(p,{separator:N,ancestor:0,prefix:!1}));const E=d.clone();return E.$_terms.dependencies=E.$_terms.dependencies||[],E.$_terms.dependencies.push(new o.Dependency(u,p,R,g,k)),E},o.dependencies={and(d,u,p,g,k){const N=[],R=[],E=u.peers.length,y=o.isPresent(u.options);for(const w of u.peers)y(w.resolve(p,g,k,null,{shadow:!1}))===!1?N.push(w.key):R.push(w.key);if(N.length!==E&&R.length!==E)return{code:"object.and",context:{present:R,presentWithLabels:o.keysToLabels(d,R),missing:N,missingWithLabels:o.keysToLabels(d,N)}}},nand(d,u,p,g,k){const N=[],R=o.isPresent(u.options);for(const w of u.peers)R(w.resolve(p,g,k,null,{shadow:!1}))&&N.push(w.key);if(N.length!==u.peers.length)return;const E=u.paths[0],y=u.paths.slice(1);return{code:"object.nand",context:{main:E,mainWithLabel:o.keysToLabels(d,E),peers:y,peersWithLabels:o.keysToLabels(d,y)}}},or(d,u,p,g,k){const N=o.isPresent(u.options);for(const R of u.peers)if(N(R.resolve(p,g,k,null,{shadow:!1})))return;return{code:"object.missing",context:{peers:u.paths,peersWithLabels:o.keysToLabels(d,u.paths)}}},oxor(d,u,p,g,k){const N=[],R=o.isPresent(u.options);for(const y of u.peers)R(y.resolve(p,g,k,null,{shadow:!1}))&&N.push(y.key);if(!N.length||N.length===1)return;const E={peers:u.paths,peersWithLabels:o.keysToLabels(d,u.paths)};return E.present=N,E.presentWithLabels=o.keysToLabels(d,N),{code:"object.oxor",context:E}},with(d,u,p,g,k){const N=o.isPresent(u.options);for(const R of u.peers)if(N(R.resolve(p,g,k,null,{shadow:!1}))===!1)return{code:"object.with",context:{main:u.key.key,mainWithLabel:o.keysToLabels(d,u.key.key),peer:R.key,peerWithLabel:o.keysToLabels(d,R.key)}}},without(d,u,p,g,k){const N=o.isPresent(u.options);for(const R of u.peers)if(N(R.resolve(p,g,k,null,{shadow:!1})))return{code:"object.without",context:{main:u.key.key,mainWithLabel:o.keysToLabels(d,u.key.key),peer:R.key,peerWithLabel:o.keysToLabels(d,R.key)}}},xor(d,u,p,g,k){const N=[],R=o.isPresent(u.options);for(const y of u.peers)R(y.resolve(p,g,k,null,{shadow:!1}))&&N.push(y.key);if(N.length===1)return;const E={peers:u.paths,peersWithLabels:o.keysToLabels(d,u.paths)};return N.length===0?{code:"object.missing",context:E}:(E.present=N,E.presentWithLabels=o.keysToLabels(d,N),{code:"object.xor",context:E})}},o.keysToLabels=function(d,u){return Array.isArray(u)?u.map(p=>d.$_mapLabels(p)):d.$_mapLabels(u)},o.isPresent=function(d){return typeof d.isPresent=="function"?d.isPresent:u=>u!==void 0},o.rename=function(d,u,p,g,k){const N={};for(const R of d.$_terms.renames){const E=[],y=typeof R.from!="string";if(y)for(const w in u){if(u[w]===void 0&&R.options.ignoreUndefined||w===R.to)continue;const v=R.from.exec(w);v&&E.push({from:w,to:R.to,match:v})}else!Object.prototype.hasOwnProperty.call(u,R.from)||u[R.from]===void 0&&R.options.ignoreUndefined||E.push(R);for(const w of E){const v=w.from;let G=w.to;if(G instanceof c&&(G=G.render(u,p,g,w.match)),v!==G){if(!R.options.multiple&&N[G]&&(k.push(d.$_createError("object.rename.multiple",u,{from:v,to:G,pattern:y},p,g)),g.abortEarly)||Object.prototype.hasOwnProperty.call(u,G)&&!R.options.override&&!N[G]&&(k.push(d.$_createError("object.rename.override",u,{from:v,to:G,pattern:y},p,g)),g.abortEarly))return!1;u[v]===void 0?delete u[G]:u[G]=u[v],N[G]=!0,R.options.alias||delete u[v]}}}return!0},o.unknown=function(d,u,p,g,k,N){if(d.$_terms.patterns){let R=!1;const E=d.$_terms.patterns.map(w=>{if(w.matches)return R=!0,[]}),y=[u,...k.ancestors];for(const w of p){const v=u[w],G=[...k.path,w];for(let j=0;j<d.$_terms.patterns.length;++j){const D=d.$_terms.patterns[j];if(D.regex){const C=D.regex.test(w);if(k.mainstay.tracer.debug(k,"rule",`pattern.${j}`,C?"pass":"error"),!C)continue}else if(!D.schema.$_match(w,k.nest(D.schema,`pattern.${j}`),N))continue;p.delete(w);const I=k.localize(G,y,{schema:D.rule,key:w}),x=D.rule.$_validate(v,I,N);if(x.errors){if(N.abortEarly)return{value:u,errors:x.errors};g.push(...x.errors)}if(D.matches&&E[j].push(w),u[w]=x.value,!D.fallthrough)break}}if(R)for(let w=0;w<E.length;++w){const v=E[w];if(!v)continue;const G=d.$_terms.patterns[w].matches,j=k.localize(k.path,y,G),D=G.$_validate(v,j,N);if(D.errors){const I=s.details(D.errors,{override:!1});I.matches=v;const x=d.$_createError("object.pattern.match",u,I,k,N);if(N.abortEarly)return{value:u,errors:x};g.push(x)}}}if(p.size&&(d.$_terms.keys||d.$_terms.patterns)){if(N.stripUnknown&&!d._flags.unknown||N.skipFunctions){const R=!(!N.stripUnknown||N.stripUnknown!==!0&&!N.stripUnknown.objects);for(const E of p)R?(delete u[E],p.delete(E)):typeof u[E]=="function"&&p.delete(E)}if(!i.default(d._flags.unknown,N.allowUnknown))for(const R of p){const E=k.localize([...k.path,R],[]),y=d.$_createError("object.unknown",u[R],{child:R},E,N,{flags:!1});if(N.abortEarly)return{value:u,errors:y};g.push(y)}}},o.Dependency=class{constructor(d,u,p,g,k){this.rel=d,this.key=u,this.peers=p,this.paths=g,this.options=k}describe(){const d={rel:this.rel,peers:this.paths};return this.key!==null&&(d.key=this.key.key),this.peers[0].separator!=="."&&(d.options={...d.options,separator:this.peers[0].separator}),this.options.isPresent&&(d.options={...d.options,isPresent:this.options.isPresent}),d}},o.Keys=class extends Array{concat(d){const u=this.slice(),p=new Map;for(let g=0;g<u.length;++g)p.set(u[g].key,g);for(const g of d){const k=g.key,N=p.get(k);N!==void 0?u[N]={key:k,schema:u[N].schema.concat(g.schema)}:u.push(g)}return u}}},8785:(S,W,m)=>{const t=m(375),U=m(8068),f=m(8160),h=m(3292),r=m(6354),i={};S.exports=U.extend({type:"link",properties:{schemaChain:!0},terms:{link:{init:null,manifest:"single",register:!1}},args:(a,s)=>a.ref(s),validate(a,{schema:s,state:n,prefs:c}){t(s.$_terms.link,"Uninitialized link schema");const o=i.generate(s,a,n,c),d=s.$_terms.link[0].ref;return o.$_validate(a,n.nest(o,`link:${d.display}:${o.type}`),c)},generate:(a,s,n,c)=>i.generate(a,s,n,c),rules:{ref:{method(a){t(!this.$_terms.link,"Cannot reinitialize schema"),a=h.ref(a),t(a.type==="value"||a.type==="local","Invalid reference type:",a.type),t(a.type==="local"||a.ancestor==="root"||a.ancestor>0,"Link cannot reference itself");const s=this.clone();return s.$_terms.link=[{ref:a}],s}},relative:{method(a=!0){return this.$_setFlag("relative",a)}}},overrides:{concat(a){t(this.$_terms.link,"Uninitialized link schema"),t(f.isSchema(a),"Invalid schema object"),t(a.type!=="link","Cannot merge type link with another link");const s=this.clone();return s.$_terms.whens||(s.$_terms.whens=[]),s.$_terms.whens.push({concat:a}),s.$_mutateRebuild()}},manifest:{build:(a,s)=>(t(s.link,"Invalid link description missing link"),a.ref(s.link))}}),i.generate=function(a,s,n,c){let o=n.mainstay.links.get(a);if(o)return o._generate(s,n,c).schema;const d=a.$_terms.link[0].ref,{perspective:u,path:p}=i.perspective(d,n);i.assert(u,"which is outside of schema boundaries",d,a,n,c);try{o=p.length?u.$_reach(p):u}catch{i.assert(!1,"to non-existing schema",d,a,n,c)}return i.assert(o.type!=="link","which is another link",d,a,n,c),a._flags.relative||n.mainstay.links.set(a,o),o._generate(s,n,c).schema},i.perspective=function(a,s){if(a.type==="local"){for(const{schema:n,key:c}of s.schemas){if((n._flags.id||c)===a.path[0])return{perspective:n,path:a.path.slice(1)};if(n.$_terms.shared){for(const o of n.$_terms.shared)if(o._flags.id===a.path[0])return{perspective:o,path:a.path.slice(1)}}}return{perspective:null,path:null}}return a.ancestor==="root"?{perspective:s.schemas[s.schemas.length-1].schema,path:a.path}:{perspective:s.schemas[a.ancestor]&&s.schemas[a.ancestor].schema,path:a.path}},i.assert=function(a,s,n,c,o,d){a||t(!1,`"${r.label(c._flags,o,d)}" contains link reference "${n.display}" ${s}`)}},3832:(S,W,m)=>{const t=m(375),U=m(8068),f=m(8160),h={numberRx:/^\s*[+-]?(?:(?:\d+(?:\.\d*)?)|(?:\.\d+))(?:e([+-]?\d+))?\s*$/i,precisionRx:/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/,exponentialPartRegex:/[eE][+-]?\d+$/,leadingSignAndZerosRegex:/^[+-]?(0*)?/,dotRegex:/\./,trailingZerosRegex:/0+$/,decimalPlaces(r){const i=r.toString(),a=i.indexOf("."),s=i.indexOf("e");return(a<0?0:(s<0?i.length:s)-a-1)+(s<0?0:Math.max(0,-parseInt(i.slice(s+1))))}};S.exports=U.extend({type:"number",flags:{unsafe:{default:!1}},coerce:{from:"string",method(r,{schema:i,error:a}){if(!r.match(h.numberRx))return;r=r.trim();const s={value:parseFloat(r)};if(s.value===0&&(s.value=0),!i._flags.unsafe)if(r.match(/e/i)){if(h.extractSignificantDigits(r)!==h.extractSignificantDigits(String(s.value)))return s.errors=a("number.unsafe"),s}else{const n=s.value.toString();if(n.match(/e/i))return s;if(n!==h.normalizeDecimal(r))return s.errors=a("number.unsafe"),s}return s}},validate(r,{schema:i,error:a,prefs:s}){if(r===1/0||r===-1/0)return{value:r,errors:a("number.infinity")};if(!f.isNumber(r))return{value:r,errors:a("number.base")};const n={value:r};if(s.convert){const c=i.$_getRule("precision");if(c){const o=Math.pow(10,c.args.limit);n.value=Math.round(n.value*o)/o}}return n.value===0&&(n.value=0),!i._flags.unsafe&&(r>Number.MAX_SAFE_INTEGER||r<Number.MIN_SAFE_INTEGER)&&(n.errors=a("number.unsafe")),n},rules:{compare:{method:!1,validate:(r,i,{limit:a},{name:s,operator:n,args:c})=>f.compare(r,a,n)?r:i.error("number."+s,{limit:c.limit,value:r}),args:[{name:"limit",ref:!0,assert:f.isNumber,message:"must be a number"}]},greater:{method(r){return this.$_addRule({name:"greater",method:"compare",args:{limit:r},operator:">"})}},integer:{method(){return this.$_addRule("integer")},validate:(r,i)=>Math.trunc(r)-r==0?r:i.error("number.integer")},less:{method(r){return this.$_addRule({name:"less",method:"compare",args:{limit:r},operator:"<"})}},max:{method(r){return this.$_addRule({name:"max",method:"compare",args:{limit:r},operator:"<="})}},min:{method(r){return this.$_addRule({name:"min",method:"compare",args:{limit:r},operator:">="})}},multiple:{method(r){const i=typeof r=="number"?h.decimalPlaces(r):null,a=Math.pow(10,i);return this.$_addRule({name:"multiple",args:{base:r,baseDecimalPlace:i,pfactor:a}})},validate:(r,i,{base:a,baseDecimalPlace:s,pfactor:n},c)=>h.decimalPlaces(r)>s?i.error("number.multiple",{multiple:c.args.base,value:r}):Math.round(n*r)%Math.round(n*a)==0?r:i.error("number.multiple",{multiple:c.args.base,value:r}),args:[{name:"base",ref:!0,assert:r=>typeof r=="number"&&isFinite(r)&&r>0,message:"must be a positive number"},"baseDecimalPlace","pfactor"],multi:!0},negative:{method(){return this.sign("negative")}},port:{method(){return this.$_addRule("port")},validate:(r,i)=>Number.isSafeInteger(r)&&r>=0&&r<=65535?r:i.error("number.port")},positive:{method(){return this.sign("positive")}},precision:{method(r){return t(Number.isSafeInteger(r),"limit must be an integer"),this.$_addRule({name:"precision",args:{limit:r}})},validate(r,i,{limit:a}){const s=r.toString().match(h.precisionRx);return Math.max((s[1]?s[1].length:0)-(s[2]?parseInt(s[2],10):0),0)<=a?r:i.error("number.precision",{limit:a,value:r})},convert:!0},sign:{method(r){return t(["negative","positive"].includes(r),"Invalid sign",r),this.$_addRule({name:"sign",args:{sign:r}})},validate:(r,i,{sign:a})=>a==="negative"&&r<0||a==="positive"&&r>0?r:i.error(`number.${a}`)},unsafe:{method(r=!0){return t(typeof r=="boolean","enabled must be a boolean"),this.$_setFlag("unsafe",r)}}},cast:{string:{from:r=>typeof r=="number",to:(r,i)=>r.toString()}},messages:{"number.base":"{{#label}} must be a number","number.greater":"{{#label}} must be greater than {{#limit}}","number.infinity":"{{#label}} cannot be infinity","number.integer":"{{#label}} must be an integer","number.less":"{{#label}} must be less than {{#limit}}","number.max":"{{#label}} must be less than or equal to {{#limit}}","number.min":"{{#label}} must be greater than or equal to {{#limit}}","number.multiple":"{{#label}} must be a multiple of {{#multiple}}","number.negative":"{{#label}} must be a negative number","number.port":"{{#label}} must be a valid port","number.positive":"{{#label}} must be a positive number","number.precision":"{{#label}} must have no more than {{#limit}} decimal places","number.unsafe":"{{#label}} must be a safe number"}}),h.extractSignificantDigits=function(r){return r.replace(h.exponentialPartRegex,"").replace(h.dotRegex,"").replace(h.trailingZerosRegex,"").replace(h.leadingSignAndZerosRegex,"")},h.normalizeDecimal=function(r){return(r=r.replace(/^\+/,"").replace(/\.0*$/,"").replace(/^(-?)\.([^\.]*)$/,"$10.$2").replace(/^(-?)0+([0-9])/,"$1$2")).includes(".")&&r.endsWith("0")&&(r=r.replace(/0+$/,"")),r==="-0"?"0":r}},8966:(S,W,m)=>{const t=m(7824);S.exports=t.extend({type:"object",cast:{map:{from:U=>U&&typeof U=="object",to:(U,f)=>new Map(Object.entries(U))}}})},7417:(S,W,m)=>{const t=m(375),U=m(5380),f=m(1745),h=m(9959),r=m(6064),i=m(9926),a=m(5752),s=m(8068),n=m(8160),c={tlds:i instanceof Set&&{tlds:{allow:i,deny:null}},base64Regex:{true:{true:/^(?:[\w\-]{2}[\w\-]{2})*(?:[\w\-]{2}==|[\w\-]{3}=)?$/,false:/^(?:[A-Za-z0-9+\/]{2}[A-Za-z0-9+\/]{2})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/},false:{true:/^(?:[\w\-]{2}[\w\-]{2})*(?:[\w\-]{2}(==)?|[\w\-]{3}=?)?$/,false:/^(?:[A-Za-z0-9+\/]{2}[A-Za-z0-9+\/]{2})*(?:[A-Za-z0-9+\/]{2}(==)?|[A-Za-z0-9+\/]{3}=?)?$/}},dataUriRegex:/^data:[\w+.-]+\/[\w+.-]+;((charset=[\w-]+|base64),)?(.*)$/,hexRegex:{withPrefix:/^0x[0-9a-f]+$/i,withOptionalPrefix:/^(?:0x)?[0-9a-f]+$/i,withoutPrefix:/^[0-9a-f]+$/i},ipRegex:h.regex({cidr:"forbidden"}).regex,isoDurationRegex:/^P(?!$)(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+S)?)?$/,guidBrackets:{"{":"}","[":"]","(":")","":""},guidVersions:{uuidv1:"1",uuidv2:"2",uuidv3:"3",uuidv4:"4",uuidv5:"5",uuidv6:"6",uuidv7:"7",uuidv8:"8"},guidSeparators:new Set([void 0,!0,!1,"-",":"]),normalizationForms:["NFC","NFD","NFKC","NFKD"]};S.exports=s.extend({type:"string",flags:{insensitive:{default:!1},truncate:{default:!1}},terms:{replacements:{init:null}},coerce:{from:"string",method(o,{schema:d,state:u,prefs:p}){const g=d.$_getRule("normalize");g&&(o=o.normalize(g.args.form));const k=d.$_getRule("case");k&&(o=k.args.direction==="upper"?o.toLocaleUpperCase():o.toLocaleLowerCase());const N=d.$_getRule("trim");if(N&&N.args.enabled&&(o=o.trim()),d.$_terms.replacements)for(const E of d.$_terms.replacements)o=o.replace(E.pattern,E.replacement);const R=d.$_getRule("hex");if(R&&R.args.options.byteAligned&&o.length%2!=0&&(o=`0${o}`),d.$_getRule("isoDate")){const E=c.isoDate(o);E&&(o=E)}if(d._flags.truncate){const E=d.$_getRule("max");if(E){let y=E.args.limit;if(n.isResolvable(y)&&(y=y.resolve(o,u,p),!n.limit(y)))return{value:o,errors:d.$_createError("any.ref",y,{ref:E.args.limit,arg:"limit",reason:"must be a positive integer"},u,p)};o=o.slice(0,y)}}return{value:o}}},validate(o,{schema:d,error:u}){if(typeof o!="string")return{value:o,errors:u("string.base")};if(o===""){const p=d.$_getRule("min");return p&&p.args.limit===0?void 0:{value:o,errors:u("string.empty")}}},rules:{alphanum:{method(){return this.$_addRule("alphanum")},validate:(o,d)=>/^[a-zA-Z0-9]+$/.test(o)?o:d.error("string.alphanum")},base64:{method(o={}){return n.assertOptions(o,["paddingRequired","urlSafe"]),o={urlSafe:!1,paddingRequired:!0,...o},t(typeof o.paddingRequired=="boolean","paddingRequired must be boolean"),t(typeof o.urlSafe=="boolean","urlSafe must be boolean"),this.$_addRule({name:"base64",args:{options:o}})},validate:(o,d,{options:u})=>c.base64Regex[u.paddingRequired][u.urlSafe].test(o)?o:d.error("string.base64")},case:{method(o){return t(["lower","upper"].includes(o),"Invalid case:",o),this.$_addRule({name:"case",args:{direction:o}})},validate:(o,d,{direction:u})=>u==="lower"&&o===o.toLocaleLowerCase()||u==="upper"&&o===o.toLocaleUpperCase()?o:d.error(`string.${u}case`),convert:!0},creditCard:{method(){return this.$_addRule("creditCard")},validate(o,d){let u=o.length,p=0,g=1;for(;u--;){const k=o.charAt(u)*g;p+=k-9*(k>9),g^=3}return p>0&&p%10==0?o:d.error("string.creditCard")}},dataUri:{method(o={}){return n.assertOptions(o,["paddingRequired"]),o={paddingRequired:!0,...o},t(typeof o.paddingRequired=="boolean","paddingRequired must be boolean"),this.$_addRule({name:"dataUri",args:{options:o}})},validate(o,d,{options:u}){const p=o.match(c.dataUriRegex);return p&&(!p[2]||p[2]!=="base64"||c.base64Regex[u.paddingRequired].false.test(p[3]))?o:d.error("string.dataUri")}},domain:{method(o){o&&n.assertOptions(o,["allowFullyQualified","allowUnicode","maxDomainSegments","minDomainSegments","tlds"]);const d=c.addressOptions(o);return this.$_addRule({name:"domain",args:{options:o},address:d})},validate:(o,d,u,{address:p})=>U.isValid(o,p)?o:d.error("string.domain")},email:{method(o={}){n.assertOptions(o,["allowFullyQualified","allowUnicode","ignoreLength","maxDomainSegments","minDomainSegments","multiple","separator","tlds"]),t(o.multiple===void 0||typeof o.multiple=="boolean","multiple option must be an boolean");const d=c.addressOptions(o),u=new RegExp(`\\s*[${o.separator?r(o.separator):","}]\\s*`);return this.$_addRule({name:"email",args:{options:o},regex:u,address:d})},validate(o,d,{options:u},{regex:p,address:g}){const k=u.multiple?o.split(p):[o],N=[];for(const R of k)f.isValid(R,g)||N.push(R);return N.length?d.error("string.email",{value:o,invalids:N}):o}},guid:{alias:"uuid",method(o={}){n.assertOptions(o,["version","separator"]);let d="";if(o.version){const g=[].concat(o.version);t(g.length>=1,"version must have at least 1 valid version specified");const k=new Set;for(let N=0;N<g.length;++N){const R=g[N];t(typeof R=="string","version at position "+N+" must be a string");const E=c.guidVersions[R.toLowerCase()];t(E,"version at position "+N+" must be one of "+Object.keys(c.guidVersions).join(", ")),t(!k.has(E),"version at position "+N+" must not be a duplicate"),d+=E,k.add(E)}}t(c.guidSeparators.has(o.separator),'separator must be one of true, false, "-", or ":"');const u=o.separator===void 0?"[:-]?":o.separator===!0?"[:-]":o.separator===!1?"[]?":`\\${o.separator}`,p=new RegExp(`^([\\[{\\(]?)[0-9A-F]{8}(${u})[0-9A-F]{4}\\2?[${d||"0-9A-F"}][0-9A-F]{3}\\2?[${d?"89AB":"0-9A-F"}][0-9A-F]{3}\\2?[0-9A-F]{12}([\\]}\\)]?)$`,"i");return this.$_addRule({name:"guid",args:{options:o},regex:p})},validate(o,d,u,{regex:p}){const g=p.exec(o);return g?c.guidBrackets[g[1]]!==g[g.length-1]?d.error("string.guid"):o:d.error("string.guid")}},hex:{method(o={}){return n.assertOptions(o,["byteAligned","prefix"]),o={byteAligned:!1,prefix:!1,...o},t(typeof o.byteAligned=="boolean","byteAligned must be boolean"),t(typeof o.prefix=="boolean"||o.prefix==="optional",'prefix must be boolean or "optional"'),this.$_addRule({name:"hex",args:{options:o}})},validate:(o,d,{options:u})=>(u.prefix==="optional"?c.hexRegex.withOptionalPrefix:u.prefix===!0?c.hexRegex.withPrefix:c.hexRegex.withoutPrefix).test(o)?u.byteAligned&&o.length%2!=0?d.error("string.hexAlign"):o:d.error("string.hex")},hostname:{method(){return this.$_addRule("hostname")},validate:(o,d)=>U.isValid(o,{minDomainSegments:1})||c.ipRegex.test(o)?o:d.error("string.hostname")},insensitive:{method(){return this.$_setFlag("insensitive",!0)}},ip:{method(o={}){n.assertOptions(o,["cidr","version"]);const{cidr:d,versions:u,regex:p}=h.regex(o),g=o.version?u:void 0;return this.$_addRule({name:"ip",args:{options:{cidr:d,version:g}},regex:p})},validate:(o,d,{options:u},{regex:p})=>p.test(o)?o:u.version?d.error("string.ipVersion",{value:o,cidr:u.cidr,version:u.version}):d.error("string.ip",{value:o,cidr:u.cidr})},isoDate:{method(){return this.$_addRule("isoDate")},validate:(o,{error:d})=>c.isoDate(o)?o:d("string.isoDate")},isoDuration:{method(){return this.$_addRule("isoDuration")},validate:(o,d)=>c.isoDurationRegex.test(o)?o:d.error("string.isoDuration")},length:{method(o,d){return c.length(this,"length",o,"=",d)},validate(o,d,{limit:u,encoding:p},{name:g,operator:k,args:N}){const R=!p&&o.length;return n.compare(R,u,k)?o:d.error("string."+g,{limit:N.limit,value:o,encoding:p})},args:[{name:"limit",ref:!0,assert:n.limit,message:"must be a positive integer"},"encoding"]},lowercase:{method(){return this.case("lower")}},max:{method(o,d){return c.length(this,"max",o,"<=",d)},args:["limit","encoding"]},min:{method(o,d){return c.length(this,"min",o,">=",d)},args:["limit","encoding"]},normalize:{method(o="NFC"){return t(c.normalizationForms.includes(o),"normalization form must be one of "+c.normalizationForms.join(", ")),this.$_addRule({name:"normalize",args:{form:o}})},validate:(o,{error:d},{form:u})=>o===o.normalize(u)?o:d("string.normalize",{value:o,form:u}),convert:!0},pattern:{alias:"regex",method(o,d={}){t(o instanceof RegExp,"regex must be a RegExp"),t(!o.flags.includes("g")&&!o.flags.includes("y"),"regex should not use global or sticky mode"),typeof d=="string"&&(d={name:d}),n.assertOptions(d,["invert","name"]);const u=["string.pattern",d.invert?".invert":"",d.name?".name":".base"].join("");return this.$_addRule({name:"pattern",args:{regex:o,options:d},errorCode:u})},validate:(o,d,{regex:u,options:p},{errorCode:g})=>u.test(o)^p.invert?o:d.error(g,{name:p.name,regex:u,value:o}),args:["regex","options"],multi:!0},replace:{method(o,d){typeof o=="string"&&(o=new RegExp(r(o),"g")),t(o instanceof RegExp,"pattern must be a RegExp"),t(typeof d=="string","replacement must be a String");const u=this.clone();return u.$_terms.replacements||(u.$_terms.replacements=[]),u.$_terms.replacements.push({pattern:o,replacement:d}),u}},token:{method(){return this.$_addRule("token")},validate:(o,d)=>/^\w+$/.test(o)?o:d.error("string.token")},trim:{method(o=!0){return t(typeof o=="boolean","enabled must be a boolean"),this.$_addRule({name:"trim",args:{enabled:o}})},validate:(o,d,{enabled:u})=>u&&o!==o.trim()?d.error("string.trim"):o,convert:!0},truncate:{method(o=!0){return t(typeof o=="boolean","enabled must be a boolean"),this.$_setFlag("truncate",o)}},uppercase:{method(){return this.case("upper")}},uri:{method(o={}){n.assertOptions(o,["allowRelative","allowQuerySquareBrackets","domain","relativeOnly","scheme","encodeUri"]),o.domain&&n.assertOptions(o.domain,["allowFullyQualified","allowUnicode","maxDomainSegments","minDomainSegments","tlds"]);const{regex:d,scheme:u}=a.regex(o),p=o.domain?c.addressOptions(o.domain):null;return this.$_addRule({name:"uri",args:{options:o},regex:d,domain:p,scheme:u})},validate(o,d,{options:u},{regex:p,domain:g,scheme:k}){if(["http:/","https:/"].includes(o))return d.error("string.uri");let N=p.exec(o);if(!N&&d.prefs.convert&&u.encodeUri){const R=encodeURI(o);N=p.exec(R),N&&(o=R)}if(N){const R=N[1]||N[2];return!g||u.allowRelative&&!R||U.isValid(R,g)?o:d.error("string.domain",{value:R})}return u.relativeOnly?d.error("string.uriRelativeOnly"):u.scheme?d.error("string.uriCustomScheme",{scheme:k,value:o}):d.error("string.uri")}}},manifest:{build(o,d){if(d.replacements)for(const{pattern:u,replacement:p}of d.replacements)o=o.replace(u,p);return o}},messages:{"string.alphanum":"{{#label}} must only contain alpha-numeric characters","string.base":"{{#label}} must be a string","string.base64":"{{#label}} must be a valid base64 string","string.creditCard":"{{#label}} must be a credit card","string.dataUri":"{{#label}} must be a valid dataUri string","string.domain":"{{#label}} must contain a valid domain name","string.email":"{{#label}} must be a valid email","string.empty":"{{#label}} is not allowed to be empty","string.guid":"{{#label}} must be a valid GUID","string.hex":"{{#label}} must only contain hexadecimal characters","string.hexAlign":"{{#label}} hex decoded representation must be byte aligned","string.hostname":"{{#label}} must be a valid hostname","string.ip":"{{#label}} must be a valid ip address with a {{#cidr}} CIDR","string.ipVersion":"{{#label}} must be a valid ip address of one of the following versions {{#version}} with a {{#cidr}} CIDR","string.isoDate":"{{#label}} must be in iso format","string.isoDuration":"{{#label}} must be a valid ISO 8601 duration","string.length":"{{#label}} length must be {{#limit}} characters long","string.lowercase":"{{#label}} must only contain lowercase characters","string.max":"{{#label}} length must be less than or equal to {{#limit}} characters long","string.min":"{{#label}} length must be at least {{#limit}} characters long","string.normalize":"{{#label}} must be unicode normalized in the {{#form}} form","string.token":"{{#label}} must only contain alpha-numeric and underscore characters","string.pattern.base":"{{#label}} with value {:[.]} fails to match the required pattern: {{#regex}}","string.pattern.name":"{{#label}} with value {:[.]} fails to match the {{#name}} pattern","string.pattern.invert.base":"{{#label}} with value {:[.]} matches the inverted pattern: {{#regex}}","string.pattern.invert.name":"{{#label}} with value {:[.]} matches the inverted {{#name}} pattern","string.trim":"{{#label}} must not have leading or trailing whitespace","string.uri":"{{#label}} must be a valid uri","string.uriCustomScheme":"{{#label}} must be a valid uri with a scheme matching the {{#scheme}} pattern","string.uriRelativeOnly":"{{#label}} must be a valid relative uri","string.uppercase":"{{#label}} must only contain uppercase characters"}}),c.addressOptions=function(o){if(!o)return c.tlds||o;if(t(o.minDomainSegments===void 0||Number.isSafeInteger(o.minDomainSegments)&&o.minDomainSegments>0,"minDomainSegments must be a positive integer"),t(o.maxDomainSegments===void 0||Number.isSafeInteger(o.maxDomainSegments)&&o.maxDomainSegments>0,"maxDomainSegments must be a positive integer"),o.tlds===!1)return o;if(o.tlds===!0||o.tlds===void 0)return t(c.tlds,"Built-in TLD list disabled"),Object.assign({},o,c.tlds);t(typeof o.tlds=="object","tlds must be true, false, or an object");const d=o.tlds.deny;if(d)return Array.isArray(d)&&(o=Object.assign({},o,{tlds:{deny:new Set(d)}})),t(o.tlds.deny instanceof Set,"tlds.deny must be an array, Set, or boolean"),t(!o.tlds.allow,"Cannot specify both tlds.allow and tlds.deny lists"),c.validateTlds(o.tlds.deny,"tlds.deny"),o;const u=o.tlds.allow;return u?u===!0?(t(c.tlds,"Built-in TLD list disabled"),Object.assign({},o,c.tlds)):(Array.isArray(u)&&(o=Object.assign({},o,{tlds:{allow:new Set(u)}})),t(o.tlds.allow instanceof Set,"tlds.allow must be an array, Set, or boolean"),c.validateTlds(o.tlds.allow,"tlds.allow"),o):o},c.validateTlds=function(o,d){for(const u of o)t(U.isValid(u,{minDomainSegments:1,maxDomainSegments:1}),`${d} must contain valid top level domain names`)},c.isoDate=function(o){if(!n.isIsoDate(o))return null;/.*T.*[+-]\d\d$/.test(o)&&(o+="00");const d=new Date(o);return isNaN(d.getTime())?null:d.toISOString()},c.length=function(o,d,u,p,g){return t(!g||!1,"Invalid encoding:",g),o.$_addRule({name:d,method:"length",args:{limit:u,encoding:g},operator:p})}},8826:(S,W,m)=>{const t=m(375),U=m(8068),f={};f.Map=class extends Map{slice(){return new f.Map(this)}},S.exports=U.extend({type:"symbol",terms:{map:{init:new f.Map}},coerce:{method(h,{schema:r,error:i}){const a=r.$_terms.map.get(h);return a&&(h=a),r._flags.only&&typeof h!="symbol"?{value:h,errors:i("symbol.map",{map:r.$_terms.map})}:{value:h}}},validate(h,{error:r}){if(typeof h!="symbol")return{value:h,errors:r("symbol.base")}},rules:{map:{method(h){h&&!h[Symbol.iterator]&&typeof h=="object"&&(h=Object.entries(h)),t(h&&h[Symbol.iterator],"Iterable must be an iterable or object");const r=this.clone(),i=[];for(const a of h){t(a&&a[Symbol.iterator],"Entry must be an iterable");const[s,n]=a;t(typeof s!="object"&&typeof s!="function"&&typeof s!="symbol","Key must not be of type object, function, or Symbol"),t(typeof n=="symbol","Value must be a Symbol"),r.$_terms.map.set(s,n),i.push(n)}return r.valid(...i)}}},manifest:{build:(h,r)=>(r.map&&(h=h.map(r.map)),h)},messages:{"symbol.base":"{{#label}} must be a symbol","symbol.map":"{{#label}} must be one of {{#map}}"}})},8863:(S,W,m)=>{const t=m(375),U=m(8571),f=m(738),h=m(9621),r=m(8160),i=m(6354),a=m(493),s={result:Symbol("result")};W.entry=function(n,c,o){let d=r.defaults;o&&(t(o.warnings===void 0,"Cannot override warnings preference in synchronous validation"),t(o.artifacts===void 0,"Cannot override artifacts preference in synchronous validation"),d=r.preferences(r.defaults,o));const u=s.entry(n,c,d);t(!u.mainstay.externals.length,"Schema with external rules must use validateAsync()");const p={value:u.value};return u.error&&(p.error=u.error),u.mainstay.warnings.length&&(p.warning=i.details(u.mainstay.warnings)),u.mainstay.debug&&(p.debug=u.mainstay.debug),u.mainstay.artifacts&&(p.artifacts=u.mainstay.artifacts),p},W.entryAsync=async function(n,c,o){let d=r.defaults;o&&(d=r.preferences(r.defaults,o));const u=s.entry(n,c,d),p=u.mainstay;if(u.error)throw p.debug&&(u.error.debug=p.debug),u.error;if(p.externals.length){let k=u.value;const N=[];for(const R of p.externals){const E=R.state.path,y=R.schema.type==="link"?p.links.get(R.schema):null;let w,v,G=k;const j=E.length?[k]:[],D=E.length?h(n,E):n;if(E.length){w=E[E.length-1];let I=k;for(const x of E.slice(0,-1))I=I[x],j.unshift(I);v=j[0],G=v[w]}try{const I=(C,O)=>(y||R.schema).$_createError(C,G,O,R.state,d),x=await R.method(G,{schema:R.schema,linked:y,state:R.state,prefs:o,original:D,error:I,errorsArray:s.errorsArray,warn:(C,O)=>p.warnings.push((y||R.schema).$_createError(C,G,O,R.state,d)),message:(C,O)=>(y||R.schema).$_createError("external",G,O,R.state,d,{messages:C})});if(x===void 0||x===G)continue;if(x instanceof i.Report){if(p.tracer.log(R.schema,R.state,"rule","external","error"),N.push(x),d.abortEarly)break;continue}if(Array.isArray(x)&&x[r.symbols.errors]){if(p.tracer.log(R.schema,R.state,"rule","external","error"),N.push(...x),d.abortEarly)break;continue}v?(p.tracer.value(R.state,"rule",G,x,"external"),v[w]=x):(p.tracer.value(R.state,"rule",k,x,"external"),k=x)}catch(I){throw d.errors.label&&(I.message+=` (${R.label})`),I}}if(u.value=k,N.length)throw u.error=i.process(N,n,d),p.debug&&(u.error.debug=p.debug),u.error}if(!d.warnings&&!d.debug&&!d.artifacts)return u.value;const g={value:u.value};return p.warnings.length&&(g.warning=i.details(p.warnings)),p.debug&&(g.debug=p.debug),p.artifacts&&(g.artifacts=p.artifacts),g},s.Mainstay=class{constructor(n,c,o){this.externals=[],this.warnings=[],this.tracer=n,this.debug=c,this.links=o,this.shadow=null,this.artifacts=null,this._snapshots=[]}snapshot(){this._snapshots.push({externals:this.externals.slice(),warnings:this.warnings.slice()})}restore(){const n=this._snapshots.pop();this.externals=n.externals,this.warnings=n.warnings}commit(){this._snapshots.pop()}},s.entry=function(n,c,o){const{tracer:d,cleanup:u}=s.tracer(c,o),p=o.debug?[]:null,g=c._ids._schemaChain?new Map:null,k=new s.Mainstay(d,p,g),N=c._ids._schemaChain?[{schema:c}]:null,R=new a([],[],{mainstay:k,schemas:N}),E=W.validate(n,c,R,o);u&&c.$_root.untrace();const y=i.process(E.errors,n,o);return{value:E.value,error:y,mainstay:k}},s.tracer=function(n,c){return n.$_root._tracer?{tracer:n.$_root._tracer._register(n)}:c.debug?(t(n.$_root.trace,"Debug mode not supported"),{tracer:n.$_root.trace()._register(n),cleanup:!0}):{tracer:s.ignore}},W.validate=function(n,c,o,d,u={}){if(c.$_terms.whens&&(c=c._generate(n,o,d).schema),c._preferences&&(d=s.prefs(c,d)),c._cache&&d.cache){const y=c._cache.get(n);if(o.mainstay.tracer.debug(o,"validate","cached",!!y),y)return y}const p=(y,w,v)=>c.$_createError(y,n,w,v||o,d),g={original:n,prefs:d,schema:c,state:o,error:p,errorsArray:s.errorsArray,warn:(y,w,v)=>o.mainstay.warnings.push(p(y,w,v)),message:(y,w)=>c.$_createError("custom",n,w,o,d,{messages:y})};o.mainstay.tracer.entry(c,o);const k=c._definition;if(k.prepare&&n!==void 0&&d.convert){const y=k.prepare(n,g);if(y){if(o.mainstay.tracer.value(o,"prepare",n,y.value),y.errors)return s.finalize(y.value,[].concat(y.errors),g);n=y.value}}if(k.coerce&&n!==void 0&&d.convert&&(!k.coerce.from||k.coerce.from.includes(typeof n))){const y=k.coerce.method(n,g);if(y){if(o.mainstay.tracer.value(o,"coerced",n,y.value),y.errors)return s.finalize(y.value,[].concat(y.errors),g);n=y.value}}const N=c._flags.empty;N&&N.$_match(s.trim(n,c),o.nest(N),r.defaults)&&(o.mainstay.tracer.value(o,"empty",n,void 0),n=void 0);const R=u.presence||c._flags.presence||(c._flags._endedSwitch?null:d.presence);if(n===void 0){if(R==="forbidden")return s.finalize(n,null,g);if(R==="required")return s.finalize(n,[c.$_createError("any.required",n,null,o,d)],g);if(R==="optional"){if(c._flags.default!==r.symbols.deepDefault)return s.finalize(n,null,g);o.mainstay.tracer.value(o,"default",n,{}),n={}}}else if(R==="forbidden")return s.finalize(n,[c.$_createError("any.unknown",n,null,o,d)],g);const E=[];if(c._valids){const y=c._valids.get(n,o,d,c._flags.insensitive);if(y)return d.convert&&(o.mainstay.tracer.value(o,"valids",n,y.value),n=y.value),o.mainstay.tracer.filter(c,o,"valid",y),s.finalize(n,null,g);if(c._flags.only){const w=c.$_createError("any.only",n,{valids:c._valids.values({display:!0})},o,d);if(d.abortEarly)return s.finalize(n,[w],g);E.push(w)}}if(c._invalids){const y=c._invalids.get(n,o,d,c._flags.insensitive);if(y){o.mainstay.tracer.filter(c,o,"invalid",y);const w=c.$_createError("any.invalid",n,{invalids:c._invalids.values({display:!0})},o,d);if(d.abortEarly)return s.finalize(n,[w],g);E.push(w)}}if(k.validate){const y=k.validate(n,g);if(y&&(o.mainstay.tracer.value(o,"base",n,y.value),n=y.value,y.errors)){if(!Array.isArray(y.errors))return E.push(y.errors),s.finalize(n,E,g);if(y.errors.length)return E.push(...y.errors),s.finalize(n,E,g)}}return c._rules.length?s.rules(n,E,g):s.finalize(n,E,g)},s.rules=function(n,c,o){const{schema:d,state:u,prefs:p}=o;for(const g of d._rules){const k=d._definition.rules[g.method];if(k.convert&&p.convert){u.mainstay.tracer.log(d,u,"rule",g.name,"full");continue}let N,R=g.args;if(g._resolve.length){R=Object.assign({},R);for(const y of g._resolve){const w=k.argsByName.get(y),v=R[y].resolve(n,u,p),G=w.normalize?w.normalize(v):v,j=r.validateArg(G,null,w);if(j){N=d.$_createError("any.ref",v,{arg:y,ref:R[y],reason:j},u,p);break}R[y]=G}}N=N||k.validate(n,o,R,g);const E=s.rule(N,g);if(E.errors){if(u.mainstay.tracer.log(d,u,"rule",g.name,"error"),g.warn){u.mainstay.warnings.push(...E.errors);continue}if(p.abortEarly)return s.finalize(n,E.errors,o);c.push(...E.errors)}else u.mainstay.tracer.log(d,u,"rule",g.name,"pass"),u.mainstay.tracer.value(u,"rule",n,E.value,g.name),n=E.value}return s.finalize(n,c,o)},s.rule=function(n,c){return n instanceof i.Report?(s.error(n,c),{errors:[n],value:null}):Array.isArray(n)&&n[r.symbols.errors]?(n.forEach(o=>s.error(o,c)),{errors:n,value:null}):{errors:null,value:n}},s.error=function(n,c){return c.message&&n._setTemplate(c.message),n},s.finalize=function(n,c,o){c=c||[];const{schema:d,state:u,prefs:p}=o;if(c.length){const k=s.default("failover",void 0,c,o);k!==void 0&&(u.mainstay.tracer.value(u,"failover",n,k),n=k,c=[])}if(c.length&&d._flags.error)if(typeof d._flags.error=="function"){c=d._flags.error(c),Array.isArray(c)||(c=[c]);for(const k of c)t(k instanceof Error||k instanceof i.Report,"error() must return an Error object")}else c=[d._flags.error];if(n===void 0){const k=s.default("default",n,c,o);u.mainstay.tracer.value(u,"default",n,k),n=k}if(d._flags.cast&&n!==void 0){const k=d._definition.cast[d._flags.cast];if(k.from(n)){const N=k.to(n,o);u.mainstay.tracer.value(u,"cast",n,N,d._flags.cast),n=N}}if(d.$_terms.externals&&p.externals&&p._externals!==!1)for(const{method:k}of d.$_terms.externals)u.mainstay.externals.push({method:k,schema:d,state:u,label:i.label(d._flags,u,p)});const g={value:n,errors:c.length?c:null};return d._flags.result&&(g.value=d._flags.result==="strip"?void 0:o.original,u.mainstay.tracer.value(u,d._flags.result,n,g.value),u.shadow(n,d._flags.result)),d._cache&&p.cache!==!1&&!d._refs.length&&d._cache.set(o.original,g),n===void 0||g.errors||d._flags.artifact===void 0||(u.mainstay.artifacts=u.mainstay.artifacts||new Map,u.mainstay.artifacts.has(d._flags.artifact)||u.mainstay.artifacts.set(d._flags.artifact,[]),u.mainstay.artifacts.get(d._flags.artifact).push(u.path)),g},s.prefs=function(n,c){const o=c===r.defaults;return o&&n._preferences[r.symbols.prefs]?n._preferences[r.symbols.prefs]:(c=r.preferences(c,n._preferences),o&&(n._preferences[r.symbols.prefs]=c),c)},s.default=function(n,c,o,d){const{schema:u,state:p,prefs:g}=d,k=u._flags[n];if(g.noDefaults||k===void 0)return c;if(p.mainstay.tracer.log(u,p,"rule",n,"full"),!k)return k;if(typeof k=="function"){const N=k.length?[U(p.ancestors[0]),d]:[];try{return k(...N)}catch(R){return void o.push(u.$_createError(`any.${n}`,null,{error:R},p,g))}}return typeof k!="object"?k:k[r.symbols.literal]?k.literal:r.isResolvable(k)?k.resolve(c,p,g):U(k)},s.trim=function(n,c){if(typeof n!="string")return n;const o=c.$_getRule("trim");return o&&o.args.enabled?n.trim():n},s.ignore={active:!1,debug:f,entry:f,filter:f,log:f,resolve:f,value:f},s.errorsArray=function(){const n=[];return n[r.symbols.errors]=!0,n}},2036:(S,W,m)=>{const t=m(375),U=m(9474),f=m(8160),h={};S.exports=h.Values=class{constructor(r,i){this._values=new Set(r),this._refs=new Set(i),this._lowercase=h.lowercases(r),this._override=!1}get length(){return this._values.size+this._refs.size}add(r,i){f.isResolvable(r)?this._refs.has(r)||(this._refs.add(r),i&&i.register(r)):this.has(r,null,null,!1)||(this._values.add(r),typeof r=="string"&&this._lowercase.set(r.toLowerCase(),r))}static merge(r,i,a){if(r=r||new h.Values,i){if(i._override)return i.clone();for(const s of[...i._values,...i._refs])r.add(s)}if(a)for(const s of[...a._values,...a._refs])r.remove(s);return r.length?r:null}remove(r){f.isResolvable(r)?this._refs.delete(r):(this._values.delete(r),typeof r=="string"&&this._lowercase.delete(r.toLowerCase()))}has(r,i,a,s){return!!this.get(r,i,a,s)}get(r,i,a,s){if(!this.length)return!1;if(this._values.has(r))return{value:r};if(typeof r=="string"&&r&&s){const n=this._lowercase.get(r.toLowerCase());if(n)return{value:n}}if(!this._refs.size&&typeof r!="object")return!1;if(typeof r=="object"){for(const n of this._values)if(U(n,r))return{value:n}}if(i)for(const n of this._refs){const c=n.resolve(r,i,a,null,{in:!0});if(c===void 0)continue;const o=n.in&&typeof c=="object"?Array.isArray(c)?c:Object.keys(c):[c];for(const d of o)if(typeof d==typeof r){if(s&&r&&typeof r=="string"){if(d.toLowerCase()===r.toLowerCase())return{value:d,ref:n}}else if(U(d,r))return{value:d,ref:n}}}return!1}override(){this._override=!0}values(r){if(r&&r.display){const i=[];for(const a of[...this._values,...this._refs])a!==void 0&&i.push(a);return i}return Array.from([...this._values,...this._refs])}clone(){const r=new h.Values(this._values,this._refs);return r._override=this._override,r}concat(r){t(!r._override,"Cannot concat override set of values");const i=new h.Values([...this._values,...r._values],[...this._refs,...r._refs]);return i._override=this._override,i}describe(){const r=[];this._override&&r.push({override:!0});for(const i of this._values.values())r.push(i&&typeof i=="object"?{value:i}:i);for(const i of this._refs.values())r.push(i.describe());return r}},h.Values.prototype[f.symbols.values]=!0,h.Values.prototype.slice=h.Values.prototype.clone,h.lowercases=function(r){const i=new Map;if(r)for(const a of r)typeof a=="string"&&i.set(a.toLowerCase(),a);return i}},978:(S,W,m)=>{const t=m(375),U=m(8571),f=m(1687),h=m(9621),r={};S.exports=function(i,a,s={}){if(t(i&&typeof i=="object","Invalid defaults value: must be an object"),t(!a||a===!0||typeof a=="object","Invalid source value: must be true, falsy or an object"),t(typeof s=="object","Invalid options: must be an object"),!a)return null;if(s.shallow)return r.applyToDefaultsWithShallow(i,a,s);const n=U(i);if(a===!0)return n;const c=s.nullOverride!==void 0&&s.nullOverride;return f(n,a,{nullOverride:c,mergeArrays:!1})},r.applyToDefaultsWithShallow=function(i,a,s){const n=s.shallow;t(Array.isArray(n),"Invalid keys");const c=new Map,o=a===!0?null:new Set;for(let p of n){p=Array.isArray(p)?p:p.split(".");const g=h(i,p);g&&typeof g=="object"?c.set(g,o&&h(a,p)||g):o&&o.add(p)}const d=U(i,{},c);if(!o)return d;for(const p of o)r.reachCopy(d,a,p);const u=s.nullOverride!==void 0&&s.nullOverride;return f(d,a,{nullOverride:u,mergeArrays:!1})},r.reachCopy=function(i,a,s){for(const o of s){if(!(o in a))return;const d=a[o];if(typeof d!="object"||d===null)return;a=d}const n=a;let c=i;for(let o=0;o<s.length-1;++o){const d=s[o];typeof c[d]!="object"&&(c[d]={}),c=c[d]}c[s[s.length-1]]=n}},375:(S,W,m)=>{const t=m(7916);S.exports=function(U,...f){if(!U)throw f.length===1&&f[0]instanceof Error?f[0]:new t(f)}},8571:(S,W,m)=>{const t=m(9621),U=m(4277),f=m(7043),h={needsProtoHack:new Set([U.set,U.map,U.weakSet,U.weakMap])};S.exports=h.clone=function(r,i={},a=null){if(typeof r!="object"||r===null)return r;let s=h.clone,n=a;if(i.shallow){if(i.shallow!==!0)return h.cloneWithShallow(r,i);s=u=>u}else if(n){const u=n.get(r);if(u)return u}else n=new Map;const c=U.getInternalProto(r);if(c===U.buffer)return!1;if(c===U.date)return new Date(r.getTime());if(c===U.regex)return new RegExp(r);const o=h.base(r,c,i);if(o===r)return r;if(n&&n.set(r,o),c===U.set)for(const u of r)o.add(s(u,i,n));else if(c===U.map)for(const[u,p]of r)o.set(u,s(p,i,n));const d=f.keys(r,i);for(const u of d){if(u==="__proto__")continue;if(c===U.array&&u==="length"){o.length=r.length;continue}const p=Object.getOwnPropertyDescriptor(r,u);p?p.get||p.set?Object.defineProperty(o,u,p):p.enumerable?o[u]=s(r[u],i,n):Object.defineProperty(o,u,{enumerable:!1,writable:!0,configurable:!0,value:s(r[u],i,n)}):Object.defineProperty(o,u,{enumerable:!0,writable:!0,configurable:!0,value:s(r[u],i,n)})}return o},h.cloneWithShallow=function(r,i){const a=i.shallow;(i=Object.assign({},i)).shallow=!1;const s=new Map;for(const n of a){const c=t(r,n);typeof c!="object"&&typeof c!="function"||s.set(c,c)}return h.clone(r,i,s)},h.base=function(r,i,a){if(a.prototype===!1)return h.needsProtoHack.has(i)?new i.constructor:i===U.array?[]:{};const s=Object.getPrototypeOf(r);if(s&&s.isImmutable)return r;if(i===U.array){const n=[];return s!==i&&Object.setPrototypeOf(n,s),n}if(h.needsProtoHack.has(i)){const n=new s.constructor;return s!==i&&Object.setPrototypeOf(n,s),n}return Object.create(s)}},9474:(S,W,m)=>{const t=m(4277),U={mismatched:null};S.exports=function(f,h,r){return r=Object.assign({prototype:!0},r),!!U.isDeepEqual(f,h,r,[])},U.isDeepEqual=function(f,h,r,i){if(f===h)return f!==0||1/f==1/h;const a=typeof f;if(a!==typeof h||f===null||h===null)return!1;if(a==="function"){if(!r.deepFunction||f.toString()!==h.toString())return!1}else if(a!=="object")return f!=f&&h!=h;const s=U.getSharedType(f,h,!!r.prototype);switch(s){case t.buffer:return!1;case t.promise:return f===h;case t.regex:return f.toString()===h.toString();case U.mismatched:return!1}for(let n=i.length-1;n>=0;--n)if(i[n].isSame(f,h))return!0;i.push(new U.SeenEntry(f,h));try{return!!U.isDeepEqualObj(s,f,h,r,i)}finally{i.pop()}},U.getSharedType=function(f,h,r){if(r)return Object.getPrototypeOf(f)!==Object.getPrototypeOf(h)?U.mismatched:t.getInternalProto(f);const i=t.getInternalProto(f);return i!==t.getInternalProto(h)?U.mismatched:i},U.valueOf=function(f){const h=f.valueOf;if(h===void 0)return f;try{return h.call(f)}catch(r){return r}},U.hasOwnEnumerableProperty=function(f,h){return Object.prototype.propertyIsEnumerable.call(f,h)},U.isSetSimpleEqual=function(f,h){for(const r of Set.prototype.values.call(f))if(!Set.prototype.has.call(h,r))return!1;return!0},U.isDeepEqualObj=function(f,h,r,i,a){const{isDeepEqual:s,valueOf:n,hasOwnEnumerableProperty:c}=U,{keys:o,getOwnPropertySymbols:d}=Object;if(f===t.array){if(!i.part){if(h.length!==r.length)return!1;for(let N=0;N<h.length;++N)if(!s(h[N],r[N],i,a))return!1;return!0}for(const N of h)for(const R of r)if(s(N,R,i,a))return!0}else if(f===t.set){if(h.size!==r.size)return!1;if(!U.isSetSimpleEqual(h,r)){const N=new Set(Set.prototype.values.call(r));for(const R of Set.prototype.values.call(h)){if(N.delete(R))continue;let E=!1;for(const y of N)if(s(R,y,i,a)){N.delete(y),E=!0;break}if(!E)return!1}}}else if(f===t.map){if(h.size!==r.size)return!1;for(const[N,R]of Map.prototype.entries.call(h))if(R===void 0&&!Map.prototype.has.call(r,N)||!s(R,Map.prototype.get.call(r,N),i,a))return!1}else if(f===t.error&&(h.name!==r.name||h.message!==r.message))return!1;const u=n(h),p=n(r);if((h!==u||r!==p)&&!s(u,p,i,a))return!1;const g=o(h);if(!i.part&&g.length!==o(r).length&&!i.skip)return!1;let k=0;for(const N of g)if(i.skip&&i.skip.includes(N))r[N]===void 0&&++k;else if(!c(r,N)||!s(h[N],r[N],i,a))return!1;if(!i.part&&g.length-k!==o(r).length)return!1;if(i.symbols!==!1){const N=d(h),R=new Set(d(r));for(const E of N){if(!i.skip||!i.skip.includes(E)){if(c(h,E)){if(!c(r,E)||!s(h[E],r[E],i,a))return!1}else if(c(r,E))return!1}R.delete(E)}for(const E of R)if(c(r,E))return!1}return!0},U.SeenEntry=class{constructor(f,h){this.obj=f,this.ref=h}isSame(f,h){return this.obj===f&&this.ref===h}}},7916:(S,W,m)=>{const t=m(8761);S.exports=class extends Error{constructor(U){super(U.filter(f=>f!=="").map(f=>typeof f=="string"?f:f instanceof Error?f.message:t(f)).join(" ")||"Unknown error"),typeof Error.captureStackTrace=="function"&&Error.captureStackTrace(this,W.assert)}}},5277:S=>{const W={};S.exports=function(m){if(!m)return"";let t="";for(let U=0;U<m.length;++U){const f=m.charCodeAt(U);W.isSafe(f)?t+=m[U]:t+=W.escapeHtmlChar(f)}return t},W.escapeHtmlChar=function(m){return W.namedHtml.get(m)||(m>=256?"&#"+m+";":`&#x${m.toString(16).padStart(2,"0")};`)},W.isSafe=function(m){return W.safeCharCodes.has(m)},W.namedHtml=new Map([[38,"&amp;"],[60,"&lt;"],[62,"&gt;"],[34,"&quot;"],[160,"&nbsp;"],[162,"&cent;"],[163,"&pound;"],[164,"&curren;"],[169,"&copy;"],[174,"&reg;"]]),W.safeCharCodes=function(){const m=new Set;for(let t=32;t<123;++t)(t>=97||t>=65&&t<=90||t>=48&&t<=57||t===32||t===46||t===44||t===45||t===58||t===95)&&m.add(t);return m}()},6064:S=>{S.exports=function(W){return W.replace(/[\^\$\.\*\+\-\?\=\!\:\|\\\/\(\)\[\]\{\}\,]/g,"\\$&")}},738:S=>{S.exports=function(){}},1687:(S,W,m)=>{const t=m(375),U=m(8571),f=m(7043),h={};S.exports=h.merge=function(r,i,a){if(t(r&&typeof r=="object","Invalid target value: must be an object"),t(i==null||typeof i=="object","Invalid source value: must be null, undefined, or an object"),!i)return r;if(a=Object.assign({nullOverride:!0,mergeArrays:!0},a),Array.isArray(i)){t(Array.isArray(r),"Cannot merge array onto an object"),a.mergeArrays||(r.length=0);for(let n=0;n<i.length;++n)r.push(U(i[n],{symbols:a.symbols}));return r}const s=f.keys(i,a);for(let n=0;n<s.length;++n){const c=s[n];if(c==="__proto__"||!Object.prototype.propertyIsEnumerable.call(i,c))continue;const o=i[c];if(o&&typeof o=="object"){if(r[c]===o)continue;!r[c]||typeof r[c]!="object"||Array.isArray(r[c])!==Array.isArray(o)||o instanceof Date||o instanceof RegExp?r[c]=U(o,{symbols:a.symbols}):h.merge(r[c],o,a)}else(o!=null||a.nullOverride)&&(r[c]=o)}return r}},9621:(S,W,m)=>{const t=m(375),U={};S.exports=function(f,h,r){if(h===!1||h==null)return f;typeof(r=r||{})=="string"&&(r={separator:r});const i=Array.isArray(h);t(!i||!r.separator,"Separator option is not valid for array-based chain");const a=i?h:h.split(r.separator||".");let s=f;for(let n=0;n<a.length;++n){let c=a[n];const o=r.iterables&&U.iterables(s);if(Array.isArray(s)||o==="set"){const d=Number(c);Number.isInteger(d)&&(c=d<0?s.length+d:d)}if(!s||typeof s=="function"&&r.functions===!1||!o&&s[c]===void 0){t(!r.strict||n+1===a.length,"Missing segment",c,"in reach path ",h),t(typeof s=="object"||r.functions===!0||typeof s!="function","Invalid segment",c,"in reach path ",h),s=r.default;break}s=o?o==="set"?[...s][c]:s.get(c):s[c]}return s},U.iterables=function(f){return f instanceof Set?"set":f instanceof Map?"map":void 0}},8761:S=>{S.exports=function(...W){try{return JSON.stringify(...W)}catch(m){return"[Cannot display object: "+m.message+"]"}}},4277:(S,W)=>{const m={};W=S.exports={array:Array.prototype,buffer:!1,date:Date.prototype,error:Error.prototype,generic:Object.prototype,map:Map.prototype,promise:Promise.prototype,regex:RegExp.prototype,set:Set.prototype,weakMap:WeakMap.prototype,weakSet:WeakSet.prototype},m.typeMap=new Map([["[object Error]",W.error],["[object Map]",W.map],["[object Promise]",W.promise],["[object Set]",W.set],["[object WeakMap]",W.weakMap],["[object WeakSet]",W.weakSet]]),W.getInternalProto=function(t){if(Array.isArray(t))return W.array;if(t instanceof Date)return W.date;if(t instanceof RegExp)return W.regex;if(t instanceof Error)return W.error;const U=Object.prototype.toString.call(t);return m.typeMap.get(U)||W.generic}},7043:(S,W)=>{W.keys=function(m,t={}){return t.symbols!==!1?Reflect.ownKeys(m):Object.getOwnPropertyNames(m)}},3652:(S,W,m)=>{const t=m(375),U={};W.Sorter=class{constructor(){this._items=[],this.nodes=[]}add(f,h){const r=[].concat((h=h||{}).before||[]),i=[].concat(h.after||[]),a=h.group||"?",s=h.sort||0;t(!r.includes(a),`Item cannot come before itself: ${a}`),t(!r.includes("?"),"Item cannot come before unassociated items"),t(!i.includes(a),`Item cannot come after itself: ${a}`),t(!i.includes("?"),"Item cannot come after unassociated items"),Array.isArray(f)||(f=[f]);for(const n of f){const c={seq:this._items.length,sort:s,before:r,after:i,group:a,node:n};this._items.push(c)}if(!h.manual){const n=this._sort();t(n,"item",a!=="?"?`added into group ${a}`:"","created a dependencies error")}return this.nodes}merge(f){Array.isArray(f)||(f=[f]);for(const r of f)if(r)for(const i of r._items)this._items.push(Object.assign({},i));this._items.sort(U.mergeSort);for(let r=0;r<this._items.length;++r)this._items[r].seq=r;const h=this._sort();return t(h,"merge created a dependencies error"),this.nodes}sort(){const f=this._sort();return t(f,"sort created a dependencies error"),this.nodes}_sort(){const f={},h=Object.create(null),r=Object.create(null);for(const c of this._items){const o=c.seq,d=c.group;r[d]=r[d]||[],r[d].push(o),f[o]=c.before;for(const u of c.after)h[u]=h[u]||[],h[u].push(o)}for(const c in f){const o=[];for(const d in f[c]){const u=f[c][d];r[u]=r[u]||[],o.push(...r[u])}f[c]=o}for(const c in h)if(r[c])for(const o of r[c])f[o].push(...h[c]);const i={};for(const c in f){const o=f[c];for(const d of o)i[d]=i[d]||[],i[d].push(c)}const a={},s=[];for(let c=0;c<this._items.length;++c){let o=c;if(i[c]){o=null;for(let d=0;d<this._items.length;++d){if(a[d]===!0)continue;i[d]||(i[d]=[]);const u=i[d].length;let p=0;for(let g=0;g<u;++g)a[i[d][g]]&&++p;if(p===u){o=d;break}}}o!==null&&(a[o]=!0,s.push(o))}if(s.length!==this._items.length)return!1;const n={};for(const c of this._items)n[c.seq]=c;this._items=[],this.nodes=[];for(const c of s){const o=n[c];this.nodes.push(o.node),this._items.push(o)}return!0}},U.mergeSort=(f,h)=>f.sort===h.sort?0:f.sort<h.sort?-1:1},5380:(S,W,m)=>{const t=m(443),U=m(2178),f={minDomainSegments:2,nonAsciiRx:/[^\x00-\x7f]/,domainControlRx:/[\x00-\x20@\:\/\\#!\$&\'\(\)\*\+,;=\?]/,tldSegmentRx:/^[a-zA-Z](?:[a-zA-Z0-9\-]*[a-zA-Z0-9])?$/,domainSegmentRx:/^[a-zA-Z0-9](?:[a-zA-Z0-9\-]*[a-zA-Z0-9])?$/,URL:t.URL||URL};W.analyze=function(h,r={}){if(!h)return U.code("DOMAIN_NON_EMPTY_STRING");if(typeof h!="string")throw new Error("Invalid input: domain must be a string");if(h.length>256)return U.code("DOMAIN_TOO_LONG");if(f.nonAsciiRx.test(h)){if(r.allowUnicode===!1)return U.code("DOMAIN_INVALID_UNICODE_CHARS");h=h.normalize("NFC")}if(f.domainControlRx.test(h))return U.code("DOMAIN_INVALID_CHARS");h=f.punycode(h),r.allowFullyQualified&&h[h.length-1]==="."&&(h=h.slice(0,-1));const i=r.minDomainSegments||f.minDomainSegments,a=h.split(".");if(a.length<i)return U.code("DOMAIN_SEGMENTS_COUNT");if(r.maxDomainSegments&&a.length>r.maxDomainSegments)return U.code("DOMAIN_SEGMENTS_COUNT_MAX");const s=r.tlds;if(s){const n=a[a.length-1].toLowerCase();if(s.deny&&s.deny.has(n)||s.allow&&!s.allow.has(n))return U.code("DOMAIN_FORBIDDEN_TLDS")}for(let n=0;n<a.length;++n){const c=a[n];if(!c.length)return U.code("DOMAIN_EMPTY_SEGMENT");if(c.length>63)return U.code("DOMAIN_LONG_SEGMENT");if(n<a.length-1){if(!f.domainSegmentRx.test(c))return U.code("DOMAIN_INVALID_CHARS")}else if(!f.tldSegmentRx.test(c))return U.code("DOMAIN_INVALID_TLDS_CHARS")}return null},W.isValid=function(h,r){return!W.analyze(h,r)},f.punycode=function(h){h.includes("%")&&(h=h.replace(/%/g,"%25"));try{return new f.URL(`http://${h}`).host}catch{return h}}},1745:(S,W,m)=>{const t=m(9848),U=m(5380),f=m(2178),h={nonAsciiRx:/[^\x00-\x7f]/,encoder:new(t.TextEncoder||TextEncoder)};W.analyze=function(r,i){return h.email(r,i)},W.isValid=function(r,i){return!h.email(r,i)},h.email=function(r,i={}){if(typeof r!="string")throw new Error("Invalid input: email must be a string");if(!r)return f.code("EMPTY_STRING");const a=!h.nonAsciiRx.test(r);if(!a){if(i.allowUnicode===!1)return f.code("FORBIDDEN_UNICODE");r=r.normalize("NFC")}const s=r.split("@");if(s.length!==2)return s.length>2?f.code("MULTIPLE_AT_CHAR"):f.code("MISSING_AT_CHAR");const[n,c]=s;if(!n)return f.code("EMPTY_LOCAL");if(!i.ignoreLength){if(r.length>254)return f.code("ADDRESS_TOO_LONG");if(h.encoder.encode(n).length>64)return f.code("LOCAL_TOO_LONG")}return h.local(n,a)||U.analyze(c,i)},h.local=function(r,i){const a=r.split(".");for(const s of a){if(!s.length)return f.code("EMPTY_LOCAL_SEGMENT");if(i){if(!h.atextRx.test(s))return f.code("INVALID_LOCAL_CHARS")}else for(const n of s){if(h.atextRx.test(n))continue;const c=h.binary(n);if(!h.atomRx.test(c))return f.code("INVALID_LOCAL_CHARS")}}},h.binary=function(r){return Array.from(h.encoder.encode(r)).map(i=>String.fromCharCode(i)).join("")},h.atextRx=/^[\w!#\$%&'\*\+\-/=\?\^`\{\|\}~]+$/,h.atomRx=new RegExp(["(?:[\\xc2-\\xdf][\\x80-\\xbf])","(?:\\xe0[\\xa0-\\xbf][\\x80-\\xbf])|(?:[\\xe1-\\xec][\\x80-\\xbf]{2})|(?:\\xed[\\x80-\\x9f][\\x80-\\xbf])|(?:[\\xee-\\xef][\\x80-\\xbf]{2})","(?:\\xf0[\\x90-\\xbf][\\x80-\\xbf]{2})|(?:[\\xf1-\\xf3][\\x80-\\xbf]{3})|(?:\\xf4[\\x80-\\x8f][\\x80-\\xbf]{2})"].join("|"))},2178:(S,W)=>{W.codes={EMPTY_STRING:"Address must be a non-empty string",FORBIDDEN_UNICODE:"Address contains forbidden Unicode characters",MULTIPLE_AT_CHAR:"Address cannot contain more than one @ character",MISSING_AT_CHAR:"Address must contain one @ character",EMPTY_LOCAL:"Address local part cannot be empty",ADDRESS_TOO_LONG:"Address too long",LOCAL_TOO_LONG:"Address local part too long",EMPTY_LOCAL_SEGMENT:"Address local part contains empty dot-separated segment",INVALID_LOCAL_CHARS:"Address local part contains invalid character",DOMAIN_NON_EMPTY_STRING:"Domain must be a non-empty string",DOMAIN_TOO_LONG:"Domain too long",DOMAIN_INVALID_UNICODE_CHARS:"Domain contains forbidden Unicode characters",DOMAIN_INVALID_CHARS:"Domain contains invalid character",DOMAIN_INVALID_TLDS_CHARS:"Domain contains invalid tld character",DOMAIN_SEGMENTS_COUNT:"Domain lacks the minimum required number of segments",DOMAIN_SEGMENTS_COUNT_MAX:"Domain contains too many segments",DOMAIN_FORBIDDEN_TLDS:"Domain uses forbidden TLD",DOMAIN_EMPTY_SEGMENT:"Domain contains empty dot-separated segment",DOMAIN_LONG_SEGMENT:"Domain contains dot-separated segment that is too long"},W.code=function(m){return{code:m,error:W.codes[m]}}},9959:(S,W,m)=>{const t=m(375),U=m(5752);W.regex=function(f={}){t(f.cidr===void 0||typeof f.cidr=="string","options.cidr must be a string");const h=f.cidr?f.cidr.toLowerCase():"optional";t(["required","optional","forbidden"].includes(h),"options.cidr must be one of required, optional, forbidden"),t(f.version===void 0||typeof f.version=="string"||Array.isArray(f.version),"options.version must be a string or an array of string");let r=f.version||["ipv4","ipv6","ipvfuture"];Array.isArray(r)||(r=[r]),t(r.length>=1,"options.version must have at least 1 version specified");for(let s=0;s<r.length;++s)t(typeof r[s]=="string","options.version must only contain strings"),r[s]=r[s].toLowerCase(),t(["ipv4","ipv6","ipvfuture"].includes(r[s]),"options.version contains unknown version "+r[s]+" - must be one of ipv4, ipv6, ipvfuture");r=Array.from(new Set(r));const i=`(?:${r.map(s=>{if(h==="forbidden")return U.ip[s];const n=`\\/${s==="ipv4"?U.ip.v4Cidr:U.ip.v6Cidr}`;return h==="required"?`${U.ip[s]}${n}`:`${U.ip[s]}(?:${n})?`}).join("|")})`,a=new RegExp(`^${i}$`);return{cidr:h,versions:r,regex:a,raw:i}}},5752:(S,W,m)=>{const t=m(375),U=m(6064),f={generate:function(){const h={},r="\\dA-Fa-f",i="["+r+"]",a="\\w-\\.~",s="!\\$&'\\(\\)\\*\\+,;=",n="%"+r,c=a+n+s+":@",o="["+c+"]",d="(?:0{0,2}\\d|0?[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])";h.ipv4address="(?:"+d+"\\.){3}"+d;const u=i+"{1,4}",p="(?:"+u+":"+u+"|"+h.ipv4address+")",g="(?:"+u+":){6}"+p,k="::(?:"+u+":){5}"+p,N="(?:"+u+")?::(?:"+u+":){4}"+p,R="(?:(?:"+u+":){0,1}"+u+")?::(?:"+u+":){3}"+p,E="(?:(?:"+u+":){0,2}"+u+")?::(?:"+u+":){2}"+p,y="(?:(?:"+u+":){0,3}"+u+")?::"+u+":"+p,w="(?:(?:"+u+":){0,4}"+u+")?::"+p,v="(?:(?:"+u+":){0,5}"+u+")?::"+u,G="(?:(?:"+u+":){0,6}"+u+")?::";h.ipv4Cidr="(?:\\d|[1-2]\\d|3[0-2])",h.ipv6Cidr="(?:0{0,2}\\d|0?[1-9]\\d|1[01]\\d|12[0-8])",h.ipv6address="(?:"+g+"|"+k+"|"+N+"|"+R+"|"+E+"|"+y+"|"+w+"|"+v+"|"+G+")",h.ipvFuture="v"+i+"+\\.["+a+s+":]+",h.scheme="[a-zA-Z][a-zA-Z\\d+-\\.]*",h.schemeRegex=new RegExp(h.scheme);const j="["+a+n+s+":]*",D="["+a+n+s+"]{1,255}",I="(?:\\[(?:"+h.ipv6address+"|"+h.ipvFuture+")\\]|"+h.ipv4address+"|"+D+")",x="(?:"+j+"@)?"+I+"(?::\\d*)?",C="(?:"+j+"@)?("+I+")(?::\\d*)?",O=o+"*",B=o+"+",X="(?:\\/"+O+")*",_="\\/(?:"+B+X+")?",q=B+X,se="["+a+n+s+"@]+"+X,ie="(?:\\/\\/\\/"+O+X+")";return h.hierPart="(?:(?:\\/\\/"+x+X+")|"+_+"|"+q+"|"+ie+")",h.hierPartCapture="(?:(?:\\/\\/"+C+X+")|"+_+"|"+q+")",h.relativeRef="(?:(?:\\/\\/"+x+X+")|"+_+"|"+se+"|)",h.relativeRefCapture="(?:(?:\\/\\/"+C+X+")|"+_+"|"+se+"|)",h.query="["+c+"\\/\\?]*(?=#|$)",h.queryWithSquareBrackets="["+c+"\\[\\]\\/\\?]*(?=#|$)",h.fragment="["+c+"\\/\\?]*",h}};f.rfc3986=f.generate(),W.ip={v4Cidr:f.rfc3986.ipv4Cidr,v6Cidr:f.rfc3986.ipv6Cidr,ipv4:f.rfc3986.ipv4address,ipv6:f.rfc3986.ipv6address,ipvfuture:f.rfc3986.ipvFuture},f.createRegex=function(h){const r=f.rfc3986,i="(?:\\?"+(h.allowQuerySquareBrackets?r.queryWithSquareBrackets:r.query)+")?(?:#"+r.fragment+")?",a=h.domain?r.relativeRefCapture:r.relativeRef;if(h.relativeOnly)return f.wrap(a+i);let s="";if(h.scheme){t(h.scheme instanceof RegExp||typeof h.scheme=="string"||Array.isArray(h.scheme),"scheme must be a RegExp, String, or Array");const o=[].concat(h.scheme);t(o.length>=1,"scheme must have at least 1 scheme specified");const d=[];for(let u=0;u<o.length;++u){const p=o[u];t(p instanceof RegExp||typeof p=="string","scheme at position "+u+" must be a RegExp or String"),p instanceof RegExp?d.push(p.source.toString()):(t(r.schemeRegex.test(p),"scheme at position "+u+" must be a valid scheme"),d.push(U(p)))}s=d.join("|")}const n="(?:"+(s?"(?:"+s+")":r.scheme)+":"+(h.domain?r.hierPartCapture:r.hierPart)+")",c=h.allowRelative?"(?:"+n+"|"+a+")":n;return f.wrap(c+i,s)},f.wrap=function(h,r){return{raw:h=`(?=.)(?!https?:/(?:$|[^/]))(?!https?:///)(?!https?:[^/])${h}`,regex:new RegExp(`^${h}$`),scheme:r}},f.uriRegex=f.createRegex({}),W.regex=function(h={}){return h.scheme||h.allowRelative||h.relativeOnly||h.allowQuerySquareBrackets||h.domain?f.createRegex(h):f.uriRegex}},1447:(S,W)=>{const m={operators:["!","^","*","/","%","+","-","<","<=",">",">=","==","!=","&&","||","??"],operatorCharacters:["!","^","*","/","%","+","-","<","=",">","&","|","?"],operatorsOrder:[["^"],["*","/","%"],["+","-"],["<","<=",">",">="],["==","!="],["&&"],["||","??"]],operatorsPrefix:["!","n"],literals:{'"':'"',"`":"`","'":"'","[":"]"},numberRx:/^(?:[0-9]*(\.[0-9]*)?){1}$/,tokenRx:/^[\w\$\#\.\@\:\{\}]+$/,symbol:Symbol("formula"),settings:Symbol("settings")};W.Parser=class{constructor(t,U={}){if(!U[m.settings]&&U.constants)for(const f in U.constants){const h=U.constants[f];if(h!==null&&!["boolean","number","string"].includes(typeof h))throw new Error(`Formula constant ${f} contains invalid ${typeof h} value type`)}this.settings=U[m.settings]?U:Object.assign({[m.settings]:!0,constants:{},functions:{}},U),this.single=null,this._parts=null,this._parse(t)}_parse(t){let U=[],f="",h=0,r=!1;const i=s=>{if(h)throw new Error("Formula missing closing parenthesis");const n=U.length?U[U.length-1]:null;if(r||f||s){if(n&&n.type==="reference"&&s===")")return n.type="function",n.value=this._subFormula(f,n.value),void(f="");if(s===")"){const c=new W.Parser(f,this.settings);U.push({type:"segment",value:c})}else if(r){if(r==="]")return U.push({type:"reference",value:f}),void(f="");U.push({type:"literal",value:f})}else if(m.operatorCharacters.includes(f))n&&n.type==="operator"&&m.operators.includes(n.value+f)?n.value+=f:U.push({type:"operator",value:f});else if(f.match(m.numberRx))U.push({type:"constant",value:parseFloat(f)});else if(this.settings.constants[f]!==void 0)U.push({type:"constant",value:this.settings.constants[f]});else{if(!f.match(m.tokenRx))throw new Error(`Formula contains invalid token: ${f}`);U.push({type:"reference",value:f})}f=""}};for(const s of t)r?s===r?(i(),r=!1):f+=s:h?s==="("?(f+=s,++h):s===")"?(--h,h?f+=s:i(s)):f+=s:s in m.literals?r=m.literals[s]:s==="("?(i(),++h):m.operatorCharacters.includes(s)?(i(),f=s,i()):s!==" "?f+=s:i();i(),U=U.map((s,n)=>s.type!=="operator"||s.value!=="-"||n&&U[n-1].type!=="operator"?s:{type:"operator",value:"n"});let a=!1;for(const s of U){if(s.type==="operator"){if(m.operatorsPrefix.includes(s.value))continue;if(!a)throw new Error("Formula contains an operator in invalid position");if(!m.operators.includes(s.value))throw new Error(`Formula contains an unknown operator ${s.value}`)}else if(a)throw new Error("Formula missing expected operator");a=!a}if(!a)throw new Error("Formula contains invalid trailing operator");U.length===1&&["reference","literal","constant"].includes(U[0].type)&&(this.single={type:U[0].type==="reference"?"reference":"value",value:U[0].value}),this._parts=U.map(s=>{if(s.type==="operator")return m.operatorsPrefix.includes(s.value)?s:s.value;if(s.type!=="reference")return s.value;if(this.settings.tokenRx&&!this.settings.tokenRx.test(s.value))throw new Error(`Formula contains invalid reference ${s.value}`);return this.settings.reference?this.settings.reference(s.value):m.reference(s.value)})}_subFormula(t,U){const f=this.settings.functions[U];if(typeof f!="function")throw new Error(`Formula contains unknown function ${U}`);let h=[];if(t){let r="",i=0,a=!1;const s=()=>{if(!r)throw new Error(`Formula contains function ${U} with invalid arguments ${t}`);h.push(r),r=""};for(let n=0;n<t.length;++n){const c=t[n];a?(r+=c,c===a&&(a=!1)):c in m.literals&&!i?(r+=c,a=m.literals[c]):c!==","||i?(r+=c,c==="("?++i:c===")"&&--i):s()}s()}return h=h.map(r=>new W.Parser(r,this.settings)),function(r){const i=[];for(const a of h)i.push(a.evaluate(r));return f.call(r,...i)}}evaluate(t){const U=this._parts.slice();for(let f=U.length-2;f>=0;--f){const h=U[f];if(h&&h.type==="operator"){const r=U[f+1];U.splice(f+1,1);const i=m.evaluate(r,t);U[f]=m.single(h.value,i)}}return m.operatorsOrder.forEach(f=>{for(let h=1;h<U.length-1;)if(f.includes(U[h])){const r=U[h],i=m.evaluate(U[h-1],t),a=m.evaluate(U[h+1],t);U.splice(h,2);const s=m.calculate(r,i,a);U[h-1]=s===0?0:s}else h+=2}),m.evaluate(U[0],t)}},W.Parser.prototype[m.symbol]=!0,m.reference=function(t){return function(U){return U&&U[t]!==void 0?U[t]:null}},m.evaluate=function(t,U){return t===null?null:typeof t=="function"?t(U):t[m.symbol]?t.evaluate(U):t},m.single=function(t,U){if(t==="!")return!U;const f=-U;return f===0?0:f},m.calculate=function(t,U,f){if(t==="??")return m.exists(U)?U:f;if(typeof U=="string"||typeof f=="string"){if(t==="+")return(U=m.exists(U)?U:"")+(m.exists(f)?f:"")}else switch(t){case"^":return Math.pow(U,f);case"*":return U*f;case"/":return U/f;case"%":return U%f;case"+":return U+f;case"-":return U-f}switch(t){case"<":return U<f;case"<=":return U<=f;case">":return U>f;case">=":return U>=f;case"==":return U===f;case"!=":return U!==f;case"&&":return U&&f;case"||":return U||f}return null},m.exists=function(t){return t!=null}},9926:()=>{},5688:()=>{},9708:()=>{},1152:()=>{},443:()=>{},9848:()=>{},5934:S=>{S.exports=JSON.parse('{"version":"17.13.0"}')}},b={},function S(W){var m=b[W];if(m!==void 0)return m.exports;var t=b[W]={exports:{}};return V[W](t,t.exports,S),t.exports}(5107);var V,b})})(vr);var Yi=vr.exports;const ce=_e(Yi);let rt;const Ci=32e3,Gr=1e3;class Qr extends Ct{constructor(e,V,b,S){if(super(),rt=b,!V)throw rt.error("Token generator is required to construct this module."),new Error("Token generator is required to construct this module.");this.webRTCPeer=new Qe,this.signaling=null,this.autoReconnect=S,this.reconnectionInterval=Gr,this.alreadyDisconnected=!1,this.firstReconnection=!0,this.stopReconnection=!1,this.isReconnecting=!1,this.tokenGenerator=V,this.options=null}getRTCPeerConnection(){return this.webRTCPeer?this.webRTCPeer.getRTCPeer():null}stop(){var e;rt.info("Stopping"),this.webRTCPeer.closeRTCPeer(),(e=this.signaling)==null||e.close(),this.signaling=null,this.stopReconnection=!0,this.webRTCPeer=new Qe}isActive(){const e=this.webRTCPeer.getRTCPeerStatus();return rt.info("Broadcast status: ",e||"not_established"),e==="connected"}setReconnect(){this.signaling.on("migrate",()=>this.replaceConnection()),this.autoReconnect&&(this.signaling.on(Ye.connectionError,()=>{(this.firstReconnection||!this.alreadyDisconnected)&&(this.firstReconnection=!1,this.reconnect({error:new Error("Signaling error: wsConnectionError")}))}),this.webRTCPeer.on(Ne.connectionStateChange,e=>{fe.setConnectionState(e),e==="connected"&&fe.setConnectionTime(new Date),(e==="failed"||e==="disconnected"&&this.alreadyDisconnected)&&this.firstReconnection?(this.firstReconnection=!1,this.reconnect({error:new Error("Connection state change: RTCPeerConnectionState disconnected")})):e==="disconnected"?(this.alreadyDisconnected=!0,setTimeout(()=>this.reconnect({error:new Error("Connection state change: RTCPeerConnectionState disconnected")}),1500)):this.alreadyDisconnected=!1}))}async reconnect(e){try{rt.info("Attempting to reconnect..."),!this.isActive()&&!this.stopReconnection&&!this.isReconnecting&&(this.stop(),this.emit("reconnect",{timeout:Yr(this.reconnectionInterval),error:e!=null&&e.error?e==null?void 0:e.error:new Error("Attempting to reconnect")}),this.isReconnecting=!0,await this.connect(this.options),this.alreadyDisconnected=!1,this.reconnectionInterval=Gr,this.firstReconnection=!0,this.isReconnecting=!1)}catch(V){this.isReconnecting=!1,this.reconnectionInterval=Yr(this.reconnectionInterval),rt.error(`Reconnection failed, retrying in ${this.reconnectionInterval}ms. `,V),setTimeout(()=>this.reconnect({error:V}),this.reconnectionInterval)}}}const Yr=l=>l<Ci?l*2:l,Tn=window.RTCRtpSender&&!!RTCRtpSender.prototype.createEncodedStreams&&window.RTCRtpReceiver&&!!RTCRtpReceiver.prototype.createEncodedStreams,Cr="RTCRtpScriptTransform"in window,jr="",ji=l=>Uint8Array.from(atob(l),e=>e.charCodeAt(0)),Ir=typeof window<"u"&&window.Blob&&new Blob([ji(jr)],{type:"text/javascript;charset=utf-8"});function Xr(l){let e;try{if(e=Ir&&(window.URL||window.webkitURL).createObjectURL(Ir),!e)throw"";const V=new Worker(e,{name:l==null?void 0:l.name});return V.addEventListener("error",()=>{(window.URL||window.webkitURL).revokeObjectURL(e)}),V}catch{return new Worker("data:text/javascript;base64,"+jr,{name:l==null?void 0:l.name})}finally{e&&(window.URL||window.webkitURL).revokeObjectURL(e)}}const pe=Te.get("Publish"),wn={mediaStream:null,bandwidth:0,metadata:!1,disableVideo:!1,disableAudio:!1,codec:Ue.H264,simulcast:!1,scalabilityMode:null,peerConfig:{autoInitStats:!0,statsIntervalMs:1e3}};class Ii extends Qr{constructor(e,V,b=!0){e&&pe.warn("The streamName property has been deprecated. In a future release, this will be removed. Please do not rely on this value. Instead, set via token generator"),super(null,V,pe,b)}async connect(e=wn){const V=ce.object({sourceId:ce.string(),stereo:ce.boolean(),dtx:ce.boolean(),absCaptureTime:ce.boolean(),dependencyDescriptor:ce.boolean(),mediaStream:ce.alternatives().try(ce.array().items(ce.object()),ce.object()),bandwidth:ce.number(),metadata:ce.boolean(),disableVideo:ce.boolean(),disableAudio:ce.boolean(),codec:ce.string().valid(...Object.values(Ue)),simulcast:ce.boolean(),scalabilityMode:ce.string(),peerConfig:ce.object(),record:ce.boolean(),events:ce.array().items(ce.string().valid("active","inactive","viewercount")),priority:ce.number()}),{error:b,value:S}=V.validate(e);b&&pe.warn(b,S),this.options={...wn,...e,peerConfig:{...wn.peerConfig,...e.peerConfig},setSDPToPeer:!1},this.options.metadata=this.options.metadata&&this.options.codec===Ue.H264&&!this.options.disableVideo,await this.initConnection({migrate:!1})}async reconnect(e){var V;this.options.mediaStream=((V=this.webRTCPeer)==null?void 0:V.getTracks())??this.options.mediaStream,super.reconnect(e)}async replaceConnection(){var e;pe.info("Migrating current connection"),this.options.mediaStream=((e=this.webRTCPeer)==null?void 0:e.getTracks())??this.options.mediaStream,await this.initConnection({migrate:!0})}async record(){var e;this.recordingAvailable?(this.options.record=!0,await((e=this.signaling)==null?void 0:e.cmd("record")),pe.info("Broadcaster start recording")):pe.error("Record not available")}async unrecord(){var e;this.recordingAvailable?(this.options.record=!1,await((e=this.signaling)==null?void 0:e.cmd("unrecord")),pe.info("Broadcaster stop recording")):pe.error("Unrecord not available")}stop(){var e;super.stop(),(e=this.worker)==null||e.terminate(),this.worker=null}async initConnection(e){var n,c;pe.debug("Broadcast option values: ",this.options),this.stopReconnection=!1;let V;if(!this.options.mediaStream)throw pe.error("Error while broadcasting. MediaStream required"),new Error("MediaStream required");if(!e.migrate&&this.isActive())throw pe.warn("Broadcast currently working"),new Error("Broadcast currently working");let b;try{b=await this.tokenGenerator(),this.options.peerConfig.iceServers=b==null?void 0:b.iceServers,this.options.peerConfig.encodedInsertableStreams=this.options.metadata}catch(o){throw pe.error("Error generating token."),o instanceof Ot&&(o.status===401||!this.autoReconnect?this.stopReconnection=!0:this.reconnect()),o}if(!b)throw pe.error("Error while broadcasting. Publisher data required"),new Error("Publisher data required");const S=xr(b.jwt);if(this.streamName=S.millicast.streamName,this.recordingAvailable=S[Qi.atob("bWlsbGljYXN0")].record,this.options.record&&!this.recordingAvailable)throw pe.error("Error while broadcasting. Record option detected but recording is not available"),new Error("Record option detected but recording is not available");const W=new kn({streamName:this.streamName,url:`${b.urls[0]}?token=${b.jwt}`}),m=e.migrate?new Qe:this.webRTCPeer;await m.createRTCPeer(this.options.peerConfig,Dt.Publisher),(n=this.stopReemitingWebRTCPeerInstanceEvents)==null||n.call(this),(c=this.stopReemitingSignalingInstanceEvents)==null||c.call(this),this.stopReemitingWebRTCPeerInstanceEvents=ot(m,this,[Ne.connectionStateChange]),this.stopReemitingSignalingInstanceEvents=ot(W,this,[Ye.broadcastEvent]);const t=m.getRTCLocalSDP(this.options),U=W.connect();V=await Promise.all([t,U]);const f=V[0];this.options.metadata&&(this.worker||(this.worker=new Xr),this.getRTCPeerConnection().getSenders().forEach(d=>{if(Cr)d.transform=new RTCRtpScriptTransform(this.worker,{name:"senderTransform",codec:this.options.codec});else if(Tn){const{readable:u,writable:p}=d.createEncodedStreams();this.worker.postMessage({action:"insertable-streams-sender",codec:this.options.codec,readable:u,writable:p},[u,p])}}));let h=this.signaling;this.signaling=W;const r=this.signaling.publish(f,this.options),i=m.peer.setLocalDescription(m.sessionDescription);V=await Promise.all([r,i]);let a=V[0];!this.options.disableVideo&&this.options.bandwidth>0&&(a=m.updateBandwidthRestriction(a,this.options.bandwidth)),await m.setRTCRemoteSDP(a),pe.info("Broadcasting to streamName: ",this.streamName);let s=this.webRTCPeer;this.webRTCPeer=m,this.setReconnect(),e.migrate&&this.webRTCPeer.on(Ne.connectionStateChange,o=>{var d,u;["connected","disconnected","failed","closed"].includes(o)&&((d=h==null?void 0:h.close)==null||d.call(h),(u=s==null?void 0:s.closeRTCPeer)==null||u.call(s),h=s=null)})}sendMetadata(e,V=Wi){var b;if((b=this.options)!=null&&b.metadata&&this.worker)this.worker.postMessage({action:"metadata-sei-user-data-unregistered",uuid:V,payload:e});else{let S="Could not send metadata due to:";this.options?this.options.metadata?this.worker||(S+=`
- Stream not being published.`):(S+=`
- Metadata option is not enabled.`,this.options.codec!==Ue.H264&&(S+=`
- Incompatible codec. Only H264 available.`),this.options.disableVideo&&(S+=`
- Video disabled.`)):S+=`
- Stream not being published.`,pe.warn(S)}}}const ue=Te.get("View"),Mn={metadata:!1,disableVideo:!1,disableAudio:!1,peerConfig:{autoInitStats:!0,statsIntervalMs:1e3}};class Xi extends Qr{constructor(e,V,b=null,S=!0){e&&ue.warn("The streamName property has been deprecated. In a future release, this will be removed. Please do not rely on this value. Instead, set via token generator"),super(null,V,ue,S),this.payloadTypeCodec={},this.tracksMidValues={},b&&this.on(Ne.track,W=>{b.srcObject=W.streams[0]})}async connect(e=Mn){this.options={...Mn,...e,peerConfig:{...Mn.peerConfig,...e.peerConfig},setSDPToPeer:!1},await this.initConnection({migrate:!1})}async select(e={}){ue.debug("Viewer select layer values: ",e),await this.signaling.cmd("select",{layer:e}),ue.info("Connected to streamName: ",this.streamName)}async addRemoteTrack(e,V){return ue.info("Viewer adding remote % track",e),this.webRTCPeer.addRemoteTrack(e,V)}async project(e,V){for(const b of V){if(!b.trackId&&!b.media)throw ue.error("Error in projection mapping, trackId or mediaId must be set"),new Error("Error in projection mapping, trackId or mediaId must be set");const S=this.webRTCPeer.getRTCPeer();if(b.mediaId&&!S.getTransceivers().find(W=>W.mid===b.mediaId.toString()))throw ue.error(`Error in projection mapping, ${b.mediaId} mid not found in local transceivers`),new Error(`Error in projection mapping, ${b.mediaId} mid not found in local transceivers`)}ue.debug("Viewer project source: layer mappings: ",e,V),await this.signaling.cmd("project",{sourceId:e,mapping:V}),ue.info("Projection done")}async unproject(e){ue.debug("Viewer unproject mediaIds: ",e),await this.signaling.cmd("unproject",{mediaIds:e}),ue.info("Unprojection done")}async replaceConnection(){ue.info("Migrating current connection"),await this.initConnection({migrate:!0})}stop(){var e;super.stop(),(e=this.worker)==null||e.terminate(),this.worker=null,this.payloadTypeCodec={},this.tracksMidValues={}}async initConnection(e){var n,c;ue.debug("Viewer connect options values: ",this.options),this.stopReconnection=!1;let V;if(!e.migrate&&this.isActive())throw ue.warn("Viewer currently subscribed"),new Error("Viewer currently subscribed");let b;try{b=await this.tokenGenerator(),this.options.peerConfig.iceServers=b==null?void 0:b.iceServers,this.options.metadata&&(this.options.peerConfig.encodedInsertableStreams=Tn)}catch(o){throw ue.error("Error generating token."),o instanceof Ot&&(o.status===401||!this.autoReconnect?this.stopReconnection=!0:this.reconnect()),o}if(!b)throw ue.error("Error while subscribing. Subscriber data required"),new Error("Subscriber data required");const S=xr(b.jwt);this.streamName=S.millicast.streamName;const W=new kn({streamName:this.streamName,url:`${b.urls[0]}?token=${b.jwt}`}),m=e.migrate?new Qe:this.webRTCPeer;await m.createRTCPeer(this.options.peerConfig),(n=this.stopReemitingWebRTCPeerInstanceEvents)==null||n.call(this),(c=this.stopReemitingSignalingInstanceEvents)==null||c.call(this),this.stopReemitingWebRTCPeerInstanceEvents=ot(m,this,Object.values(Ne)),this.stopReemitingSignalingInstanceEvents=ot(W,this,[Ye.broadcastEvent]),this.options.metadata&&(this.worker||(this.worker=new Xr),m.on("track",o=>{var d,u,p;if(this.tracksMidValues[(d=o.transceiver)==null?void 0:d.mid]=o.track,Cr)o.receiver.transform=new RTCRtpScriptTransform(this.worker,{name:"receiverTransform",payloadTypeCodec:{...this.payloadTypeCodec},codec:this.options.metadata&&"h264",mid:(u=o.transceiver)==null?void 0:u.mid});else if(Tn){const{readable:g,writable:k}=o.receiver.createEncodedStreams();this.worker.postMessage({action:"insertable-streams-receiver",payloadTypeCodec:{...this.payloadTypeCodec},codec:this.options.metadata&&"h264",mid:(p=o.transceiver)==null?void 0:p.mid,readable:g,writable:k},[g,k])}}),this.worker.onmessage=o=>{const d=new TextDecoder,u=o.data.metadata;if(u.mid=o.data.mid,u.track=this.tracksMidValues[o.data.mid],u.uuid){const p=u.uuid;u.uuid=p.reduce((g,k)=>g+k.toString(16).padStart(2,"0"),""),u.uuid=u.uuid.replace(/(.{8})(.{4})(.{4})(.{4})(.{12})/,"$1-$2-$3-$4-$5")}if(u.timecode&&(u.timecode=new Date(d.decode(u.timecode))),u.unregistered){const p=d.decode(u.unregistered);try{const g=JSON.parse(p);u.unregistered=g}catch{ue.info("The content could not be converted to JSON, returning raw bytes instead")}}this.emit("metadata",u),this.emit("onMetadata",u)});const t=m.getRTCLocalSDP({...this.options,stereo:!0}),U=W.connect();V=await Promise.all([t,U]);const f=V[0];let h=this.signaling;this.signaling=W;const r=this.signaling.subscribe(f,{...this.options,vad:this.options.multiplexedAudioTracks>0}),i=m.peer.setLocalDescription(m.sessionDescription);V=await Promise.all([r,i]);const a=V[0];this.payloadTypeCodec=me.getCodecPayloadType(a),await m.setRTCRemoteSDP(a),ue.info("Connected to streamName: ",this.streamName);let s=this.webRTCPeer;this.webRTCPeer=m,this.setReconnect(),e.migrate&&this.webRTCPeer.on(Ne.connectionStateChange,o=>{var d,u;o==="connected"?setTimeout(()=>{var p,g;(p=h==null?void 0:h.close)==null||p.call(h),(g=s==null?void 0:s.closeRTCPeer)==null||g.call(s),h=s=null,ue.info("Current connection migrated")},1e3):["disconnected","failed","closed"].includes(o)&&((d=h==null?void 0:h.close)==null||d.call(h),(u=s==null?void 0:s.closeRTCPeer)==null||u.call(s),h=s=null)})}}Fe.Director=yt,Fe.Logger=Te,Fe.PeerConnection=Qe,Fe.Publish=Ii,Fe.Signaling=kn,Fe.View=Xi,Object.defineProperty(Fe,Symbol.toStringTag,{value:"Module"})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
